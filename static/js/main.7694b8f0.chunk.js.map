{"version":3,"sources":["serviceWorker.ts","reducers/loading.ts","reducers/bootstrap.ts","components/Player/Player.tsx","components/Widget/Widget.tsx","components/Spinner/Spinner.tsx","utilities/settings.ts","utilities/arrays.ts","utilities/numbers.ts","utilities/stats.ts","utilities/events.ts","utilities/chips.ts","utilities/strings.ts","reducers/settings.ts","components/Button/Button.tsx","hooks/useClickOutside.ts","hooks/useMeanLabel.ts","hooks/useMeanValue.ts","components/Modal/Modal.tsx","reducers/stats.ts","reducers/history.ts","components/HistoryWidget/HistoryWidget.tsx","components/TotsPlayer/TotsPlayer.tsx","components/TotsWidget/TotsWidget.tsx","components/Metric/Metric.tsx","components/SiteLink/SiteLink.tsx","components/PlayerStatsWidget/PlayerStatsWidget.tsx","components/FormationWidget/FormationWidget.tsx","components/CaptainWidget/CaptainWidget.tsx","components/GameweekWidget/GameweekWidget.tsx","components/PositionsWidget/PositionsWidget.tsx","reducers/entry.ts","components/SeasonWidget/SeasonWidget.tsx","components/Team/Team.tsx","components/TeamsWidget/TeamsWidget.tsx","components/NonBlankStreakWidget/NonBlankStreakWidget.tsx","components/SelectionStreakWidget/SelectionStreakWidget.tsx","components/StartStreakWidget/StartStreakWidget.tsx","components/BenchStreakWidget/BenchStreakWidget.tsx","components/SwapIcon/SwapIcon.tsx","components/CaptainOpportunityWidget/CaptainOpportunityWidget.tsx","components/SelectionWidget/SelectionWidget.tsx","components/StarterWidget/StarterWidget.tsx","components/BenchWidget/BenchWidget.tsx","components/DifferenceWidget/DifferenceWidget.tsx","components/OverallRankWidget/OverallRankWidget.tsx","components/PointsWidget/PointsWidget.tsx","components/ValueWidget/ValueWidget.tsx","components/WrongCaptainWidget/WrongCaptainWidget.tsx","components/ContributionWidget/ContributionWidget.tsx","components/MissedPointsShareWidget/MissedPointsShareWidget.tsx","components/NearMissesWidget/NearMissesWidget.tsx","components/Dashboard/Dashboard.tsx","reducers/index.ts","index.tsx","store.ts"],"names":["Boolean","window","location","hostname","match","loading","createSlice","name","initialState","reducers","startLoading","state","finishLoading","actions","bootstrap","data","undefined","fetchBootstrapStart","fetchBootstrapSuccess","action","payload","Player","props","useSelector","player","elements","find","el","id","team","teams","position","element_types","element_type","className","classNames","extended","reversed","src","code","singular_name_short","alt","web_name","suffix","title","short_name","Widget","settings","cssClasses","children","Spinner","validateTeamId","value","number","Number","isNaN","isInteger","sort","series","comparator","direction","a","b","head","length","last","reduce","extractor","initialValue","acc","curr","thousandsSeparator","toString","replace","sumNumbers","round","precision","formatted","toFixed","test","split","getTotalSelections","statData","filter","pick","multiplier","getTotalStarts","getTotalBenched","getTotalPoints","points","getTotalRawPoints","rawPoints","getTotalBenchPoints","getAllPlayers","stats","Object","values","concat","getPlayerAggregate","key","getTopStatAggregate","players","aggregates","totals","getStreak","comparison","ignoreBlanks","streaks","slice","max","Math","start","indexOf","map","streak","event","end","getSelectionStreak","gw","getStartStreak","getBenchStreak","getNonBlankStreak","getTeamOfTheSeason","gk","def","mid","fwd","top","rest","xi","element","bench","getPastEvents","events","timestamp","Date","now","deadline_time_epoch","getShortName","pop","chips","bboost","freehit","wildcard","initialCaps","charAt","toUpperCase","toLowerCase","pluralise","singular","plural","parsedValue","getGWCountLabel","getPointsLabel","localStorage","getItem","meanStrategy","setId","setItem","removeItem","setMeanStrategy","Button","secondary","type","onClick","disabled","label","useClickOutside","callback","React","useRef","useEffect","listener","e","target","Node","current","contains","document","addEventListener","removeEventListener","useMeanLabel","strategy","useMeanValue","average","sorted","ceil","median","Modal","useState","setValue","dispatch","useDispatch","close","useCallback","cancel","onClose","ref","onSubmit","preventDefault","placeholder","onChange","emptyAggregates","redCards","yellowCards","goals","assists","cleanSheets","goalsConceded","ownGoals","saves","minutes","penaltiesMissed","penaltiesSaved","timesInDreamteam","bps","bonus","captaincies","benchPoints","selections","starts","benched","selection","nonBlank","tots","buildDataStart","buildDataSuccess","fetchPicks","entry","fetch","encodeURIComponent","response","json","fetchEvent","fetchGameweekInformation","Promise","all","live","history","fetchHistoryStart","fetchHistorySuccess","HistoryWidget","meanLabel","meanValue","pastSeasonsByRank","past","rank","pastSeasonsByPoints","total_points","bestRankedSeason","worstRankedSeason","bestPointSeason","worstPointSeason","top1k","season","top10k","top100k","top1m","season_name","TotsPlayer","TotsWidget","explanations","Metric","metric","SiteLink","url","href","rel","PlayerStatsWidget","allPlayers","reds","yellows","inDreamteam","mostCaptaincies","topReturner","topBenchGWReturner","topSeasonReturner","topBenchReturner","weeks","idealCaptain","entries","Array","from","keys","index","week","returner","renderTopBenchGWReturner","FormationWidget","formations","val","join","formation","count","information","formatFormation","CaptainWidget","captains","captain","sum","GameweekWidget","differences","average_entry_score","sortedRanks","gws","bestGW","worstGW","bestGWRank","worstGWRank","diff","PositionsWidget","positions","elementType","totalPoints","plural_name","fetchEntryStart","fetchEntrySuccess","getAggregateValues","SeasonWidget","totalTransfers","event_transfers","totalHits","event_transfers_cost","totalBenched","points_on_bench","tc","findIndex","bbWeek","bbPoints","doubleDigitHauls","totalPlays","summary_overall_points","Team","TeamsWidget","counts","positionPlayers","data-position","plural_name_short","NonBlankStreakWidget","streakers","aStreak","bStreak","aStreakLength","bStreakLength","streaker","SelectionStreakWidget","StartStreakWidget","BenchStreakWidget","SwapIcon","width","height","viewBox","fill","fillRule","d","transform","CaptainOpportunityWidget","improvements","improvement","captainData","topData","StarterWidget","BenchWidget","DifferenceWidget","benchedPercentage","startsPercentage","topStarters","percentageDiff","topBenchwarmers","OverallRankWidget","overall_rank","margin","bottom","left","right","dataKey","fillOpacity","stroke","tickFormatter","thousandsShorthand","domain","interval","tickCount","angle","textAnchor","strokeDasharray","isAnimationActive","formatter","separator","ValueWidget","bank","WrongCaptainWidget","timesUsed","ContributionWidget","contributions","getPointsShare","MissedPointsShareWidget","NearMissesWidget","totsIds","includes","sortings","alphabet","charCodeAt","sortOptions","Dashboard","isModalOpen","setIsModalOpen","setSort","isLoading","dashboardRef","query","queryString","parse","hash","setTimeout","scrollTo","scrollWidth","gameweeks","forEach","active_chip","entry_history","picks","item","buildData","fetchHistory","fetchEntry","stringify","summary_overall_rank","options","option","styles","container","provided","menu","zIndex","top_element_info","sorting","renderPlayerList","SelectionWidget","PointsWidget","combineReducers","ReactDOM","render","StrictMode","store","configureStore","reducer","rootReducer","middleware","getDefaultMiddleware","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.7694b8f0.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void\n  onUpdate?: (registration: ServiceWorkerRegistration) => void\n}\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    )\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister()\n      })\n      .catch(error => {\n        console.error(error.message)\n      })\n  }\n}\n","import { createSlice } from '@reduxjs/toolkit'\n\nconst loading = createSlice({\n    name: 'loading',\n    initialState: 0,\n    reducers: {\n        startLoading(state) {\n            state += 1\n\n            return state\n        },\n        finishLoading(state) {\n            state -= 1\n\n            return state\n        },\n    },\n})\n\nexport const { startLoading, finishLoading } = loading.actions\n\nexport default loading.reducer","import { createSlice, ThunkAction, Action } from '@reduxjs/toolkit'\nimport { Bootstrap } from '../types'\nimport { finishLoading, startLoading } from './loading'\n\nconst bootstrap = createSlice({\n    name: 'bootstrap',\n    initialState: {\n        data: undefined,\n    },\n    reducers: {\n        fetchBootstrapStart(state) {\n            state.data = undefined\n        },\n        fetchBootstrapSuccess(state, action) {\n            state.data = action.payload\n        },\n    },\n})\n\nexport const { fetchBootstrapStart, fetchBootstrapSuccess } = bootstrap.actions\n\nexport const fetchBootstrap = (): ThunkAction<void, Bootstrap, unknown, Action<string>> => async dispatch => {\n    dispatch(fetchBootstrapStart())\n    dispatch(startLoading())\n\n    const response = await fetch(`https://jsonp.afeld.me/?url=${encodeURIComponent('https://fantasy.premierleague.com/api/bootstrap-static/')}`)\n\n    const data = await response.json()\n\n    dispatch(fetchBootstrapSuccess(data))\n    dispatch(finishLoading())\n}\n\nexport default bootstrap.reducer","import React from 'react'\nimport { useSelector } from 'react-redux'\nimport classNames from 'classnames'\nimport { RootState } from '../../reducers'\nimport './Player.scss'\n\ntype Props = {\n    id: number\n    extended?: boolean\n    reversed?: boolean\n    suffix?: string | (() => JSX.Element | null)\n}\n\nconst Player: React.FC<Props> = (props: Props) => {\n    const bootstrap = useSelector((state: RootState) => state.bootstrap.data)\n\n    const player = bootstrap?.elements.find(el => el.id === props.id)\n    const team = bootstrap?.teams.find(el => el.id === player?.team)\n    const position = bootstrap?.element_types.find(el => el.id === player?.element_type)\n\n    return (\n        <div className={classNames('player', { 'player--condensed': !props.extended, 'player--reversed': props.reversed })}>\n            <img\n                src={`https://fantasy.premierleague.com/dist/img/shirts/special/shirt_${team?.code}${position?.singular_name_short === 'GKP' ? '_1' : ''}-66.png`}\n                alt={player?.web_name}\n                className=\"player__shirt\"\n            />\n            <div className=\"player__detail\">\n                <div className=\"player__name\">\n                    <span>\n                        {props.suffix && !props.extended ? (\n                            <b>{player?.web_name}</b>\n                        ) : (\n                            player?.web_name\n                        )}\n                        {typeof props.suffix === 'string' ? ` (${props.suffix})` : props.suffix ? props.suffix() : null}\n                    </span>\n                </div>\n                <div className=\"player__info\">\n                    <span className=\"player__team\" title={team?.name}>{team?.short_name}</span>\n                    <span className=\"player__position\">{position?.singular_name_short}</span>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default Player","import React from 'react'\nimport classNames from 'classnames'\nimport { useSelector } from 'react-redux'\nimport { RootState } from '../../reducers'\nimport './Widget.scss'\n\ntype Props = {\n    title?: string\n    children?: React.ReactNode\n    cssClasses?: string\n}\n\nconst Widget: React.FC<Props> = (props: Props) => {\n    const id = useSelector((state: RootState) => state.settings.id)\n\n    return (\n        <div className={classNames('widget', props.cssClasses, {\n            'widget--cloaked': !id,\n        })}>\n            {props.title && (\n                <h3 className=\"widget__title\">{props.title}</h3>\n            )}\n            <div className=\"widget__content\">\n                {props.children}\n            </div>\n        </div>\n    )\n}\n\nexport default Widget","import React from 'react'\nimport './Spinner.scss'\n\nconst Spinner: React.FC = () => (\n    <div className=\"spinner\">\n        <div className=\"spinner__item\"></div>\n        <div className=\"spinner__item\"></div>\n        <div className=\"spinner__item\"></div>\n        <div className=\"spinner__item\"></div>\n        <div className=\"spinner__item\"></div>\n        <div className=\"spinner__item\"></div>\n        <div className=\"spinner__item\"></div>\n        <div className=\"spinner__item\"></div>\n        <div className=\"spinner__item\"></div>\n    </div>\n)\n\nexport default Spinner","export const validateTeamId = (value: string) => {\n    const number = Number(value)\n    return value && !Number.isNaN(number) && Number.isInteger(number)\n}","export const sort = <T>(series: T[], comparator: (element: T) => number, direction: 'asc' | 'desc' = 'desc'): T[] => {\n    return [ ...series ].sort((a, b) => (comparator(a) - comparator(b)) * (direction === 'desc' ? -1 : 1))\n}\n\nexport const head = <T>(series: T[]): T | null => {\n    return series.length ? series[0] : null\n}\n\nexport const last = <T>(series: T[]): T | null => {\n    return series.length ? series[series.length - 1] : null\n}\n\nexport const reduce = <T>(series: T[], extractor: (element: T) => number, initialValue: number = 0): number => {\n    return series.reduce((acc, curr) => acc + extractor(curr), initialValue)\n}","import { head, reduce, sort } from './arrays'\n\nexport const thousandsSeparator = (value: number): string => {\n    return value.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',')\n}\n\nexport const thousandsShorthand = (value: number): string => {\n    return value > 999999 ? `${round(value / 1000000)}M` : value > 999 ? `${round(value / 1000, 0)}K` : `${value}`\n}\n\nexport const sumNumbers = (series: number[]): number => {\n    return reduce(series, el => el)\n}\n\nexport const average = (series: number[]): number => {\n    return series.length ? sumNumbers(series) / series.length : 0\n}\n\nexport const median = (series: number[]): number => {\n    const sorted = sort(series, el => el)\n    const mid = Math.ceil(series.length / 2)\n\n    if (sorted.length % 2 === 0) {\n        return (sorted[mid] + sorted[mid + 1]) / 2\n    }\n\n    return sorted[mid - 1]\n}\n\nexport const round = (value: number, precision: number = 1): string => {\n    const formatted = value.toFixed(precision)\n\n    if (/\\.0+$/.test(formatted)) {\n        return head(formatted.split('.')) || ''\n    }\n\n    return formatted\n}","import { ElementStats, StatData, Stats, StatDataGameweek, Streak } from '../types'\nimport { StatAggregateTotals } from '../types/stat-aggregate-totals'\nimport { head, reduce, sort } from './arrays'\nimport { sumNumbers } from './numbers'\n\nexport const getTotalSelections = (statData: StatData): number => {\n    return statData.data.filter(pick => pick.multiplier !== null).length\n}\n\nexport const getTotalStarts = (statData: StatData): number => {\n    return statData.data.filter(pick => pick.multiplier && pick.multiplier > 0).length\n}\n\nexport const getTotalBenched = (statData: StatData): number => {\n    return statData.data.filter(pick => pick.multiplier === 0).length\n}\n\nexport const getTotalPoints = (statData: StatData): number => {\n    return reduce(statData.data, el => el.points || 0)\n}\n\nexport const getTotalCaptaincies = (statData: StatData): number => {\n    return statData.data.filter(data => (data.multiplier || 0) > 1).length\n}\n\nexport const getTotalRawPoints = (statData: StatData): number => {\n    return reduce(statData.data, el => el.rawPoints || 0)\n}\n\nexport const getTotalBenchPoints = (statData: StatData): number => {\n    return reduce(statData.data, el => el.multiplier === 0 ? (el.rawPoints || 0) : 0)\n}\n\nexport const getAllPlayers = (stats: Stats): StatData[] => {\n    return Object.values(stats).reduce((acc, curr) => acc.concat(curr), [])\n}\n\nexport const getPlayerAggregate = (player: StatData, key: keyof ElementStats): number => player.data.reduce((acc, data) => {\n    if (typeof data.stats?.[key] === 'number') {\n        return ((data.stats?.[key] as number) || 0) + acc\n    }\n\n    if (typeof data.stats?.[key] === 'boolean') {\n        return (+(data.stats?.[key] as boolean) || 0) + acc\n    }\n\n    return acc\n}, 0)\n\nexport const getTopStatAggregate = (players: StatData[], key: keyof StatAggregateTotals): StatData | null => head(sort(players, el => el.aggregates.totals[key]))\n\nconst getStreak = (statData: StatData, comparison: (gw: StatDataGameweek) => boolean, ignoreBlanks: boolean = false): Streak | null => {\n    const streaks = statData.data.reduce((acc, curr) => {\n        if (comparison(curr)) {\n            if (ignoreBlanks) {\n                return [ ...acc.slice(0, acc.length - 1), acc[acc.length - 1] + 1 ]\n            }\n\n            if (!acc.length || acc[acc.length - 1] === 0) {\n                return [ ...acc, 1 ]\n            }\n\n            return [ ...acc.slice(0, acc.length - 1), acc[acc.length - 1] + 1 ]\n        }\n\n        return [ ...acc, 0 ]\n    }, (ignoreBlanks ? [ 0 ] : []) as number[])\n\n    const max = Math.max(...streaks)\n\n    if (max === 0) {\n        return null\n    }\n\n    const start = statData.data[sumNumbers(streaks.slice(0, streaks.indexOf(max)).map(streak => streak > 0 ? streak : 1))].event\n    const end = statData.data[start.id - 2 + max].event\n\n    const points = sumNumbers(statData.data\n        .slice(start.id - 1, start.id - 1 + max)\n        .map(event => event.points || 0))\n\n    return {\n        start,\n        end,\n        length: max,\n        points,\n    }\n}\n\nexport const getSelectionStreak = (statData: StatData): Streak | null => getStreak(statData, (gw) => gw.multiplier !== null, true)\n\nexport const getStartStreak = (statData: StatData): Streak | null => getStreak(statData, (gw) => (gw.multiplier || 0) > 0, true)\n\nexport const getBenchStreak = (statData: StatData): Streak | null => getStreak(statData, (gw) => gw.multiplier === 0, true)\n\nexport const getNonBlankStreak = (statData: StatData): Streak | null => getStreak(statData, (gw) => (gw.rawPoints || 0) > 2)\n\nconst MIN_GK = 1\nconst MAX_GK = 2\n\nconst MIN_DEF = 3\nconst MAX_DEF = 5\n\nconst MIN_MID = 2\nconst MAX_MID = 5\n\nconst MIN_FWD = 1\nconst MAX_FWD = 3\n\nexport const getTeamOfTheSeason = (stats: Stats): { xi: StatData[], bench: StatData[] } => {\n    const gk = sort(stats[1], el => el.aggregates.totals.points).slice(0, MAX_GK)\n    const def = sort(stats[2], el => el.aggregates.totals.points).slice(0, MAX_DEF)\n    const mid = sort(stats[3], el => el.aggregates.totals.points).slice(0, MAX_MID)\n    const fwd = sort(stats[4], el => el.aggregates.totals.points).slice(0, MAX_FWD)\n\n    const top = gk.slice(0, MIN_GK).concat(def.slice(0, MIN_DEF)).concat(mid.slice(0, MIN_MID)).concat(fwd.slice(0, MIN_FWD))\n    const rest = sort(def.slice(MIN_DEF).concat(mid.slice(MIN_MID)).concat(fwd.slice(MIN_FWD)), el => el.aggregates.totals.points)\n\n    const xi = sort(top.concat(rest.slice(0, 4)), el => el.element.element_type, 'asc')\n    const bench = sort(gk.slice(MIN_GK).concat(rest.slice(4)), el => el.element.element_type, 'asc')\n\n    return {\n        xi,\n        bench,\n    }\n}","import { Event } from '../types'\n\nexport const getPastEvents = (events: Event[]): Event[] => {\n    const timestamp = Date.now()\n    return events.filter(event => event.deadline_time_epoch * 1000 < timestamp)\n}\n\nexport const getShortName = (event: Event): string => {\n    return event.name.split(' ').pop() || ''\n}","const chips: { [key: string]: string } = {\n    '3xc': 'TC',\n    bboost: 'BB',\n    freehit: 'FH',\n    wildcard: 'WC',\n}\n\nexport const getChipAbbreviation = (key: string): string | null => chips[key] || null","export const initialCaps = (value: string): string => `${value.charAt(0).toUpperCase()}${value.toLowerCase().slice(1)}`\n\nexport const pluralise = (value: number | string, singular: string, plural: string) => {\n    const parsedValue = typeof value === 'number' ? value : Number(value.replace(/,/g, ''))\n\n    return `${value} ${parsedValue === 1 ? singular : plural}`\n}\n\nexport const getGWCountLabel = (value: number | string): string => pluralise(value, 'GW', 'GWs')\n\nexport const getPointsLabel = (value: number | string): string => pluralise(value, 'pt', 'pts')","import { createSlice } from '@reduxjs/toolkit'\n\nconst settings = createSlice({\n    name: 'settings',\n    initialState: {\n        id: localStorage.getItem('id') || undefined,\n        meanStrategy: localStorage.getItem('meanStrategy') || 'average',\n    },\n    reducers: {\n        setId(state, action) {\n            state.id = action.payload\n\n            if (state.id) {\n                localStorage.setItem('id', state.id)\n            } else {\n                localStorage.removeItem('id')\n            }\n        },\n        setMeanStrategy(state, action) {\n            state.meanStrategy = action.payload\n            localStorage.setItem('meanStrategy', state.meanStrategy)\n        }\n    },\n})\n\nexport const { setId, setMeanStrategy } = settings.actions\n\nexport default settings.reducer","import React from 'react'\nimport classNames from 'classnames'\nimport './Button.scss'\n\ntype Props = {\n    label: string\n    type?: 'reset' | 'submit' | 'button'\n    disabled?: boolean\n    secondary?: boolean\n    onClick?: () => void\n}\n\nconst Button: React.FC<Props> = (props: Props) => (\n    <button\n        className={classNames('button', { 'button--secondary': props.secondary })}\n        type={props.type || 'button'}\n        onClick={props.onClick}\n        disabled={props.disabled}\n    >\n        {props.label}\n    </button>\n)\n\nexport default Button","import React from 'react'\n\nconst useClickOutside = <T extends HTMLElement>(callback: () => void): React.RefObject<T> => {\n  const element = React.useRef<T>(null)\n\n  React.useEffect(() => {\n    const listener = (e: MouseEvent): void => {\n      if (e.target instanceof Node && element.current && !element.current.contains(e.target)) {\n        callback()\n      }\n    }\n\n    if (element.current) {\n      document.addEventListener('click', listener)\n    } else {\n      document.removeEventListener('click', listener)\n    }\n\n    return () => document.removeEventListener('click', listener)\n  }, [element, callback])\n\n  return element\n}\n\nexport default useClickOutside\n","import { useSelector } from 'react-redux'\nimport { RootState } from '../reducers'\n\nconst useMeanLabel: () => (suffix: string) => string = () => {\n    const strategy = useSelector((state: RootState) => state.settings.meanStrategy)\n\n    return (suffix: string) => `${strategy === 'average' ? 'Average' : 'Median'} ${suffix}`\n}\n\nexport default useMeanLabel","import { useSelector } from 'react-redux'\nimport { RootState } from '../reducers'\nimport { average, median } from '../utilities'\n\nconst useMeanValue: () => (series: number[]) => number = () => {\n    const strategy = useSelector((state: RootState) => state.settings.meanStrategy)\n\n    return (series: number[]) => {\n        if (strategy === 'average') {\n            return average(series)\n        }\n\n        return median(series)\n    }\n}\n\nexport default useMeanValue","import React, { useState, useEffect, useCallback } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { setId } from '../../reducers/settings'\nimport { Button } from '../Button'\nimport { useClickOutside } from '../../hooks'\nimport { validateTeamId } from '../../utilities'\nimport { RootState } from '../../reducers'\nimport './Modal.scss'\n\ntype Props = {\n    onClose?: () => void\n}\n\nconst Modal: React.FC<Props> = (props: Props) => {\n    const [ value, setValue ] = useState<string>('')\n\n    const id = useSelector((state: RootState) => state.settings.id)\n\n    const dispatch = useDispatch()\n\n    const close = useCallback((cancel: boolean) => {\n        if (!cancel) {\n            dispatch(setId(Number(value)))\n        } else if (!id) {\n            return\n        }\n\n        if (props.onClose) {\n            props.onClose()\n        }\n    }, [ dispatch, props, value, id ])\n\n    const ref = useClickOutside<HTMLDivElement>(() => close(true))\n\n    useEffect(() => {\n        const listener = (e: KeyboardEvent) => {\n            if (e.key === 'Escape') {\n                close(true)\n            }\n        }\n\n        document.addEventListener('keyup', listener)\n\n        return () => document.removeEventListener('keyup', listener)\n    }, [ close ])\n\n    return (\n        <form onSubmit={e => { close(false); e.preventDefault() }}>\n            <div className=\"modal\">\n                <div className=\"modal__element\" ref={ref}>\n                    <header className=\"modal__header\">\n                        Enter Your Team ID\n                    </header>\n                    <div className=\"modal__body\">\n                        <input\n                            className=\"modal__input\"\n                            type=\"text\"\n                            placeholder=\"e.g. 4654486\"\n                            value={value}\n                            onChange={e => setValue(e.target.value)}\n                        />\n                    </div>\n                    <footer className=\"modal__footer\">\n                        <Button\n                            label=\"Show Stats\"\n                            type=\"submit\"\n                            disabled={!validateTeamId(value)}\n                        />\n                    </footer>\n                </div>\n            </div>\n        </form>\n    )\n}\n\nexport default Modal\n","import { createSlice, ThunkAction, Action } from '@reduxjs/toolkit'\nimport { Bootstrap, Picks, Stats, StatData, LiveEvent } from '../types'\nimport { getPastEvents, getPlayerAggregate, getTotalPoints, getTotalBenchPoints, getTotalRawPoints, getTotalSelections, getTotalStarts, getTotalBenched, getTotalCaptaincies, getSelectionStreak, getStartStreak, getBenchStreak, getNonBlankStreak, getTeamOfTheSeason } from '../utilities'\nimport { finishLoading, startLoading } from './loading'\n\nconst emptyAggregates = {\n    totals: {\n        redCards: 0,\n        yellowCards: 0,\n        goals: 0,\n        assists: 0,\n        cleanSheets: 0,\n        goalsConceded: 0,\n        ownGoals: 0,\n        saves: 0,\n        minutes: 0,\n        penaltiesMissed: 0,\n        penaltiesSaved: 0,\n        timesInDreamteam: 0,\n        bps: 0,\n        bonus: 0,\n        captaincies: 0,\n        points: 0,\n        rawPoints: 0,\n        benchPoints: 0,\n        selections: 0,\n        starts: 0,\n        benched: 0,\n    },\n    streaks: {\n        selection: null,\n        start: null,\n        bench: null,\n        nonBlank: null,\n    },\n}\n\nconst stats = createSlice({\n    name: 'stats',\n    initialState: {\n        data: undefined,\n        chips: undefined,\n        tots: undefined,\n    },\n    reducers: {\n        buildDataStart(state) {\n            state.data = undefined\n            state.chips = undefined\n            state.tots = undefined\n        },\n        buildDataSuccess(state, action) {\n            state.data = action.payload.data\n            state.chips = action.payload.chips\n            state.tots = action.payload.tots\n        },\n    },\n})\n\nexport const { buildDataStart, buildDataSuccess } = stats.actions\n\nconst fetchPicks = async (event: number, entry: number): Promise<Picks> => {\n    const response = await fetch(`https://jsonp.afeld.me/?url=${encodeURIComponent(`https://fantasy.premierleague.com/api/entry/${entry}/event/${event}/picks/`)}`)\n    return await response.json()\n}\n\nconst fetchEvent = async (event: number): Promise<LiveEvent> => {\n    const response = await fetch(`https://jsonp.afeld.me/?url=${encodeURIComponent(`https://fantasy.premierleague.com/api/event/${event}/live/`)}`)\n    return await response.json()\n}\n\nconst fetchGameweekInformation = async (event: number, entry: number): Promise<{ pick: Picks, live: LiveEvent }> => {\n    const [ pick, live ] = await Promise.all([\n        fetchPicks(event, entry),\n        fetchEvent(event),\n    ])\n\n    return {\n        pick,\n        live,\n    }\n}\n\nexport const buildData = (bootstrap: Bootstrap, entry: number): ThunkAction<void, Bootstrap, unknown, Action<string>> => async dispatch => {\n    dispatch(buildDataStart())\n    dispatch(startLoading())\n\n    const gameweeks = await Promise.all(\n        getPastEvents(bootstrap.events).map(async event => await fetchGameweekInformation(event.id, entry))\n    )\n\n    const stats: { [key: number]: StatData } = {}\n    const chips: { [key: number]: string } = {}\n\n    gameweeks.forEach(gw => {\n        if (gw.pick.active_chip) {\n            chips[gw.pick.entry_history.event] = gw.pick.active_chip\n        }\n\n        gw.pick.picks.forEach(item => {\n            if (!stats[item.element]) {\n                stats[item.element] = {\n                    element: bootstrap.elements.find(el => el.id === item.element)!,\n                    data: bootstrap.events.filter(event => event.id < gw.pick.entry_history.event).map(event => ({\n                        event,\n                        multiplier: null,\n                        points: null,\n                        rawPoints: null,\n                        stats: null,\n                        position: null,\n                    })),\n                    aggregates: emptyAggregates,\n                }\n            }\n\n            const points = gw.live.elements.find(el => el.id === item.element)?.stats.total_points || null\n\n            stats[item.element] = {\n                ...stats[item.element],\n                data: [\n                    ...stats[item.element].data,\n                    {\n                        event: bootstrap.events.find(event => event.id === gw.pick.entry_history.event)!,\n                        multiplier: item.multiplier,\n                        points: points !== null ? points * item.multiplier : points,\n                        rawPoints: points,\n                        stats: gw.live.elements.find(el => el.id === item.element)?.stats || null,\n                        position: item.position,\n                    }\n                ],\n            }\n        })\n\n        Object.keys(stats).forEach(player => {\n            const index = Number(player)\n\n            if (stats[index].data.length < gw.pick.entry_history.event) {\n                stats[index] = {\n                    ...stats[index],\n                    data: [\n                        ...stats[index].data,\n                        {\n                            event: bootstrap.events.find(event => event.id === gw.pick.entry_history.event)!,\n                            multiplier: null,\n                            points: null,\n                            rawPoints: null,\n                            stats: null,\n                            position: null,\n                        },\n                    ],\n                }\n            }\n        })\n    })\n\n    Object.keys(stats).forEach(id => {\n        const player = stats[Number(id)]\n\n        stats[Number(id)].aggregates = {\n            totals: {\n                redCards: getPlayerAggregate(player, 'red_cards'),\n                yellowCards: getPlayerAggregate(player, 'yellow_cards'),\n                goals: getPlayerAggregate(player, 'goals_scored'),\n                assists: getPlayerAggregate(player, 'assists'),\n                cleanSheets: getPlayerAggregate(player, 'clean_sheets'),\n                goalsConceded: getPlayerAggregate(player, 'goals_conceded'),\n                ownGoals: getPlayerAggregate(player, 'own_goals'),\n                saves: getPlayerAggregate(player, 'saves'),\n                minutes: getPlayerAggregate(player, 'minutes'),\n                penaltiesMissed: getPlayerAggregate(player, 'penalties_missed'),\n                penaltiesSaved: getPlayerAggregate(player, 'penalties_saved'),\n                timesInDreamteam: getPlayerAggregate(player, 'in_dreamteam'),\n                bps: getPlayerAggregate(player, 'bps'),\n                bonus: getPlayerAggregate(player, 'bonus'),\n                captaincies: getTotalCaptaincies(player),\n                points: getTotalPoints(player),\n                rawPoints: getTotalRawPoints(player),\n                benchPoints: getTotalBenchPoints(player),\n                selections: getTotalSelections(player),\n                starts: getTotalStarts(player),\n                benched: getTotalBenched(player),\n            },\n            streaks: {\n                selection: getSelectionStreak(player),\n                start: getStartStreak(player),\n                bench: getBenchStreak(player),\n                nonBlank: getNonBlankStreak(player),\n            },\n        }\n    })\n\n    const data = Object.values(stats).reduce((acc: Stats, curr) => ({\n        ...acc,\n        [curr.element.element_type]: [\n            ...(acc[curr.element.element_type] || []),\n            curr,\n        ],\n    }), {})\n\n    dispatch(buildDataSuccess({\n        data,\n        chips,\n        tots: getTeamOfTheSeason(data),\n    }))\n    dispatch(finishLoading())\n}\n\nexport default stats.reducer","import { createSlice, ThunkAction, Action } from '@reduxjs/toolkit'\nimport { History } from '../types'\nimport { finishLoading, startLoading } from './loading'\n\nconst history = createSlice({\n    name: 'history',\n    initialState: {\n        data: undefined,\n    },\n    reducers: {\n        fetchHistoryStart(state) {\n            state.data = undefined\n        },\n        fetchHistorySuccess(state, action) {\n            state.data = action.payload\n        },\n    },\n})\n\nexport const { fetchHistoryStart, fetchHistorySuccess } = history.actions\n\nexport const fetchHistory = (entry: number): ThunkAction<void, History, unknown, Action<string>> => async dispatch => {\n    dispatch(fetchHistoryStart())\n    dispatch(startLoading())\n\n    const response = await fetch(`https://jsonp.afeld.me/?url=${encodeURIComponent(`https://fantasy.premierleague.com/api/entry/${entry}/history/`)}`)\n\n    const data = await response.json()\n\n    dispatch(fetchHistorySuccess(data))\n    dispatch(finishLoading())\n}\n\nexport default history.reducer","import React from 'react'\nimport { useSelector } from 'react-redux'\nimport { RootState } from '../../reducers'\nimport { head, last, round, sort, thousandsSeparator } from '../../utilities'\nimport { Widget } from '../Widget'\nimport { useMeanValue, useMeanLabel } from '../../hooks'\n\nconst HistoryWidget: React.FC = () => {\n    const history = useSelector((state: RootState) => state.history.data)\n\n    const meanLabel = useMeanLabel()\n    const meanValue = useMeanValue()\n\n    if (!history) {\n        return (\n            <Widget title=\"Historical Data\" />\n        )\n    }\n\n    const pastSeasonsByRank = sort(history.past, el => el.rank, 'asc')\n    const pastSeasonsByPoints = sort(history.past, el => el.total_points)\n\n    const bestRankedSeason = head(pastSeasonsByRank)\n    const worstRankedSeason = last(pastSeasonsByRank)\n\n    const bestPointSeason = head(pastSeasonsByPoints)\n    const worstPointSeason = last(pastSeasonsByPoints)\n\n    const top1k = pastSeasonsByRank.filter(season => season.rank <= 1000).length\n    const top10k = pastSeasonsByRank.filter(season => season.rank <= 10000).length\n    const top100k = pastSeasonsByRank.filter(season => season.rank <= 100000).length\n    const top1m = pastSeasonsByRank.filter(season => season.rank <= 1000000).length\n\n    return (\n        <Widget title=\"Historical Data\">\n            <ul className=\"widget__list\">\n                {bestRankedSeason && (\n                    <li className=\"widget__list__item\">\n                        <span>Best Season Rank</span>\n                        <span><b>{thousandsSeparator(bestRankedSeason.rank)}</b> ({bestRankedSeason.season_name})</span>\n                    </li>\n                )}\n                {worstRankedSeason && (\n                    <li className=\"widget__list__item\">\n                        <span>Worst Season Rank</span>\n                        <span><b>{thousandsSeparator(worstRankedSeason.rank)}</b> ({worstRankedSeason.season_name})</span>\n                    </li>\n                )}\n                {bestPointSeason && (\n                    <li className=\"widget__list__item\">\n                        <span>Best Points Finish</span>\n                        <span><b>{thousandsSeparator(bestPointSeason.total_points)}</b> ({bestPointSeason.season_name})</span>\n                    </li>\n                )}\n                {worstPointSeason && (\n                    <li className=\"widget__list__item\">\n                        <span>Worst Points Finish</span>\n                        <span><b>{thousandsSeparator(worstPointSeason.total_points)}</b> ({worstPointSeason.season_name})</span>\n                    </li>\n                )}\n                <li className=\"widget__list__item\">\n                    <span>{meanLabel('Rank')}</span>\n                    <b>{thousandsSeparator(Number(round(meanValue(pastSeasonsByRank.map((season) => season.rank)), 0)))}</b>\n                </li>\n                <li className=\"widget__list__item\">\n                    <span>{meanLabel('Points')}</span>\n                    <b>{thousandsSeparator(Number(round(meanValue(pastSeasonsByPoints.map((season) => season.total_points)), 0)))}</b>\n                </li>\n                <li className=\"widget__list__item\">\n                    <span>Top 1K Finishes</span>\n                    <b>{top1k}</b>\n                </li>\n                <li className=\"widget__list__item\">\n                    <span>Top 10K Finishes</span>\n                    <b>{top10k}</b>\n                </li>\n                <li className=\"widget__list__item\">\n                    <span>Top 100K Finishes</span>\n                    <b>{top100k}</b>\n                </li>\n                <li className=\"widget__list__item\">\n                    <span>Top 1M Finishes</span>\n                    <b>{top1m}</b>\n                </li>\n            </ul>\n        </Widget>\n    )\n}\n\nexport default HistoryWidget","import React from 'react'\nimport { useSelector } from 'react-redux'\nimport { RootState } from '../../reducers'\nimport './TotsPlayer.scss'\n\ntype Props = {\n    id: number\n    points: number\n}\n\nconst TotsPlayer: React.FC<Props> = (props: Props) => {\n    const bootstrap = useSelector((state: RootState) => state.bootstrap.data)\n\n    const player = bootstrap?.elements.find(el => el.id === props.id)\n    const team = bootstrap?.teams.find(el => el.id === player?.team)\n    const position = bootstrap?.element_types.find(el => el.id === player?.element_type)\n\n    return (\n        <div className=\"tots-player\">\n            <img\n                src={`https://fantasy.premierleague.com/dist/img/shirts/special/shirt_${team?.code}${position?.singular_name_short === 'GKP' ? '_1' : ''}-66.png`}\n                alt={player?.web_name}\n                className=\"tots-player__shirt\"\n            />\n            <div className=\"tots-player__detail\">\n                <div className=\"tots-player__name\">\n                    <span>{player?.web_name}</span>\n                </div>\n                <div className=\"tots-player__points\">\n                    {props.points}\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default TotsPlayer","import React from 'react'\nimport { useSelector } from 'react-redux'\nimport { RootState } from '../../reducers'\nimport { TotsPlayer } from '../TotsPlayer'\nimport { Widget } from '../Widget'\nimport './TotsWidget.scss'\n\nconst TotsWidget: React.FC = () => {\n    const tots = useSelector((state: RootState) => state.stats.tots)\n\n    if (!tots) {\n        return (\n            <Widget title=\"Team of the Season\" />\n        )\n    }\n\n    return (\n        <Widget title=\"Team of the Season\" cssClasses=\"tots-widget\">\n            <div className=\"tots\">\n                <div className=\"tots__row\">\n                    {tots.xi.filter(el => el.element.element_type === 1).map(player => (\n                        <TotsPlayer\n                            key={player.element.id}\n                            id={player.element.id}\n                            points={player.aggregates.totals.points}\n                        />\n                    ))}\n                </div>\n                <div className=\"tots__row\">\n                    {tots.xi.filter(el => el.element.element_type === 2).map(player => (\n                        <TotsPlayer\n                            key={player.element.id}\n                            id={player.element.id}\n                            points={player.aggregates.totals.points}\n                        />\n                    ))}\n                </div>\n                <div className=\"tots__row\">\n                    {tots.xi.filter(el => el.element.element_type === 3).map(player => (\n                        <TotsPlayer\n                            key={player.element.id}\n                            id={player.element.id}\n                            points={player.aggregates.totals.points}\n                        />\n                    ))}\n                </div>\n                <div className=\"tots__row\">\n                    {tots.xi.filter(el => el.element.element_type === 4).map(player => (\n                        <TotsPlayer\n                            key={player.element.id}\n                            id={player.element.id}\n                            points={player.aggregates.totals.points}\n                        />\n                    ))}\n                </div>\n                <div className=\"tots__row tots__row--bench\">\n                    {tots.bench.map(player => (\n                        <TotsPlayer\n                            key={player.element.id}\n                            id={player.element.id}\n                            points={player.aggregates.totals.points}\n                        />\n                    ))}\n                </div>\n            </div>\n        </Widget>\n    )\n}\n\nexport default TotsWidget","import React from 'react'\nimport './Metric.scss'\n\nconst explanations = {\n    'ppg': 'Points per Game',\n    'ppp': 'Points per Player',\n}\n\ntype Props = {\n    metric: 'ppg' | 'ppp'\n}\n\nconst Metric: React.FC<Props> = (props: Props) => {\n    return (\n        <abbr className=\"metric\" title={explanations[props.metric]}>{props.metric}</abbr>\n    )\n}\n\nexport default Metric","import React from 'react'\nimport { useSelector } from 'react-redux'\nimport { RootState } from '../../reducers'\n\ntype Props = {\n    label?: string\n    event?: number\n    target?: 'transfers'\n}\n\nconst SiteLink: React.FC<Props> = (props: Props) => {\n    const id = useSelector((state: RootState) => state.settings.id)\n\n    const baseUrl = `https://fantasy.premierleague.com/entry/${id}/`\n    let url = baseUrl\n\n    if (props.event) {\n        url = `${url}event/${props.event}/`\n    } else if (props.target) {\n        url = `${url}${props.target}/`\n    }\n\n    return (\n        <a href={url} target=\"_blank\" rel=\"noopener noreferrer\">\n            {props.event ? `GW ${props.event}` : props.label ? props.label : url}\n        </a>\n    )\n}\n\nexport default SiteLink","import React from 'react'\nimport { useSelector } from 'react-redux'\nimport { RootState } from '../../reducers'\nimport { StatData } from '../../types'\nimport { getAllPlayers, getTopStatAggregate, thousandsSeparator, round, sort, head, getPointsLabel } from '../../utilities'\nimport { Metric } from '../Metric'\nimport { Player } from '../Player'\nimport { SiteLink } from '../SiteLink'\nimport { Widget } from '../Widget'\n\nconst renderTopBenchGWReturner = (returner: StatData): JSX.Element | null => {\n    const week = head(returner.data)\n\n    if (!week) {\n        return null\n    }\n\n    return (\n        <li className=\"widget__list__item\">\n            <span>Top GW Bench Returner</span>\n            <span>\n                <Player\n                    id={returner.element.id}\n                    suffix={() => (\n                        <>\n                            {' '}\n                            (\n                                {getPointsLabel(week.rawPoints || 0)},\n                                {' '}\n                                <SiteLink event={week.event.id} />\n                            )\n                        </>\n                    )}\n\n                    reversed\n                />\n            </span>\n        </li>\n    )\n}\n\nconst PlayerStatsWidget: React.FC = () => {\n    const stats = useSelector((state: RootState) => state.stats.data)\n    const history = useSelector((state: RootState) => state.history.data)\n\n    if (!history || !stats) {\n        return (\n            <Widget title=\"Player Stats\" />\n        )\n    }\n\n    const allPlayers = getAllPlayers(stats)\n\n    const reds = getTopStatAggregate(allPlayers, 'redCards')\n    const yellows = getTopStatAggregate(allPlayers, 'yellowCards')\n    const goals = getTopStatAggregate(allPlayers, 'goals')\n    const assists = getTopStatAggregate(allPlayers, 'assists')\n    const cleanSheets = getTopStatAggregate(allPlayers, 'cleanSheets')\n    const goalsConceded = getTopStatAggregate(allPlayers, 'goalsConceded')\n    const ownGoals = getTopStatAggregate(allPlayers, 'ownGoals')\n    const saves = getTopStatAggregate(allPlayers, 'saves')\n    const minutes = getTopStatAggregate(allPlayers, 'minutes')\n    const penaltiesMissed = getTopStatAggregate(allPlayers, 'penaltiesMissed')\n    const penaltiesSaved = getTopStatAggregate(allPlayers, 'penaltiesSaved')\n    const inDreamteam = getTopStatAggregate(allPlayers, 'timesInDreamteam')\n    const bps = getTopStatAggregate(allPlayers, 'bps')\n    const bonus = getTopStatAggregate(allPlayers, 'bonus')\n\n    const mostCaptaincies = head(sort(allPlayers, el => el.aggregates.totals.captaincies))\n\n    const topReturner = head(sort(\n        allPlayers\n            .map(player => ({\n                ...player,\n                data: sort([ ...player.data ], el => el.points || 0),\n            })),\n        el => head(el.data)?.points || 0\n    ))\n\n    const topBenchGWReturner = head(sort(\n        allPlayers\n            .map(player => ({\n                ...player,\n                data: sort(player.data.filter(data => data.multiplier === 0), el => el.rawPoints || 0),\n            }))\n            .filter(player => player.data.length),\n        el => head(el.data)?.rawPoints || 0\n    ))\n\n    const topSeasonReturner = head(sort(allPlayers, el => el.aggregates.totals.points))\n    const topBenchReturner = head(sort(allPlayers, el => el.aggregates.totals.benchPoints))\n\n    const weeks = history.current.length\n\n    const idealCaptain = head(sort(\n        Object.entries(Array.from(Array(weeks).keys())\n            .map((el, index) => head(sort(allPlayers, el => el.data[index].rawPoints || 0)))\n            .reduce((acc, curr) => curr ? ({\n                ...acc,\n                [curr.element.id]: (acc[curr.element.id] ? acc[curr.element.id] : 0) + 1,\n            }) : acc, {} as Record<number, number>)),\n        el => el[1]\n    ))\n\n    return (\n        <Widget title=\"Player Stats\">\n            <ul className=\"widget__list\">\n                {topReturner && (\n                    <li className=\"widget__list__item\">\n                        <span>Top GW Returner</span>\n                        <span>\n                            <Player\n                                id={topReturner.element.id}\n                                suffix={() => {\n                                    const week = head(topReturner.data)\n\n                                    if (!week) {\n                                        return null\n                                    }\n\n                                    return (\n                                        <>\n                                            {' '}\n                                            (\n                                                {getPointsLabel(week.points || 0)},\n                                                {' '}\n                                                <SiteLink event={week.event.id} />\n                                            )\n                                        </>\n                                    )\n                                }}\n\n                                reversed\n                            />\n                        </span>\n                    </li>\n                )}\n                {topSeasonReturner && (\n                    <li className=\"widget__list__item\">\n                        <span>Top Season Returner</span>\n                        {topSeasonReturner.aggregates.totals.starts > 0 && (\n                            <Player\n                                id={topSeasonReturner.element.id}\n                                suffix={() => (\n                                    <>\n                                        {' '}\n                                        (\n                                            {getPointsLabel(topSeasonReturner.aggregates.totals.points)},\n                                            {' '}\n                                            {round(topSeasonReturner.aggregates.totals.points / topSeasonReturner.aggregates.totals.starts)}\n                                            {' '}\n                                            <Metric metric=\"ppg\" />\n                                        )\n                                    </>\n                                )}\n\n                                reversed\n                            />\n                        )}\n                    </li>\n                )}\n                {topBenchGWReturner && renderTopBenchGWReturner(topBenchGWReturner)}\n                {topBenchReturner && (\n                    <li className=\"widget__list__item\">\n                        <span>Most Points While Benched</span>\n                        {topBenchReturner.aggregates.totals.benched > 0 && (\n                            <Player\n                                id={topBenchReturner.element.id}\n                                suffix={() => (\n                                    <>\n                                        {' '}\n                                        (\n                                            {getPointsLabel(topBenchReturner.aggregates.totals.benchPoints)},\n                                            {' '}\n                                            {round(topBenchReturner.aggregates.totals.benchPoints / topBenchReturner.aggregates.totals.benched)}\n                                            {' '}\n                                            <Metric metric=\"ppg\" />\n                                        )\n                                    </>\n                                )}\n\n                                reversed\n                            />\n                        )}\n                    </li>\n                )}\n                {goals && goals.aggregates.totals.goals > 0 && (\n                    <li className=\"widget__list__item\">\n                        <span>Top Scorer</span>\n                        <Player id={goals.element.id} suffix={`${goals.aggregates.totals.goals}`} reversed />\n                    </li>\n                )}\n                {assists && assists.aggregates.totals.assists > 0 && (\n                    <li className=\"widget__list__item\">\n                        <span>Most Assists</span>\n                        <Player id={assists.element.id} suffix={`${assists.aggregates.totals.assists}`} reversed />\n                    </li>\n                )}\n                {ownGoals && ownGoals.aggregates.totals.ownGoals > 0 && (\n                    <li className=\"widget__list__item\">\n                        <span>Most Own Goals</span>\n                        <Player id={ownGoals.element.id} suffix={`${ownGoals.aggregates.totals.ownGoals}`} reversed />\n                    </li>\n                )}\n                {goalsConceded && goalsConceded.aggregates.totals.goalsConceded > 0 && (\n                    <li className=\"widget__list__item\">\n                        <span>Most Goals Conceded</span>\n                        <Player id={goalsConceded.element.id} suffix={`${goalsConceded.aggregates.totals.goalsConceded}`} reversed />\n                    </li>\n                )}\n                {cleanSheets && cleanSheets.aggregates.totals.cleanSheets > 0 && (\n                    <li className=\"widget__list__item\">\n                        <span>Most Clean Sheets</span>\n                        <Player id={cleanSheets.element.id} suffix={`${cleanSheets.aggregates.totals.cleanSheets}`} reversed />\n                    </li>\n                )}\n                {saves && saves.aggregates.totals.saves > 0 && (\n                    <li className=\"widget__list__item\">\n                        <span>Most Saves</span>\n                        <Player id={saves.element.id} suffix={`${saves.aggregates.totals.saves}`} reversed />\n                    </li>\n                )}\n                {penaltiesMissed && penaltiesMissed.aggregates.totals.penaltiesMissed > 0 && (\n                    <li className=\"widget__list__item\">\n                        <span>Most Penalties Missed</span>\n                        <Player id={penaltiesMissed.element.id} suffix={`${penaltiesMissed.aggregates.totals.penaltiesMissed}`} reversed />\n                    </li>\n                )}\n                {penaltiesSaved && penaltiesSaved.aggregates.totals.penaltiesSaved > 0 && (\n                    <li className=\"widget__list__item\">\n                        <span>Most Penalties Saved</span>\n                        <Player id={penaltiesSaved.element.id} suffix={`${penaltiesSaved.aggregates.totals.penaltiesSaved}`} reversed />\n                    </li>\n                )}\n                {minutes && minutes.aggregates.totals.minutes > 0 && (\n                    <li className=\"widget__list__item\">\n                        <span>Most Minutes</span>\n                        <Player id={minutes.element.id} suffix={`${thousandsSeparator(minutes.aggregates.totals.minutes as number)}`} reversed />\n                    </li>\n                )}\n                {reds && reds.aggregates.totals.redCards > 0 && (\n                    <li className=\"widget__list__item\">\n                        <span>Most Red Cards</span>\n                        <Player id={reds.element.id} suffix={`${reds.aggregates.totals.redCards}`} reversed />\n                    </li>\n                )}\n                {yellows && yellows.aggregates.totals.yellowCards > 0 && (\n                    <li className=\"widget__list__item\">\n                        <span>Most Yellow Cards</span>\n                        <Player id={yellows.element.id} suffix={`${yellows.aggregates.totals.yellowCards}`} reversed />\n                    </li>\n                )}\n                {bonus && bonus.aggregates.totals.bonus > 0 && (\n                    <li className=\"widget__list__item\">\n                        <span>Most Bonus Points</span>\n                        <Player id={bonus.element.id} suffix={`${bonus.aggregates.totals.bonus}`} reversed />\n                    </li>\n                )}\n                {bps && bps.aggregates.totals.bps > 0 && (\n                    <li className=\"widget__list__item\">\n                        <span>Highest Total BPS</span>\n                        <Player id={bps.element.id} suffix={`${thousandsSeparator(bps.aggregates.totals.bps)}`} reversed />\n                    </li>\n                )}\n                {inDreamteam && inDreamteam.aggregates.totals.timesInDreamteam > 0 && (\n                    <li className=\"widget__list__item\">\n                        <span>Most Times in Dreamteam</span>\n                        <Player id={inDreamteam.element.id} suffix={`${inDreamteam.aggregates.totals.timesInDreamteam}`} reversed />\n                    </li>\n                )}\n                {mostCaptaincies && mostCaptaincies.aggregates.totals.captaincies > 0 && (\n                    <li className=\"widget__list__item\">\n                        <span>Most Captaincies</span>\n                        <Player id={mostCaptaincies.element.id} suffix={`${mostCaptaincies.aggregates.totals.captaincies}`} reversed />\n                    </li>\n                )}\n                {idealCaptain && (\n                    <li className=\"widget__list__item\">\n                        <span>Ideal Captain</span>\n                        <Player id={Number(idealCaptain[0])} suffix={`${idealCaptain[1]}`} reversed />\n                    </li>\n                )}\n            </ul>\n        </Widget>\n    )\n}\n\nexport default PlayerStatsWidget","import React from 'react'\nimport { useSelector } from 'react-redux'\nimport { RootState } from '../../reducers'\nimport { Widget } from '../Widget'\nimport { thousandsSeparator, sumNumbers, round, sort, getPointsLabel } from '../../utilities'\nimport { Metric } from '../Metric'\n\ntype FormationInformation = {\n    count: number\n    points: number\n}\n\nconst formatFormation = (formation: string) => sumNumbers(formation.split('-').map(position => Number(position))) > 10 ? 'Bench Boost' : formation\n\nconst FormationWidget: React.FC = () => {\n    const stats = useSelector((state: RootState) => state.stats.data)\n\n    const history = useSelector((state: RootState) => state.history.data)\n\n    if (!stats || !history) {\n        return (\n            <Widget title=\"Formations\" />\n        )\n    }\n\n    const weeks = history.current.length\n\n    const formations = Object\n        .values(stats)\n        .map(position => {\n            const selections = position.map(player => player.data.map(data => data.multiplier))\n\n            return Array.from(Array(weeks).keys()).map((el, index) => selections\n                .map(player => (player[index] || 0) > 0)\n                .filter(val => !!val)\n                .length\n            )\n        })\n        .slice(1)\n\n    const data = Array\n        .from(Array(weeks).keys())\n        .map((el, index) => formations\n            .map(entries => entries[index])\n            .join('-')\n        )\n        .reduce((acc, formation, index) => ({\n            ...acc,\n            [formation]: {\n                count: (acc[formation] ? acc[formation].count : 0) + 1,\n                points: (acc[formation] ? acc[formation].points : 0) + history.current[index].points,\n            }\n        }), {} as Record<string, FormationInformation>)\n\n    return (\n        <Widget title=\"Formations\">\n            <ul className=\"widget__list\">\n                {sort(Object.entries(data), el => el[1].count).map(([ formation, information ]) => {\n                    return (\n                        <li className=\"widget__list__item\" key={formation}>\n                            <span>{formatFormation(formation)}</span>\n                            <div>\n                                <div>\n                                    <b>{information.count}</b>\n                                </div>\n                                <div className=\"muted\">\n                                    {getPointsLabel(thousandsSeparator(information.points))}, {round(information.points / information.count)} <Metric metric=\"ppg\" />\n                                </div>\n                            </div>\n                        </li>\n                    )\n                })}\n            </ul>\n        </Widget>\n    )\n}\n\nexport default FormationWidget","import React from 'react'\nimport { useSelector } from 'react-redux'\nimport { RootState } from '../../reducers'\nimport { thousandsSeparator, sumNumbers, round, sort, getPointsLabel } from '../../utilities'\nimport { Player } from '../Player'\nimport { Widget } from '../Widget'\nimport { Metric } from '../Metric';\n\nconst CaptainWidget: React.FC = () => {\n    const stats = useSelector((state: RootState) => state.stats.data)\n\n    if (!stats) {\n        return (\n            <Widget title=\"Captains\" />\n        )\n    }\n\n    const captains = sort(\n        Object\n            .values(stats)\n            .map(position => {\n                return position\n                    .map(player => ({\n                        player,\n                        data: player.data.filter(data => (data.multiplier || 0) > 1),\n                    }))\n                    .filter(player => player.data.length > 0)\n            })\n            .reduce((acc, curr) => acc.concat(curr), []),\n        el => el.data.length\n    )\n\n    return (\n        <Widget title=\"Captains\">\n            <ul className=\"widget__list\">\n                {captains.map(captain => {\n                    const sum = sumNumbers(captain.data.map(data => data.points || 0))\n\n                    return (\n                        <li className=\"widget__list__item\" key={captain.player.element.id}>\n                            <Player id={captain.player.element.id} />\n                            <div>\n                                <div>\n                                    <b>{captain.data.length}</b>\n                                </div>\n                                <div className=\"muted\">\n                                    {getPointsLabel(thousandsSeparator(sum))}, {round(sum / captain.data.length)} <Metric metric=\"ppg\" />\n                                </div>\n                            </div>\n                        </li>\n                    )\n                })}\n            </ul>\n        </Widget>\n    )\n}\n\nexport default CaptainWidget","import React from 'react'\nimport { useSelector } from 'react-redux'\nimport { useMeanLabel, useMeanValue } from '../../hooks'\nimport { RootState } from '../../reducers'\nimport { Widget } from '../Widget'\nimport { head, last, round, sort, thousandsSeparator, getPointsLabel } from '../../utilities'\nimport { SiteLink } from '../SiteLink'\n\nconst GameweekWidget: React.FC = () => {\n    const history = useSelector((state: RootState) => state.history.data)\n    const bootstrap = useSelector((state: RootState) => state.bootstrap.data)\n\n    const meanLabel = useMeanLabel()\n    const meanValue = useMeanValue()\n\n    if (!history || !bootstrap) {\n        return (\n            <Widget title=\"Gameweeks\" />\n        )\n    }\n\n    const differences = history.current.map((week, index) => week.points - bootstrap.events[index].average_entry_score)\n    const sortedRanks = sort(history.current, el => el.rank, 'asc')\n\n    const gws = sort(history.current, el => el.points)\n\n    const bestGW = head(gws)\n    const worstGW = last(gws)\n\n    const bestGWRank = head(sortedRanks)\n    const worstGWRank = last(sortedRanks)\n\n    return (\n        <Widget title=\"Gameweeks\">\n            <ul className=\"widget__list\">\n                <li className=\"widget__list__item\">\n                    <span>{meanLabel('Difference to GW Average')}</span>\n                    <b>{getPointsLabel(round(meanValue(differences)))}</b>\n                </li>\n                <li className=\"widget__list__item\">\n                    <span>Times Above GW Average</span>\n                    <b>{differences.filter(diff => diff >= 0).length}</b>\n                </li>\n                <li className=\"widget__list__item\">\n                    <span>Times Below GW Average</span>\n                    <b>{differences.filter(diff => diff < 0).length}</b>\n                </li>\n                <li className=\"widget__list__item\">\n                    <span>{meanLabel('GW Rank')}</span>\n                    <b>{thousandsSeparator(Number(round(meanValue(history.current.map(week => week.rank)))))}</b>\n                </li>\n                {bestGW && (\n                    <li className=\"widget__list__item\">\n                        <span>Best Gameweek</span>\n                        <span>\n                            <b>{getPointsLabel(bestGW.points)}</b>\n                            {' '}\n                            (\n                                <SiteLink event={bestGW.event} />\n                            )\n                        </span>\n                    </li>\n                )}\n                {worstGW && (\n                    <li className=\"widget__list__item\">\n                        <span>Worst Gameweek</span>\n                        <span>\n                            <b>{getPointsLabel(worstGW.points)}</b>\n                            {' '}\n                            (\n                                <SiteLink event={worstGW.event} />\n                            )\n                        </span>\n                    </li>\n                )}\n                {bestGWRank && (\n                    <li className=\"widget__list__item\">\n                        <span>Best GW Rank</span>\n                        <span>\n                            <b>{thousandsSeparator(bestGWRank.rank)}</b>\n                            {' '}\n                            (\n                                <SiteLink event={bestGWRank.event} />\n                            )\n                        </span>\n                    </li>\n                )}\n                {worstGWRank && (\n                    <li className=\"widget__list__item\">\n                        <span>Worst GW Rank</span>\n                        <span>\n                            <b>{thousandsSeparator(worstGWRank.rank)}</b>\n                            {' '}\n                            (\n                                <SiteLink event={worstGWRank.event} />\n                            )\n                        </span>\n                    </li>\n                )}\n            </ul>\n        </Widget>\n    )\n}\n\nexport default GameweekWidget","import React from 'react'\nimport { useSelector } from 'react-redux'\nimport { useMeanValue } from '../../hooks'\nimport { RootState } from '../../reducers'\nimport { thousandsSeparator, sumNumbers, round, reduce, getPointsLabel } from '../../utilities'\nimport { Widget } from '../Widget'\nimport { Metric } from '../Metric';\n\nconst PositionsWidget: React.FC = () => {\n    const stats = useSelector((state: RootState) => state.stats.data)\n    const bootstrap = useSelector((state: RootState) => state.bootstrap.data)\n\n    const meanValue = useMeanValue()\n\n    if (!stats || !bootstrap) {\n        return (\n            <Widget title=\"Positions\" />\n        )\n    }\n\n    const positions: Record<string, number> = Object.entries(stats)\n        .reduce((acc, [ elementType, elements ]) => ({\n            ...acc,\n            [elementType]: elements.length,\n        }), {})\n\n    return (\n        <Widget title=\"Positions\">\n            <ul className=\"widget__list\">\n                <li className=\"widget__list__item\">\n                    <span>Total</span>\n                    <span>{reduce(Object.values(positions), el => el)}</span>\n                </li>\n                {Object.entries(positions).map(([ elementType, elements ]) => {\n                    const totalPoints = stats[Number(elementType)].map(player => player.aggregates.totals.points)\n\n                    return (\n                        <li className=\"widget__list__item\" key={elementType}>\n                            <span>{bootstrap.element_types.find(el => el.id === Number(elementType))?.plural_name}</span>\n                            <div>\n                                <div>\n                                    <b>{elements}</b>\n                                </div>\n                                <div className=\"muted\">\n                                  {getPointsLabel(thousandsSeparator(sumNumbers(totalPoints)))}, {round(meanValue(totalPoints))} <Metric metric=\"ppp\" />\n                                </div>\n                            </div>\n                        </li>\n                    )\n                })}\n            </ul>\n        </Widget>\n    )\n}\n\nexport default PositionsWidget","import { createSlice, ThunkAction, Action } from '@reduxjs/toolkit'\nimport { History } from '../types'\nimport { finishLoading, startLoading } from './loading'\n\nconst entry = createSlice({\n    name: 'entry',\n    initialState: {\n        data: undefined,\n    },\n    reducers: {\n        fetchEntryStart(state) {\n            state.data = undefined\n        },\n        fetchEntrySuccess(state, action) {\n            state.data = action.payload\n        },\n    },\n})\n\nexport const { fetchEntryStart, fetchEntrySuccess } = entry.actions\n\nexport const fetchEntry = (id: number): ThunkAction<void, History, unknown, Action<string>> => async dispatch => {\n    dispatch(fetchEntryStart())\n    dispatch(startLoading())\n\n    const response = await fetch(`https://jsonp.afeld.me/?url=${encodeURIComponent(`https://fantasy.premierleague.com/api/entry/${id}/`)}`)\n\n    const data = await response.json()\n\n    dispatch(fetchEntrySuccess(data))\n    dispatch(finishLoading())\n}\n\nexport default entry.reducer","import React from 'react'\nimport { useSelector } from 'react-redux'\nimport { RootState } from '../../reducers'\nimport { Widget } from '../Widget'\nimport { getAllPlayers, head, thousandsSeparator, sumNumbers, reduce, round, getPointsLabel } from '../../utilities'\nimport { SiteLink } from '../SiteLink'\nimport { StatData } from '../../types'\nimport { StatAggregateTotals } from '../../types'\n\nconst getAggregateValues = (players: StatData[], key: keyof StatAggregateTotals): number => sumNumbers(players.map(player => player.aggregates.totals[key]))\n\nconst SeasonWidget: React.FC = () => {\n    const stats = useSelector((state: RootState) => state.stats.data)\n    const chips = useSelector((state: RootState) => state.stats.chips)\n\n    const history = useSelector((state: RootState) => state.history.data)\n\n    const entry = useSelector((state: RootState) => state.entry.data)\n\n    if (!stats || !history || !chips || !entry) {\n        return (\n            <Widget title=\"Season\" />\n        )\n    }\n\n    const allPlayers = getAllPlayers(stats)\n\n    const reds = getAggregateValues(allPlayers, 'redCards')\n    const yellows = getAggregateValues(allPlayers, 'yellowCards')\n    const goals = getAggregateValues(allPlayers, 'goals')\n    const assists = getAggregateValues(allPlayers, 'assists')\n    const cleanSheets = getAggregateValues(allPlayers, 'cleanSheets')\n    const goalsConceded = getAggregateValues(allPlayers, 'goalsConceded')\n    const ownGoals = getAggregateValues(allPlayers, 'ownGoals')\n    const saves = getAggregateValues(allPlayers, 'saves')\n    const minutes = getAggregateValues(allPlayers, 'minutes')\n    const penaltiesMissed = getAggregateValues(allPlayers, 'penaltiesMissed')\n    const penaltiesSaved = getAggregateValues(allPlayers, 'penaltiesSaved')\n    const inDreamteam = getAggregateValues(allPlayers, 'timesInDreamteam')\n    const bps = getAggregateValues(allPlayers, 'bps')\n    const bonus = getAggregateValues(allPlayers, 'bonus')\n\n    const totalTransfers = reduce(history.current, el => el.event_transfers)\n    const totalHits = reduce(history.current, el => el.event_transfers_cost / 4)\n    const totalBenched = reduce(history.current, el => el.points_on_bench)\n\n    const tc = allPlayers\n        .find(player => player.data.findIndex(data => data.multiplier === 3) !== -1)\n        ?.data\n        .find(data => data.multiplier === 3)\n\n    const bbWeek = head(Object.entries(chips).find(([ gw, chip ]) => chip === 'bboost') || [])\n\n    const bbPoints = bbWeek\n        ? sumNumbers(allPlayers\n            .filter(player => (player.data[Number(bbWeek) - 1].position || 0) > 11)\n            .map(player => player.data[Number(bbWeek) - 1].points || 0))\n        : null\n\n    const doubleDigitHauls = reduce(allPlayers.map(player => player.data.filter(data => (data.rawPoints || 0) > 9).length), el => el)\n    const totalPlays = reduce(allPlayers.map(player => player.data.filter(data => data.multiplier !== null).length), el => el)\n\n    return (\n        <Widget title=\"Season\">\n            <ul className=\"widget__list\">\n                <li className=\"widget__list__item\">\n                    <span>Total Transfers Made</span>\n                    <span>\n                        <SiteLink target=\"transfers\" label={`${totalTransfers}`} />\n                    </span>\n                </li>\n                <li className=\"widget__list__item\">\n                    <span>Total Hits Taken</span>\n                    <span><b>{totalHits}</b> ({getPointsLabel(totalHits * -4)}, {entry.summary_overall_points > 0 ? round(totalHits * 4 / entry.summary_overall_points * 100) : 0}%)</span>\n                </li>\n                <li className=\"widget__list__item\">\n                    <span>Total Points</span>\n                    <b>{getPointsLabel(thousandsSeparator(entry.summary_overall_points))}</b>\n                </li>\n                <li className=\"widget__list__item\">\n                    <span>Total Points on Bench</span>\n                    <b>{getPointsLabel(thousandsSeparator(totalBenched))}</b>\n                </li>\n                <li className=\"widget__list__item\">\n                    <span>Double Digit Hauls</span>\n                    <span><b>{doubleDigitHauls}</b>{totalPlays > 0 && ` (${round(doubleDigitHauls / totalPlays)}%)`}</span>\n                </li>\n                {tc !== undefined && (\n                    <li className=\"widget__list__item\">\n                        <span>Triple Captain Points Gained</span>\n                        <span>\n                            <b>{getPointsLabel((tc.points || 0) / 3)}</b>\n                            {' '}\n                            (\n                                <SiteLink event={tc.event.id} />\n                            )\n                        </span>\n                    </li>\n                )}\n                {bbPoints !== null && (\n                    <li className=\"widget__list__item\">\n                        <span>Bench Boost Points Gained</span>\n                        <span>\n                            <b>{getPointsLabel(bbPoints)}</b>\n                            {' '}\n                            (\n                                <SiteLink event={Number(bbWeek)} />\n                            )\n                        </span>\n                    </li>\n                )}\n                <li className=\"widget__list__item\">\n                    <span>Total Goals Scored</span>\n                    <b>{goals}</b>\n                </li>\n                <li className=\"widget__list__item\">\n                    <span>Total Assists</span>\n                    <b>{assists}</b>\n                </li>\n                <li className=\"widget__list__item\">\n                    <span>Total Own Goals</span>\n                    <b>{ownGoals}</b>\n                </li>\n                <li className=\"widget__list__item\">\n                    <span>Total Goals Conceded</span>\n                    <b>{goalsConceded}</b>\n                </li>\n                <li className=\"widget__list__item\">\n                    <span>Total Clean Sheets</span>\n                    <b>{cleanSheets}</b>\n                </li>\n                <li className=\"widget__list__item\">\n                    <span>Total Saves</span>\n                    <b>{saves}</b>\n                </li>\n                <li className=\"widget__list__item\">\n                    <span>Total Penalties Missed</span>\n                    <b>{penaltiesMissed}</b>\n                </li>\n                <li className=\"widget__list__item\">\n                    <span>Total Penalties Saved</span>\n                    <b>{penaltiesSaved}</b>\n                </li>\n                <li className=\"widget__list__item\">\n                    <span>Total Minutes Played</span>\n                    <b>{thousandsSeparator(minutes)}</b>\n                </li>\n                <li className=\"widget__list__item\">\n                    <span>Total Red Cards</span>\n                    <b>{reds}</b>\n                </li>\n                <li className=\"widget__list__item\">\n                    <span>Total Yellow Cards</span>\n                    <b>{yellows}</b>\n                </li>\n                <li className=\"widget__list__item\">\n                    <span>Total Bonus Points</span>\n                    <b>{thousandsSeparator(bonus)}</b>\n                </li>\n                <li className=\"widget__list__item\">\n                    <span>Total BPS</span>\n                    <b>{thousandsSeparator(bps)}</b>\n                </li>\n                <li className=\"widget__list__item\">\n                    <span>Total Times in Dreamteam</span>\n                    <b>{inDreamteam}</b>\n                </li>\n            </ul>\n        </Widget>\n    )\n}\n\nexport default SeasonWidget","import React from 'react'\nimport { Team as TeamType } from '../../types'\nimport './Team.scss'\n\ntype Props = {\n    team: TeamType\n}\n\nconst Team: React.FC<Props> = (props: Props) => (\n    <div className=\"team\">\n        <img\n            src={`https://fantasy.premierleague.com/dist/img/shirts/special/shirt_${props.team.code}-66.png`}\n            alt={props.team.short_name}\n            className=\"player__shirt\"\n        />\n        <span className=\"team__name\">{props.team.name}</span>\n    </div>\n)\n\nexport default Team","import React from 'react'\nimport { useSelector } from 'react-redux'\nimport { RootState } from '../../reducers'\nimport { Team } from '../Team'\nimport { Widget } from '../Widget'\nimport { getAllPlayers, getPointsLabel, round, sort, sumNumbers } from '../../utilities'\nimport { Metric } from '../Metric'\nimport './TeamsWidget.scss'\n\nconst TeamsWidget: React.FC = () => {\n    const stats = useSelector((state: RootState) => state.stats.data)\n    const bootstrap = useSelector((state: RootState) => state.bootstrap.data)\n\n    if (!stats || !bootstrap) {\n        return (\n            <Widget title=\"Teams\" />\n        )\n    }\n\n    const counts = Object.values(stats)\n        .reduce((acc: number[], curr) => [ ...acc, ...curr.map(el => el.element.team) ], [])\n        .reduce((acc: { [key: number]: number }, curr) => ({ ...acc, [curr]: (acc[Number(curr)] || 0) + 1 }), {})\n\n    const teams = sort(bootstrap.teams, el => counts[el.id] || 0)\n\n    const allPlayers = getAllPlayers(stats)\n\n    return (\n        <Widget title=\"Teams\" cssClasses=\"teams-widget\">\n            <ul className=\"widget__list\">\n                {teams.map(team => {\n                    const players = allPlayers.filter(player => player.element.team === team.id)\n                    const points = sumNumbers(players.map(player => player.aggregates.totals.points))\n\n                    return (\n                        <li className=\"teams-widget__item\" key={team.id}>\n                            <div className=\"teams-widget__header\">\n                                <Team team={team} />\n                                <div>\n                                    <div>\n                                        <b>{counts[team.id] || 0}</b>\n                                    </div>\n                                    <div className=\"muted\">\n                                        {getPointsLabel(points)}, {players.length > 0 ? round(points / players.length) : 0} <Metric metric=\"ppp\" />\n                                    </div>\n                                </div>\n                            </div>\n                            <div>\n                                {Object.entries(stats).map(([ position, players ]) => {\n                                    const positionPlayers = players.filter(player => player.element.team === team.id)\n\n                                    if (!positionPlayers.length) {\n                                        return null\n                                    }\n\n                                    return (\n                                        <div className=\"teams-widget__position\" data-position={bootstrap.element_types.find(el => el.id === Number(position))?.plural_name_short}>\n                                            {sort(positionPlayers.filter(player => player.element.team === team.id), el => el.aggregates.totals.points)\n                                                .map(player => (\n                                                    <div>{player.element.web_name} ({getPointsLabel(player.aggregates.totals.points)})</div>\n                                                ))\n                                            }\n                                        </div>\n                                    )\n                                })}\n                            </div>\n                        </li>\n                    )\n                })}\n            </ul>\n        </Widget>\n    )\n}\n\nexport default TeamsWidget","import React from 'react'\nimport { useSelector } from 'react-redux'\nimport { RootState } from '../../reducers'\nimport { getAllPlayers, getGWCountLabel, round, getPointsLabel } from '../../utilities'\nimport { Metric } from '../Metric'\nimport { Player } from '../Player'\nimport { SiteLink } from '../SiteLink'\nimport { Widget } from '../Widget'\n\nconst MAX_ITEMS = 10\n\nconst NonBlankStreakWidget: React.FC = () => {\n    const stats = useSelector((state: RootState) => state.stats.data)\n\n    if (!stats) {\n        return (\n            <Widget title=\"Highest Non-Blank Streaks\" />\n        )\n    }\n\n    const streakers = getAllPlayers(stats)\n        .sort((a, b) => {\n            const aStreak = a.aggregates.streaks.nonBlank\n            const bStreak = b.aggregates.streaks.nonBlank\n\n            const aStreakLength = a.aggregates.streaks.nonBlank?.length || 0\n            const bStreakLength = b.aggregates.streaks.nonBlank?.length || 0\n\n            if (bStreakLength - aStreakLength === 0) {\n                return (bStreak?.points || 0) - (aStreak?.points || 0)\n            }\n\n            return bStreakLength - aStreakLength\n        })\n        .filter(streaker => streaker.aggregates.streaks.nonBlank !== null)\n        .slice(0, MAX_ITEMS)\n\n    return (\n        <Widget title=\"Highest Non-Blank Streaks\">\n            <ul className=\"widget__list\">\n                {streakers.map(streaker => {\n                    const streak = streaker.aggregates.streaks.nonBlank\n\n                    if (!streak) {\n                        return null\n                    }\n\n                    return (\n                        <li className=\"widget__list__item\" key={streaker.element.id}>\n                            <Player id={streaker.element.id} />\n                            <div>\n                                <div>\n                                    <SiteLink event={streak.start.id} />\n                                    {' – '}\n                                    <SiteLink event={streak.end.id} />\n                                </div>\n                                <div className=\"muted\">\n                                    {getGWCountLabel(streak.length)}, {getPointsLabel(streak.points || 0)}, {round((streak.points || 0) / streak.length)} <Metric metric=\"ppg\" />\n                                </div>\n                            </div>\n                        </li>\n                    )\n                })}\n            </ul>\n        </Widget>\n    )\n}\n\nexport default NonBlankStreakWidget","import React from 'react'\nimport { useSelector } from 'react-redux'\nimport { RootState } from '../../reducers'\nimport { getAllPlayers, getGWCountLabel, getPointsLabel, round } from '../../utilities'\nimport { Metric } from '../Metric'\nimport { Player } from '../Player'\nimport { SiteLink } from '../SiteLink'\nimport { Widget } from '../Widget'\n\nconst MAX_ITEMS = 10\n\nconst SelectionStreakWidget: React.FC = () => {\n    const stats = useSelector((state: RootState) => state.stats.data)\n\n    if (!stats) {\n        return (\n            <Widget title=\"Highest Selection Streaks\" />\n        )\n    }\n\n    const streakers = getAllPlayers(stats)\n        .sort((a, b) => {\n            const aStreak = a.aggregates.streaks.selection\n            const bStreak = b.aggregates.streaks.selection\n\n            const aStreakLength = a.aggregates.streaks.selection?.length || 0\n            const bStreakLength = b.aggregates.streaks.selection?.length || 0\n\n            if (bStreakLength - aStreakLength === 0) {\n                return (bStreak?.points || 0) - (aStreak?.points || 0)\n            }\n\n            return bStreakLength - aStreakLength\n        })\n        .filter(streaker => streaker.aggregates.streaks.selection !== null)\n        .slice(0, MAX_ITEMS)\n\n    return (\n        <Widget title=\"Highest Selection Streaks\">\n            <ul className=\"widget__list\">\n                {streakers.map(streaker => {\n                    const streak = streaker.aggregates.streaks.selection\n\n                    if (!streak) {\n                        return null\n                    }\n\n                    return (\n                        <li className=\"widget__list__item\" key={streaker.element.id}>\n                            <Player id={streaker.element.id} />\n                            <div>\n                                <div>\n                                    <SiteLink event={streak.start.id} />\n                                    {' – '}\n                                    <SiteLink event={streak.end.id} />\n                                </div>\n                                <div className=\"muted\">\n                                    {getGWCountLabel(streak.length)}, {getPointsLabel(streak.points || 0)}, {round((streak.points || 0) / streak.length)} <Metric metric=\"ppg\" />\n                                </div>\n                            </div>\n                        </li>\n                    )\n                })}\n            </ul>\n        </Widget>\n    )\n}\n\nexport default SelectionStreakWidget","import React from 'react'\nimport { useSelector } from 'react-redux'\nimport { RootState } from '../../reducers'\nimport { getAllPlayers, getGWCountLabel, getPointsLabel, round } from '../../utilities'\nimport { Metric } from '../Metric'\nimport { Player } from '../Player'\nimport { SiteLink } from '../SiteLink'\nimport { Widget } from '../Widget'\n\nconst MAX_ITEMS = 10\n\nconst StartStreakWidget: React.FC = () => {\n    const stats = useSelector((state: RootState) => state.stats.data)\n\n    if (!stats) {\n        return (\n            <Widget title=\"Highest Start Streaks\" />\n        )\n    }\n\n    const streakers = getAllPlayers(stats)\n        .sort((a, b) => {\n            const aStreak = a.aggregates.streaks.start\n            const bStreak = b.aggregates.streaks.start\n\n            const aStreakLength = a.aggregates.streaks.start?.length || 0\n            const bStreakLength = b.aggregates.streaks.start?.length || 0\n\n            if (bStreakLength - aStreakLength === 0) {\n                return (bStreak?.points || 0) - (aStreak?.points || 0)\n            }\n\n            return bStreakLength - aStreakLength\n        })\n        .filter(streaker => streaker.aggregates.streaks.start !== null)\n        .slice(0, MAX_ITEMS)\n\n    return (\n        <Widget title=\"Highest Start Streaks\">\n            <ul className=\"widget__list\">\n                {streakers.map(streaker => {\n                    const streak = streaker.aggregates.streaks.start\n\n                    if (!streak) {\n                        return null\n                    }\n\n                    return (\n                        <li className=\"widget__list__item\" key={streaker.element.id}>\n                            <Player id={streaker.element.id} />\n                            <div>\n                                <div>\n                                    <SiteLink event={streak.start.id} />\n                                    {' – '}\n                                    <SiteLink event={streak.end.id} />\n                                </div>\n                                <div className=\"muted\">\n                                    {getGWCountLabel(streak.length)}, {getPointsLabel(streak.points || 0)}, {round((streak.points || 0) / streak.length)} <Metric metric=\"ppg\" />\n                                </div>\n                            </div>\n                        </li>\n                    )\n                })}\n            </ul>\n        </Widget>\n    )\n}\n\nexport default StartStreakWidget","import React from 'react'\nimport { useSelector } from 'react-redux'\nimport { RootState } from '../../reducers'\nimport { getAllPlayers, getGWCountLabel, sort } from '../../utilities'\nimport { Player } from '../Player'\nimport { SiteLink } from '../SiteLink'\nimport { Widget } from '../Widget'\n\nconst MAX_ITEMS = 10\n\nconst BenchStreakWidget: React.FC = () => {\n    const stats = useSelector((state: RootState) => state.stats.data)\n\n    if (!stats) {\n        return (\n            <Widget title=\"Highest Bench Appearance Streaks\" />\n        )\n    }\n\n    const allPlayers = getAllPlayers(stats)\n\n    const streakers = sort(allPlayers, el => el.aggregates.streaks.bench?.length || 0).slice(0, MAX_ITEMS)\n\n    return (\n        <Widget title=\"Highest Bench Appearance Streaks\">\n            <ul className=\"widget__list\">\n                {streakers.map(streaker => {\n                    const streak = streaker.aggregates.streaks.bench\n\n                    if (!streak) {\n                        return null\n                    }\n\n                    return (\n                        <li className=\"widget__list__item\" key={streaker.element.id}>\n                            <Player id={streaker.element.id} />\n                            <div>\n                                <div>\n                                    <SiteLink event={streak.start.id} />\n                                    {' – '}\n                                    <SiteLink event={streak.end.id} />\n                                </div>\n                                <div className=\"muted\">\n                                    {getGWCountLabel(streak.length)}\n                                </div>\n                            </div>\n                        </li>\n                    )\n                })}\n            </ul>\n        </Widget>\n    )\n}\n\nexport default BenchStreakWidget","import React from 'react'\n\nconst SwapIcon: React.FC = () => {\n    return (\n        <svg width=\"32\" height=\"20\" viewBox=\"0 0 32 20\" fill=\"#94968C\" className=\"swap-icon\">\n            <path fillRule=\"evenodd\" d=\"M53.6485838,32.0017628 L50.0028805,32.002243 L44.1795487,32.002243 L42.8449352,32.002243 C42.2448392,32.002243 41.6106577,32.2648846 41.1853096,32.6869358 C40.7782045,33.0941023 40.4723956,33.7595891 40.5007201,34.3468117 C40.5285646,34.9508394 40.7258761,35.5807952 41.1853096,36.0066875 C41.6447432,36.4287387 42.2069131,36.6913803 42.8449352,36.6913803 L46.4978397,36.6913803 L47.9851176,36.6913803 L45.4666347,39.209763 C43.6044167,41.0722619 41.7383581,42.9386019 39.8780605,44.7991802 C38.2707633,46.4067198 36.6673068,48.0104182 35.0585694,49.6193983 C34.2803649,50.3977202 33.4867979,51.1722009 32.7181949,51.9601258 L32.6845895,51.9937362 C32.2568411,52.4215492 32,53.0481439 32,53.6536121 C32,54.2317118 32.2530005,54.9140038 32.6845895,55.313488 C33.1305809,55.7206545 33.7157945,56.0265096 34.3442151,55.9981808 C34.9721555,55.9703321 35.5592895,55.7600268 36.0038406,55.313488 L37.931349,53.3856888 L42.5261642,48.7906607 L48.1147384,43.2007634 C49.1805089,42.1348321 50.2462794,41.0689008 51.3115699,40.0034497 L51.3115699,43.8239971 L51.3115699,45.1597723 C51.3115699,45.7599588 51.5741719,46.3937558 51.9961594,46.8196481 C52.4032645,47.2263345 53.068651,47.5321896 53.6557849,47.5038608 C54.2597216,47.4760121 54.8895823,47.279151 55.3154105,46.8196481 C55.7316371,46.3582247 56,45.7954898 56,45.1597723 L56,41.5058366 L56,35.6821067 L56,34.3468117 C56,34.0073461 55.9183869,33.6846859 55.781085,33.3893941 C55.6649064,33.1209907 55.5084013,32.8717932 55.3082093,32.6864556 C54.8617379,32.2792891 54.2770043,31.9739142 53.6485838,32.0017628 Z\" transform=\"rotate(45 71.042 -6.799)\"></path>\n        </svg>\n    )\n}\n\nexport default SwapIcon","import React from 'react'\nimport { useSelector } from 'react-redux'\nimport { RootState } from '../../reducers'\nimport { getAllPlayers, getPointsLabel, head, sort } from '../../utilities'\nimport { Player } from '../Player'\nimport { Widget } from '../Widget'\nimport { SwapIcon } from '../SwapIcon'\nimport { SiteLink } from '../SiteLink'\nimport './CaptainOpportunityWidget.scss'\n\nconst CaptainOpportunityWidget: React.FC = () => {\n    const stats = useSelector((state: RootState) => state.stats.data)\n\n    const history = useSelector((state: RootState) => state.history.data)\n\n    if (!stats || !history) {\n        return (\n            <Widget title=\"Missed Captaincies\" />\n        )\n    }\n\n    const allPlayers = getAllPlayers(stats)\n    const weeks = history.current.length\n\n    const improvements = Array.from(Array(weeks).keys()).map((el, index) => ({\n        top: head(sort(allPlayers, el => el.data[index].rawPoints || 0)),\n        captain: allPlayers.find(player => (player.data[index].multiplier || 0) > 1),\n    }))\n\n    return (\n        <Widget title=\"Missed Captaincies\" cssClasses=\"captain-opportunity-widget\">\n            <ul className=\"widget__list\">\n                {improvements.map((improvement, index) => {\n                    if (!improvement.captain || !improvement.top) {\n                        return null\n                    }\n\n                    const captainData = improvement.captain.data[index]\n                    const topData = improvement.top.data[index]\n\n                    if (captainData.rawPoints === topData.rawPoints) {\n                        return null\n                    }\n\n                    return (\n                        <li className=\"widget__list__item\" key={captainData.event.id}>\n                            <div>\n                                <div className=\"captain-opportunity-widget__player\">\n                                    <b>OUT:</b> <Player id={improvement.captain.element.id} />\n                                </div>\n                                <div className=\"captain-opportunity-widget__player\">\n                                    <b>IN:</b> <Player id={improvement.top.element.id} />\n                                </div>\n                            </div>\n                            <div className=\"captain-opportunity-widget__swap-info\">\n                                <b>{getPointsLabel((captainData.rawPoints || 0) * 2)}</b> <SwapIcon /> <b>{getPointsLabel((topData.rawPoints || 0) * 2)} </b>\n                                {' '}\n                                (\n                                    <SiteLink event={captainData.event.id} />\n                                )\n                            </div>\n                        </li>\n                    )\n                })}\n            </ul>\n        </Widget>\n    )\n}\n\nexport default CaptainOpportunityWidget","import React from 'react'\nimport { useSelector } from 'react-redux'\nimport { RootState } from '../../reducers'\nimport { Widget } from '../Widget'\nimport { getAllPlayers, sort } from '../../utilities'\nimport { Player } from '../Player'\n\nconst MAX_ITEMS = 10\n\nconst TeamsWidget: React.FC = () => {\n    const stats = useSelector((state: RootState) => state.stats.data)\n\n    if (!stats) {\n        return (\n            <Widget title=\"Top Selections\" />\n        )\n    }\n\n    const elements = sort(getAllPlayers(stats), el => el.aggregates.totals.selections)\n\n    return (\n        <Widget title=\"Top Selections\">\n            <ul className=\"widget__list\">\n                {elements.slice(0, MAX_ITEMS).map(element => (\n                    <li className=\"widget__list__item\" key={element.element.id}>\n                        <Player id={element.element.id} />\n                        <b>{element.aggregates.totals.selections}</b>\n                    </li>\n                ))}\n            </ul>\n        </Widget>\n    )\n}\n\nexport default TeamsWidget","import React from 'react'\nimport { useSelector } from 'react-redux'\nimport { RootState } from '../../reducers'\nimport { Widget } from '../Widget'\nimport { getAllPlayers, sort } from '../../utilities'\nimport { Player } from '../Player'\n\nconst MAX_ITEMS = 10\n\nconst StarterWidget: React.FC = () => {\n    const stats = useSelector((state: RootState) => state.stats.data)\n\n    if (!stats) {\n        return (\n            <Widget title=\"Top Starters\" />\n        )\n    }\n\n    const elements = sort(getAllPlayers(stats), el => el.aggregates.totals.starts)\n\n    return (\n        <Widget title=\"Top Starters\">\n            <ul className=\"widget__list\">\n                {elements.slice(0, MAX_ITEMS).map(element => (\n                    <li className=\"widget__list__item\" key={element.element.id}>\n                        <Player id={element.element.id} />\n                        <b>{element.aggregates.totals.starts}</b>\n                    </li>\n                ))}\n            </ul>\n        </Widget>\n    )\n}\n\nexport default StarterWidget","import React from 'react'\nimport { useSelector } from 'react-redux'\nimport { RootState } from '../../reducers'\nimport { Widget } from '../Widget'\nimport { getAllPlayers, sort } from '../../utilities'\nimport { Player } from '../Player'\n\nconst MAX_ITEMS = 10\n\nconst BenchWidget: React.FC = () => {\n    const stats = useSelector((state: RootState) => state.stats.data)\n\n    if (!stats) {\n        return (\n            <Widget title=\"Top Bench Players\" />\n        )\n    }\n\n    const elements = sort(getAllPlayers(stats), el => el.aggregates.totals.benched)\n\n    return (\n        <Widget title=\"Top Bench Players\">\n            <ul className=\"widget__list\">\n                {elements.slice(0, MAX_ITEMS).map(element => (\n                    <li className=\"widget__list__item\" key={element.element.id}>\n                        <Player id={element.element.id} />\n                        <b>{element.aggregates.totals.benched}</b>\n                    </li>\n                ))}\n            </ul>\n        </Widget>\n    )\n}\n\nexport default BenchWidget","import React from 'react'\nimport { useSelector } from 'react-redux'\nimport { RootState } from '../../reducers'\nimport { Widget } from '../Widget'\nimport { getAllPlayers, getGWCountLabel, round } from '../../utilities'\nimport { Player } from '../Player'\n\ntype Props = {\n    title: string\n    top?: boolean\n}\n\nconst MAX_ITEMS = 10\n\nconst DifferenceWidget: React.FC<Props> = (props: Props) => {\n    const stats = useSelector((state: RootState) => state.stats.data)\n\n    if (!stats) {\n        return (\n            <Widget title={props.title} />\n        )\n    }\n\n    const elements = getAllPlayers(stats)\n        .map(element => {\n            const selections = element.aggregates.totals.selections\n            const starts = element.aggregates.totals.starts\n            const benched = element.aggregates.totals.benched\n\n            return {\n                ...element,\n                benched,\n                benchedPercentage: benched / selections * 100,\n                starts,\n                startsPercentage: starts / selections * 100,\n            }\n        })\n\n    const topStarters = [ ...elements ].sort((a, b) => {\n        const percentageDiff = b.startsPercentage - a.startsPercentage\n        return percentageDiff === 0 ? b.starts - a.starts : percentageDiff\n    })\n\n    const topBenchwarmers = [ ...elements ].sort((a, b) => {\n        const percentageDiff = b.benchedPercentage - a.benchedPercentage\n        return percentageDiff === 0 ? b.benched - a.benched : percentageDiff\n    })\n\n    return (\n        <Widget title={props.title}>\n            <ul className=\"widget__list\">\n                {props.top && topStarters.slice(0, MAX_ITEMS).map(element => (\n                    <li className=\"widget__list__item\" key={element.element.id}>\n                        <Player id={element.element.id} />\n                        <div>\n                            <div>\n                                <b>{round(element.startsPercentage)}%</b>\n                            </div>\n                            <div className=\"muted\">\n                                {getGWCountLabel(element.starts)}\n                            </div>\n                        </div>\n                    </li>\n                ))}\n                {!props.top && topBenchwarmers.slice(0, MAX_ITEMS).map(element => (\n                    <li className=\"widget__list__item\" key={element.element.id}>\n                        <Player id={element.element.id} />\n                        <div>\n                            <div>\n                                <b>{round(element.benchedPercentage)}%</b>\n                            </div>\n                            <div className=\"muted\">\n                                {getGWCountLabel(element.benched)}\n                            </div>\n                        </div>\n                    </li>\n                ))}\n            </ul>\n        </Widget>\n    )\n}\n\nexport default DifferenceWidget","import React from 'react'\nimport { useSelector } from 'react-redux'\nimport { AreaChart, Area, XAxis, YAxis, ResponsiveContainer, CartesianGrid, Tooltip } from 'recharts'\nimport { RootState } from '../../reducers'\nimport { Widget } from '../Widget'\nimport { getShortName, head, sort, thousandsSeparator, thousandsShorthand } from '../../utilities'\n\nconst OverallRankWidget: React.FC = () => {\n    const history = useSelector((state: RootState) => state.history.data)\n    const bootstrap = useSelector((state: RootState) => state.bootstrap.data)\n\n    if (!history || !bootstrap) {\n        return (\n            <Widget title=\"Overall Rank Evolution\" />\n        )\n    }\n\n    let data = history.current.map(entry => {\n        const event = bootstrap.events.find(event => event.id === entry.event)\n\n        return {\n            name: `GW ${event ? getShortName(event) : entry.event}`,\n            value: entry.overall_rank,\n        }\n    })\n\n    const max = (head(sort([ ...data ], el => el.value))?.value || 0) * 1.05\n\n    data = [ ...data ].map(element => ({\n        ...element,\n        max,\n    }))\n\n    return (\n        <Widget title=\"Overall Rank Evolution\">\n            <div className=\"chart chart--reversed\">\n                <ResponsiveContainer height={300} width=\"100%\">\n                    <AreaChart data={data} margin={{ bottom: 45, left: 15, right: 15 }}>\n                        <Area type=\"monotone\" dataKey=\"max\" fill=\"#177B47\" fillOpacity=\"1\" />\n                        <Area type=\"monotone\" dataKey=\"value\" stroke=\"#177B47\" fill=\"#ffffff\" fillOpacity=\"1\" />\n                        <YAxis reversed={true} tickFormatter={value => thousandsShorthand(value)} domain={[1, max]} interval=\"preserveStartEnd\" tickCount={10} />\n                        <XAxis dataKey=\"name\" angle={-90} textAnchor=\"end\" interval=\"preserveStartEnd\" />\n                        <CartesianGrid stroke=\"rgba(192, 192, 192, 0.5)\" strokeDasharray=\"3 3\" />\n                        <Tooltip isAnimationActive={false} formatter={(value, name) => name === 'max' ? [undefined, undefined] : [ thousandsSeparator(Number(value)), 'Rank' ]} separator=\": \" />\n                    </AreaChart>\n                </ResponsiveContainer>\n            </div>\n        </Widget>\n    )\n}\n\nexport default OverallRankWidget","import React from 'react'\nimport { useSelector } from 'react-redux'\nimport { AreaChart, Area, XAxis, YAxis, ResponsiveContainer, CartesianGrid, Tooltip } from 'recharts'\nimport { RootState } from '../../reducers'\nimport { Widget } from '../Widget'\nimport { getShortName, initialCaps } from '../../utilities'\n\nconst OverallRankWidget: React.FC = () => {\n    const history = useSelector((state: RootState) => state.history.data)\n    const bootstrap = useSelector((state: RootState) => state.bootstrap.data)\n\n    if (!history || !bootstrap) {\n        return (\n            <Widget title=\"Gameweek Points\" />\n        )\n    }\n\n    const data = history.current.map(entry => {\n        const event = bootstrap.events.find(event => event.id === entry.event)\n\n        return {\n            name: `GW ${event ? getShortName(event) : entry.event}`,\n            points: entry.points,\n            bench: entry.points_on_bench,\n        }\n    })\n\n    return (\n        <Widget title=\"Gameweek Points\">\n            <div className=\"chart\">\n                <ResponsiveContainer height={300} width=\"100%\">\n                    <AreaChart data={data} margin={{ bottom: 45, left: 15, right: 15 }}>\n                        <Area type=\"monotone\" dataKey=\"points\" stroke=\"#177B47\" fill=\"#177B47\" fillOpacity=\"1\" />\n                        <Area type=\"monotone\" dataKey=\"bench\" stroke=\"#00FF87\" fill=\"#00FF87\" fillOpacity=\"1\" />\n                        <YAxis interval=\"preserveStartEnd\" />\n                        <XAxis dataKey=\"name\" angle={-90} textAnchor=\"end\" interval=\"preserveStartEnd\" />\n                        <CartesianGrid stroke=\"rgba(192, 192, 192, 0.5)\" strokeDasharray=\"3 3\" />\n                        <Tooltip isAnimationActive={false} formatter={(value, name) => [ value, initialCaps(name) ]} separator=\": \" />\n                    </AreaChart>\n                </ResponsiveContainer>\n            </div>\n        </Widget>\n    )\n}\n\nexport default OverallRankWidget","import React from 'react'\nimport { useSelector } from 'react-redux'\nimport { AreaChart, Area, XAxis, YAxis, ResponsiveContainer, CartesianGrid, Tooltip } from 'recharts'\nimport { RootState } from '../../reducers'\nimport { Widget } from '../Widget'\nimport { getShortName, initialCaps } from '../../utilities'\n\nconst ValueWidget: React.FC = () => {\n    const history = useSelector((state: RootState) => state.history.data)\n    const bootstrap = useSelector((state: RootState) => state.bootstrap.data)\n\n    if (!history || !bootstrap) {\n        return (\n            <Widget title=\"Team Value Evolution\" />\n        )\n    }\n\n    const data = history.current.map(entry => {\n        const event = bootstrap.events.find(event => event.id === entry.event)\n\n        return {\n            name: `GW ${event ? getShortName(event) : entry.event}`,\n            value: entry.value + entry.bank,\n        }\n    })\n\n    return (\n        <Widget title=\"Team Value Evolution\">\n            <div className=\"chart\">\n                <ResponsiveContainer height={300} width=\"100%\">\n                    <AreaChart data={data} margin={{ bottom: 45, left: 15, right: 15 }}>\n                        <Area type=\"monotone\" dataKey=\"value\" stroke=\"#177B47\" fill=\"#177B47\" fillOpacity=\"1\" />\n                        <YAxis tickFormatter={value => `£${value / 10}`} domain={[ 'auto', 'auto' ]} interval=\"preserveStartEnd\" />\n                        <XAxis dataKey=\"name\" angle={-90} textAnchor=\"end\" interval=\"preserveStartEnd\" />\n                        <CartesianGrid stroke=\"rgba(192, 192, 192, 0.5)\" strokeDasharray=\"3 3\" />\n                        <Tooltip isAnimationActive={false} formatter={(value, name) => [ `£${Number(value) / 10}`, initialCaps(name) ]} separator=\": \" />\n                    </AreaChart>\n                </ResponsiveContainer>\n            </div>\n        </Widget>\n    )\n}\n\nexport default ValueWidget","import React from 'react'\nimport { useSelector } from 'react-redux'\nimport { RootState } from '../../reducers'\nimport { getAllPlayers, head, round, sort } from '../../utilities'\nimport { Player } from '../Player'\nimport { Widget } from '../Widget'\n\nconst WrongCaptainWidget: React.FC = () => {\n    const stats = useSelector((state: RootState) => state.stats.data)\n\n    const history = useSelector((state: RootState) => state.history.data)\n\n    if (!stats || !history) {\n        return (\n            <Widget title=\"Wrong Captains\" />\n        )\n    }\n\n    const allPlayers = getAllPlayers(stats)\n    const weeks = history.current.length\n\n    const improvements = Array.from(Array(weeks).keys())\n        .map((el, index) => ({\n            top: head(sort(allPlayers, el => el.data[index].rawPoints || 0)),\n            captain: allPlayers.find(player => (player.data[index].multiplier || 0) > 1),\n        }))\n        .filter((element, index) => (element.top?.data[index].rawPoints || 0) > (element.captain?.data[index].rawPoints || 0))\n        .reduce((acc, curr) => curr.captain ? ({\n            ...acc,\n            [curr.captain.element.id]: (acc[curr.captain.element.id] ? acc[curr.captain.element.id] : 0) + 1,\n        }) : acc, {} as Record<number, number>)\n\n    const timesUsed = allPlayers.reduce((acc, curr) => {\n        return {\n            ...acc,\n            [curr.element.id]: curr.aggregates.totals.captaincies,\n        }\n    }, {} as Record<number, number>)\n\n    return (\n        <Widget title=\"Wrong Captains\">\n            <ul className=\"widget__list\">\n                {sort(Object.entries(improvements), el => el[1]).map(([ player, count ]) => (\n                    <li className=\"widget__list__item\" key={player}>\n                        <Player id={Number(player)} />\n                        <div>\n                            <div>\n                                <b>{count} out of {timesUsed[Number(player)]}</b>\n                            </div>\n                            <div className=\"muted\">\n                                {round(count / timesUsed[Number(player)] * 100, 1)}%\n                            </div>\n                        </div>\n                    </li>\n                ))}\n            </ul>\n        </Widget>\n    )\n}\n\nexport default WrongCaptainWidget","import React from 'react'\nimport { useSelector } from 'react-redux'\nimport { RootState } from '../../reducers'\nimport { getAllPlayers, getPointsLabel, round, sort } from '../../utilities'\nimport { Player } from '../Player'\nimport { Widget } from '../Widget'\n\nconst MAX_ITEMS = 10\n\nconst ContributionWidget: React.FC = () => {\n    const stats = useSelector((state: RootState) => state.stats.data)\n    const entry = useSelector((state: RootState) => state.entry.data)\n\n    if (!stats || !entry || entry.summary_overall_points === 0) {\n        return (\n            <Widget title=\"Total Points Contribution\" />\n        )\n    }\n\n    const contributions = sort(getAllPlayers(stats), el => el.aggregates.totals.points).slice(0, MAX_ITEMS)\n\n    return (\n        <Widget title=\"Total Points Contribution\">\n            <ul className=\"widget__list\">\n                {contributions.map(player => (\n                    <li className=\"widget__list__item\" key={player.element.id}>\n                        <Player id={player.element.id} />\n                        <div>\n                            <div>\n                                <b>{round(player.aggregates.totals.points / entry.summary_overall_points * 100)}%</b>\n                            </div>\n                            <div className=\"muted\">\n                                {getPointsLabel(player.aggregates.totals.points)}\n                            </div>\n                        </div>\n                    </li>\n                ))}\n            </ul>\n        </Widget>\n    )\n}\n\nexport default ContributionWidget","import React from 'react'\nimport { useSelector } from 'react-redux'\nimport { RootState } from '../../reducers'\nimport { Widget } from '../Widget'\nimport { getAllPlayers, getPointsLabel, round, sort } from '../../utilities'\nimport { Player } from '../Player'\nimport { getGWCountLabel } from '../../utilities/strings';\nimport { StatData } from '../../types'\n\ntype Props = {\n    title: string\n    top?: boolean\n}\n\nconst MAX_ITEMS = 10\n\nconst getPointsShare = (player: StatData): number => 100 - player.aggregates.totals.rawPoints / player.element.total_points * 100\n\nconst MissedPointsShareWidget: React.FC<Props> = (props: Props) => {\n    const stats = useSelector((state: RootState) => state.stats.data)\n    const history = useSelector((state: RootState) => state.history.data)\n\n    if (!stats || !history) {\n        return (\n            <Widget title={props.title} />\n        )\n    }\n\n    const elements = sort(\n        getAllPlayers(stats).filter(player => player.aggregates.totals.points > 0),\n        el => getPointsShare(el),\n        props.top ? 'desc': 'asc'\n    ).slice(0, MAX_ITEMS)\n\n    return (\n        <Widget title={props.title}>\n            <ul className=\"widget__list\">\n                {elements.map(element => (\n                    <li className=\"widget__list__item\" key={element.element.id}>\n                        <Player id={element.element.id} />\n                        <div>\n                            <div>\n                                <b>{element.element.total_points > 0 && `${round(getPointsShare(element))}%`}</b>\n                            </div>\n                            <div className=\"muted\">\n                                {getPointsLabel(element.element.total_points - element.aggregates.totals.rawPoints)} in {getGWCountLabel(history.current.length - element.aggregates.totals.selections)}\n                            </div>\n                        </div>\n                    </li>\n                ))}\n            </ul>\n        </Widget>\n    )\n}\n\nexport default MissedPointsShareWidget","import React from 'react'\nimport { useSelector } from 'react-redux'\nimport { RootState } from '../../reducers'\nimport { getAllPlayers, getPointsLabel, sort, thousandsSeparator } from '../../utilities'\nimport { Player } from '../Player'\nimport { Widget } from '../Widget'\n\nconst MAX_ITEMS = 13\n\nconst NearMissesWidget: React.FC = () => {\n    const stats = useSelector((state: RootState) => state.stats.data)\n    const tots = useSelector((state: RootState) => state.stats.tots)\n\n    if (!stats || !tots) {\n        return (\n            <Widget title=\"Near Misses\" />\n        )\n    }\n\n    const totsIds = tots.xi.concat(tots.bench).map(player => player.element.id)\n    const players = sort(getAllPlayers(stats).filter(player => !totsIds.includes(player.element.id)), el => el.aggregates.totals.points).slice(0, MAX_ITEMS)\n\n    return (\n        <Widget title=\"Near Misses\">\n            <ul className=\"widget__list\">\n                {players.map(player => (\n                    <li className=\"widget__list__item\">\n                        <Player id={player.element.id} />\n                        <b>{getPointsLabel(thousandsSeparator(player.aggregates.totals.points))}</b>\n                    </li>\n                ))}\n            </ul>\n        </Widget>\n    )\n}\n\nexport default NearMissesWidget","import React, { useState, useEffect, useRef } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport classNames from 'classnames'\nimport Select, { ValueType } from 'react-select'\nimport queryString from 'query-string'\nimport { Bootstrap, StatData, Stats } from '../../types'\nimport { fetchBootstrap } from '../../reducers/bootstrap'\nimport { RootState } from '../../reducers'\nimport { Player } from '../Player'\nimport { Widget } from '../Widget'\nimport { Spinner } from '../Spinner'\nimport { getPastEvents, getChipAbbreviation, thousandsSeparator, getShortName, validateTeamId, round, sort, getPointsLabel } from '../../utilities'\nimport { Modal } from '../Modal'\nimport { setId } from '../../reducers/settings'\nimport { buildData } from '../../reducers/stats'\nimport { Button } from '../Button'\nimport { fetchHistory } from '../../reducers/history'\nimport { HistoryWidget } from '../HistoryWidget'\nimport { TotsWidget } from '../TotsWidget'\nimport { PlayerStatsWidget } from '../PlayerStatsWidget'\nimport { FormationWidget } from '../FormationWidget'\nimport { CaptainWidget } from '../CaptainWidget'\nimport { GameweekWidget } from '../GameweekWidget'\nimport { PositionsWidget } from '../PositionsWidget'\nimport { fetchEntry } from '../../reducers/entry'\nimport { Metric } from '../Metric'\nimport { SeasonWidget } from '../SeasonWidget'\nimport { TeamsWidget } from '../TeamsWidget'\nimport { NonBlankStreakWidget } from '../NonBlankStreakWidget'\nimport { SelectionStreakWidget } from '../SelectionStreakWidget'\nimport { StartStreakWidget } from '../StartStreakWidget'\nimport { BenchStreakWidget } from '../BenchStreakWidget'\nimport { CaptainOpportunityWidget } from '../CaptainOpportunityWidget'\nimport { SelectionWidget } from '../SelectionWidget'\nimport { StarterWidget } from '../StarterWidget'\nimport { BenchWidget } from '../BenchWidget'\nimport { DifferenceWidget } from '../DifferenceWidget'\nimport { OverallRankWidget } from '../OverallRankWidget'\nimport { PointsWidget } from '../PointsWidget'\nimport { ValueWidget } from '../ValueWidget'\nimport { SiteLink } from '../SiteLink'\nimport { WrongCaptainWidget } from '../WrongCaptainWidget'\nimport { ContributionWidget } from '../ContributionWidget'\nimport { MissedPointsShareWidget } from '../MissedPointsShareWidget'\nimport { NearMissesWidget } from '../NearMissesWidget'\nimport './Dashboard.scss'\n\ntype OptionType = {\n    value: string\n    label: string\n}\n\ntype QueryString = {\n    team?: string\n}\n\nconst sortings: { [ key: string ]: (statData: StatData) => number } = {\n    points: el => el.aggregates.totals.points,\n    selection: el => el.aggregates.totals.selections,\n    start: el => el.aggregates.totals.starts,\n    bench: el => el.aggregates.totals.benched,\n    alphabet: (statData: StatData): number => {\n        return statData.element.web_name.toLowerCase().charCodeAt(0) * -1\n    }\n}\n\nconst sortOptions = [\n    { value: 'points', label: 'Total Points' },\n    { value: 'selection', label: 'Most Selected' },\n    { value: 'start', label: 'Most Started' },\n    { value: 'bench', label: 'Most Benched' },\n    { value: 'alphabet', label: 'Alphabetically' },\n]\n\nconst renderPlayerList = (stats: Stats, bootstrap: Bootstrap, sorting: OptionType): JSX.Element[] => Object.entries(stats).map(([ elementType, statData ]) => (\n    <div key={elementType}>\n        <li className=\"dashboard__category\">\n            <span>{bootstrap?.element_types.find(el => el.id === Number(elementType))?.plural_name_short}</span>\n            <span>{statData.length}</span>\n        </li>\n        {sort(statData.filter(element => element.data.filter(pick => pick.multiplier !== null).length), el => sortings[sorting.value](el))\n            .map(element => (\n                <li key={element.element.id} className=\"dashboard__item\">\n                    <div className=\"dashboard__player\">\n                        <Player id={element.element.id} extended />\n                    </div>\n                    <div className=\"dashboard__stats\">\n                        {element.data.map(item => (\n                            <span\n                                key={item.event.id}\n                                className={classNames('dashboard__stat', {\n                                    'dashboard__stat--benched': item.multiplier === 0,\n                                    'dashboard__stat--triple': item.multiplier === 3,\n                                    'dashboard__stat--started': item.multiplier,\n                                })}\n                            />\n                        ))}\n                    </div>\n                    <div className=\"dashboard__totals\">\n                        <span className=\"dashboard__stat\">\n                            <div>\n                                <b>{element.aggregates.totals.selections}</b> <span className=\"muted\">({element.data.length ? round(element.aggregates.totals.selections / element.data.length * 100) : 0}%)</span>\n                            </div>\n                        </span>\n                        <span className=\"dashboard__stat\">\n                            <div>\n                                <b>{element.aggregates.totals.starts}</b> <span className=\"muted\">({element.data.length ? round(element.aggregates.totals.starts / element.data.length * 100) : 0}%)</span>\n                            </div>\n                        </span>\n                        <span className=\"dashboard__stat\">\n                            <div>\n                                <b>{element.aggregates.totals.benched}</b> <span className=\"muted\">({element.data.length ? round(element.aggregates.totals.benched / element.data.length * 100) : 0}%)</span>\n                            </div>\n                        </span>\n                        <span className=\"dashboard__stat\">\n                            <div>\n                                <b>{element.aggregates.totals.points}</b>\n                                {' '}\n                                <span className=\"muted\">\n                                    (\n                                        {element.aggregates.totals.starts > 0 ? round(element.aggregates.totals.points / element.aggregates.totals.starts) : 0}\n                                        {' '}\n                                        <Metric metric=\"ppg\" />\n                                    )\n                                </span>\n                            </div>\n                        </span>\n                    </div>\n                </li>\n            ))\n        }\n    </div>\n))\n\nconst Dashboard: React.FC = () => {\n    const [ isModalOpen, setIsModalOpen ] = useState(true)\n    const [ sort, setSort ] = useState<ValueType<OptionType>>(sortOptions[0])\n\n    const isLoading = useSelector((state: RootState) => state.loading > 0)\n\n    const bootstrap = useSelector((state: RootState) => state.bootstrap.data)\n\n    const stats = useSelector((state: RootState) => state.stats.data)\n    const chips = useSelector((state: RootState) => state.stats.chips)\n\n    const id = useSelector((state: RootState) => state.settings.id)\n\n    const entry = useSelector((state: RootState) => state.entry.data)\n\n    const dashboardRef = useRef<HTMLDivElement>(null)\n\n    const dispatch = useDispatch()\n\n    useEffect(() => {\n        dispatch(fetchBootstrap())\n\n        const query: QueryString = queryString.parse(window.location.hash)\n\n        if (query.team && validateTeamId(query.team)) {\n            dispatch(setId(query.team))\n        }\n    }, [ dispatch ])\n\n    useEffect(() => {\n        setTimeout(() => {\n            if (dashboardRef && dashboardRef.current) {\n                dashboardRef.current.scrollTo(dashboardRef.current.scrollWidth, 0)\n            }\n        }, 1)\n    }, [ stats ])\n\n    useEffect(() => {\n        setIsModalOpen(!id)\n\n        if (bootstrap && id) {\n            dispatch(buildData(bootstrap, id))\n            dispatch(fetchHistory(id))\n            dispatch(fetchEntry(id))\n\n            window.location.hash = queryString.stringify({ team: id })\n        }\n    }, [ id, dispatch, bootstrap ])\n\n    return (\n        <div className=\"app\">\n            {isModalOpen && (\n                <Modal onClose={() => setIsModalOpen(false)} />\n            )}\n            <div className={classNames('app__loading', {\n                'app__loading--hidden': !isLoading,\n            })}>\n                <Spinner />\n            </div>\n            <div className=\"app__content\">\n                {entry && (\n                    <header className=\"dashboard__entry\">\n                        <Widget>\n                            <h1 className=\"dashboard__title\">\n                                <SiteLink label={entry.name} />\n                                <div className=\"small muted\">{getPointsLabel(entry.summary_overall_points)} — Rank {thousandsSeparator(entry.summary_overall_rank)}</div>\n                            </h1>\n                            {id !== undefined && (\n                                <Button\n                                    onClick={() => setIsModalOpen(true)}\n                                    label=\"Change Team\"\n                                />\n                            )}\n                        </Widget>\n                    </header>\n                )}\n                <div className=\"dashboard__widgets dashboard__widgets--split\">\n                    <TotsWidget />\n                    <NearMissesWidget />\n                </div>\n                <div className=\"dashboard__widgets dashboard__widgets-duo\">\n                    <PlayerStatsWidget />\n                    <SeasonWidget />\n                    <HistoryWidget />\n                </div>\n                <div className=\"dashboard__widgets\">\n                    <GameweekWidget />\n                    <PositionsWidget />\n                    <FormationWidget />\n                </div>\n                <h2><span>Players</span></h2>\n                <div className=\"app__meta\">\n                    <label className=\"app__meta__label\">\n                        Sort by\n                    </label>\n                    <Select\n                        options={sortOptions}\n                        value={sort}\n                        onChange={option => setSort(option)}\n                        styles={{\n                            container: (provided) => ({ ...provided, width: '100%' }),\n                            menu: (provided) => ({ ...provided, zIndex: 20 })\n                        }}\n                    />\n                    <div className=\"app__legend\">\n                        <div className=\"app__color\">\n                            <div className=\"app__color__indicator app__color__indicator--started\"></div>\n                            Started\n                        </div>\n                        <div className=\"app__color\">\n                            <div className=\"app__color__indicator app__color__indicator--benched\"></div>\n                            Benched\n                        </div>\n                        <div className=\"app__color\">\n                            <div className=\"app__color__indicator app__color__indicator--triple\"></div>\n                            TC\n                        </div>\n                        <div className=\"app__color\">\n                            <div className=\"app__color__indicator\"></div>\n                            Not Selected\n                        </div>\n                    </div>\n                </div>\n                <div className={classNames('dashboard', {\n                    'dashboard--cloaked': !id,\n                })}>\n                    <div className=\"dashboard__container\" ref={dashboardRef}>\n                        <header className=\"dashboard__header\">\n                            <span className=\"dashboard__heading\">\n                                Player\n                            </span>\n                            {bootstrap?.events && getPastEvents(bootstrap.events).filter(event => event.top_element_info.points > 0).map(event => (\n                                <span className=\"dashboard__stat\" key={event.id}>\n                                    {getShortName(event)}\n                                    {chips && chips[event.id] && (\n                                        <div>{getChipAbbreviation(chips[event.id])}</div>\n                                    )}\n                                </span>\n                            ))}\n                            <div className=\"dashboard__totals\">\n                                <span className=\"dashboard__stat\">\n                                    Selected\n                                </span>\n                                <span className=\"dashboard__stat\">\n                                    Starting\n                                </span>\n                                <span className=\"dashboard__stat\">\n                                    Benched\n                                </span>\n                                <span className=\"dashboard__stat\">\n                                    Points\n                                </span>\n                            </div>\n                        </header>\n                        <ul className=\"dashboard__list\">\n                            {stats && bootstrap && renderPlayerList(stats, bootstrap, sort as OptionType)}\n                        </ul>\n                    </div>\n                </div>\n                <div className=\"dashboard__widgets\">\n                    <SelectionWidget />\n                    <StarterWidget />\n                    <BenchWidget />\n                    <DifferenceWidget title=\"Most Consistent Starters\" top />\n                    <DifferenceWidget title=\"Most Consistent Bench Players\" />\n                </div>\n                <h2><span>Teams</span></h2>\n                <div className=\"dashboard__widgets dashboard__widgets--single\">\n                    <TeamsWidget />\n                </div>\n                <h2><span>Captains</span></h2>\n                <div className=\"dashboard__widgets\">\n                    <CaptainWidget />\n                    <CaptainOpportunityWidget />\n                    <WrongCaptainWidget />\n                </div>\n                <h2><span>Streaks</span></h2>\n                <div className=\"dashboard__widgets\">\n                    <NonBlankStreakWidget />\n                    <SelectionStreakWidget />\n                    <StartStreakWidget />\n                    <BenchStreakWidget />\n                </div>\n                <h2><span>Contributions</span></h2>\n                <div className=\"dashboard__widgets\">\n                    <ContributionWidget />\n                    <MissedPointsShareWidget title=\"Most Points Scored Outside of Team\" top />\n                    <MissedPointsShareWidget title=\"Fewest Points Scored Outside of Team\" />\n                </div>\n                <h2><span>Graphs</span></h2>\n                <div className=\"dashboard__graphs\">\n                    <OverallRankWidget />\n                    <PointsWidget />\n                    <ValueWidget />\n                </div>\n                <div className=\"app__legal\">\n                    <p>FPL Stats uses data from the official Premier League Fantasy API. This site is not affiliated with the Premier League.</p>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default Dashboard","import { combineReducers } from 'redux'\nimport bootstrap from './bootstrap'\nimport stats from './stats'\nimport settings from './settings'\nimport entry from './entry'\nimport { Bootstrap, Stats, History, Entry, StatData } from '../types'\nimport history from './history'\nimport loading from './loading'\n\nexport type RootState = {\n    loading: number\n    bootstrap: {\n        data: Bootstrap | undefined\n    }\n    stats: {\n        data: Stats | undefined\n        chips: {\n            [key: number]: string\n        } | undefined\n        tots: {\n            xi: StatData[]\n            bench: StatData[]\n        } | undefined\n    }\n    settings: {\n        id: number | undefined\n        meanStrategy: 'average' | 'median'\n    }\n    history: {\n        data: History | undefined\n    }\n    entry: {\n        data: Entry | undefined\n    }\n}\n\nexport default combineReducers({\n    loading,\n    bootstrap,\n    stats,\n    settings,\n    history,\n    entry,\n})","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { Provider } from 'react-redux'\nimport * as serviceWorker from './serviceWorker'\nimport { Dashboard } from './components/Dashboard'\nimport configureAppStore from './store'\nimport './index.scss'\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={configureAppStore()}>\n      <Dashboard />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\nserviceWorker.unregister()\n","import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit'\nimport rootReducer from './reducers'\n\nexport default function configureAppStore() {\n    const store = configureStore({\n        reducer: rootReducer,\n        middleware: [ ...getDefaultMiddleware() ],\n    })\n\n    return store\n}"],"sourceRoot":""}