{"version":3,"sources":["serviceWorker.ts","components/Player/Player.tsx","components/Button/Button.tsx","components/Widget/Widget.tsx","components/Spinner/Spinner.tsx","utilities/arrays.ts","utilities/chips.ts","utilities/events.ts","utilities/history.ts","utilities/numbers.ts","utilities/settings.ts","utilities/stats.ts","utilities/strings.ts","components/Modal/Modal.tsx","components/ModalInput/ModalInput.tsx","components/TeamModal/TeamModal.tsx","reducers/loading.ts","reducers/entry.ts","reducers/history.ts","reducers/stats.ts","reducers/bootstrap.ts","reducers/settings.ts","hooks/useMeanLabel.ts","hooks/useMeanValue.ts","components/HistoryWidget/HistoryWidget.tsx","components/TotsPlayer/TotsPlayer.tsx","components/TotsWidget/TotsWidget.tsx","components/Metric/Metric.tsx","components/SiteLink/SiteLink.tsx","components/PlayerStatsWidget/PlayerStatsWidget.tsx","components/FormationWidget/FormationWidget.tsx","components/CaptainWidget/CaptainWidget.tsx","components/GameweekWidget/GameweekWidget.tsx","components/PositionsWidget/PositionsWidget.tsx","components/SeasonWidget/SeasonWidget.tsx","components/Team/Team.tsx","components/TeamsWidget/TeamsWidget.tsx","components/SwapIcon/SwapIcon.tsx","components/CaptainOpportunityWidget/CaptainOpportunityWidget.tsx","components/BasePlayerWidget/BasePlayerWidget.tsx","components/SelectionWidget/SelectionWidget.tsx","components/DifferenceWidget/DifferenceWidget.tsx","components/OverallRankWidget/OverallRankWidget.tsx","components/PointsWidget/PointsWidget.tsx","components/ValueWidget/ValueWidget.tsx","components/WrongCaptainWidget/WrongCaptainWidget.tsx","components/ContributionWidget/ContributionWidget.tsx","components/MissedPointsShareWidget/MissedPointsShareWidget.tsx","components/NearMissesWidget/NearMissesWidget.tsx","components/StreakWidget/StreakWidget.tsx","components/Checkbox/Checkbox.tsx","components/SegmentedControl/SegmentedControl.tsx","components/SettingsModal/SettingsModal.tsx","components/Dashboard/Dashboard.tsx","reducers/index.ts","reportWebVitals.ts","index.tsx","store.ts"],"names":["Boolean","window","location","hostname","match","Player","props","bootstrap","useSelector","state","data","player","elements","find","el","id","team","teams","position","element_types","element_type","className","classNames","extended","reversed","src","code","singular_name_short","alt","web_name","suffix","title","name","short_name","Button","type","onClick","disabled","label","Widget","settings","cssClasses","onClose","aria-label","children","Spinner","sort","series","comparator","direction","a","b","head","length","last","reduce","extractor","initialValue","acc","curr","chips","bboost","freehit","wildcard","getPastEvents","events","timestamp","Date","now","filter","event","deadline_time_epoch","getShortName","split","pop","filterHistoryData","history","range","current","slice","start","end","thousandsSeparator","value","toString","replace","sumNumbers","round","precision","formatted","toFixed","test","validateTeamId","number","Number","isNaN","isInteger","getTotalSelections","statData","pick","multiplier","getTotalStarts","getTotalBenched","getTotalPoints","points","getTotalRawPoints","rawPoints","getTotalBenchPoints","getAllPlayers","stats","Object","values","concat","getPlayerAggregate","key","getTopStatAggregate","players","aggregates","totals","getStreak","comparison","ignoreBlanks","streaks","max","Math","indexOf","map","streak","totalPoints","getSelectionStreak","gw","getStartStreak","getBenchStreak","getNonBlankStreak","getTeamOfTheSeason","gk","def","mid","fwd","top","rest","xi","element","bench","emptyAggregates","redCards","yellowCards","goals","assists","cleanSheets","goalsConceded","ownGoals","saves","minutes","penaltiesMissed","penaltiesSaved","timesInDreamteam","bps","bonus","captaincies","benchPoints","selections","starts","benched","selection","nonBlank","filterStatData","rawStats","forEach","active_chip","entry_history","picks","item","live","total_points","keys","index","tots","initialCaps","charAt","toUpperCase","toLowerCase","pluralise","singular","plural","parsedValue","getGWCountLabel","getPointsLabel","normaliseDiacritics","normalize","TeamModal","footer","ModalInput","htmlFor","placeholder","onChange","e","target","ref","innerRef","useState","setValue","isLoading","loading","useHistory","close","useCallback","cancel","push","useEffect","listener","document","addEventListener","removeEventListener","callbackRef","inputElement","focus","onSubmit","preventDefault","createSlice","initialState","reducers","startLoading","finishLoading","actions","fetchEntry","createAsyncThunk","thunkAPI","dispatch","fetchEntryStart","fetch","encodeURIComponent","response","json","fetchEntrySuccess","entry","undefined","action","payload","fetchHistory","fetchHistoryStart","fetchHistorySuccess","fetchStatData","arg","fetchStatsStart","Promise","all","fetchGameweekInformation","gameweeks","fetchStatsSuccess","fetchPicks","fetchEvent","fetchBootstrap","fetchBootstrapStart","fetchBootstrapSuccess","latestFetch","localStorage","setItem","fetchDataWithId","setId","meanStrategy","theme","setMeanStrategy","setTheme","useMeanLabel","strategy","useMeanValue","filtered","average","sorted","ceil","median","TITLE","HistoryWidget","meanLabel","meanValue","pastSeasonsByRank","past","rank","pastSeasonsByPoints","bestRankedSeason","worstRankedSeason","bestPointSeason","worstPointSeason","top1k","season","top10k","top100k","top1m","season_name","TotsPlayer","TotsWidget","explanations","ppg","ppp","Metric","metric","SiteLink","url","href","rel","PlayerStatsWidget","allPlayers","reds","yellows","inDreamteam","mostCaptaincies","topReturner","topBenchGWReturner","topSeasonReturner","topBenchReturner","weeks","idealCaptain","entries","Array","from","week","returner","renderTopBenchGWReturner","FormationWidget","formations","val","join","formation","count","information","formatFormation","CaptainWidget","captains","captain","GameweekWidget","differences","average_entry_score","sortedRanks","gws","bestGW","worstGW","bestGWRank","worstGWRank","diff","PositionsWidget","positions","elementType","plural_name","getAggregateValues","SeasonWidget","rawHistory","totalTransfers","event_transfers","totalHits","event_transfers_cost","totalBenched","points_on_bench","tc","findIndex","bbWeek","bbPoints","doubleDigitHauls","totalPlays","summary_overall_points","Team","TeamsWidget","counts","positionPlayers","data-position","plural_name_short","SwapIcon","xmlns","width","height","viewBox","fill","d","CaptainOpportunityWidget","improvements","improvement","captainData","topData","renderList","renderItem","BasePlayerWidget","showExtended","setShowExtended","filteredPlayers","includes","topPlayers","SelectionWidget","DifferenceWidget","benchedPercentage","startsPercentage","starters","percentageDiff","benchwarmers","OverallRankWidget","overall_rank","margin","bottom","left","right","dataKey","fillOpacity","stroke","tickFormatter","thousandsShorthand","domain","interval","tickCount","angle","textAnchor","strokeDasharray","isAnimationActive","formatter","separator","ValueWidget","bank","WrongCaptainWidget","timesUsed","ContributionWidget","contributions","getPointsShare","MissedPointsShareWidget","NearMissesWidget","totsIds","StreakWidget","streakers","aStreak","bStreak","aStreakLength","bStreakLength","streaker","showDetailedStats","Checkbox","checked","SegmentedControl","options","option","selected","setSelected","meanOptions","SettingsModal","setChecked","setStrategy","useDispatch","sortings","alphabet","charCodeAt","sortOptions","Dashboard","setSort","isSettingsOpen","setIsSettingsOpen","setRange","filteredData","setFilteredData","rawStatsData","useParams","browserHistory","isModalOpen","setIsModalOpen","dashboardRef","useRef","documentElement","setAttribute","setTimeout","scrollTo","scrollWidth","debouncedFiltering","debounce","filteredStatData","filteredHistoryData","summary_overall_rank","styles","container","provided","menu","zIndex","sorting","renderPlayerList","PointsWidget","ReactSlider","min","renderThumb","valueNow","pearling","combineReducers","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","store","storage","getItem","preloadedState","JSON","parse","configureStore","reducer","rootReducer","middleware","getDefaultMiddleware","subscribe","getState","stringify","configureAppStore","path","exact","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.e88ea592.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n        // [::1] is the IPv6 localhost address.\n        window.location.hostname === '[::1]' ||\n        // 127.0.0.0/8 are considered localhost for IPv4.\n        window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n)\n\ntype Config = {\n    onSuccess?: (registration: ServiceWorkerRegistration) => void\n    onUpdate?: (registration: ServiceWorkerRegistration) => void\n}\n\nexport function register(config?: Config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets see https://github.com/facebook/create-react-app/issues/2374\n            return\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config)\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                            'worker. To learn more, visit https://bit.ly/CRA-PWA'\n                    )\n                })\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config)\n            }\n        })\n    }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing\n                if (installingWorker == null) {\n                    return\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                            )\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration)\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.')\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration)\n                            }\n                        }\n                    }\n                }\n            }\n        })\n        .catch(error => {\n            console.error('Error during service worker registration:', error)\n        })\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n        headers: { 'Service-Worker': 'script' },\n    })\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type')\n            if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload()\n                    })\n                })\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config)\n            }\n        })\n        .catch(() => {\n            console.log('No internet connection found. App is running in offline mode.')\n        })\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready\n            .then(registration => {\n                registration.unregister()\n            })\n            .catch(error => {\n                console.error(error.message)\n            })\n    }\n}\n","import React from 'react'\nimport { useSelector } from 'react-redux'\nimport classNames from 'classnames'\nimport { RootState } from '../../reducers'\nimport './Player.scss'\n\ntype Props = {\n    id: number\n    extended?: boolean\n    reversed?: boolean\n    suffix?: string | (() => JSX.Element | null)\n}\n\nconst Player: React.FC<Props> = (props: Props) => {\n    const bootstrap = useSelector((state: RootState) => state.bootstrap.data)\n\n    const player = bootstrap?.elements.find(el => el.id === props.id)\n    const team = bootstrap?.teams.find(el => el.id === player?.team)\n    const position = bootstrap?.element_types.find(el => el.id === player?.element_type)\n\n    return (\n        <div\n            className={classNames('player', {\n                'player--condensed': !props.extended,\n                'player--reversed': props.reversed,\n            })}\n        >\n            <img\n                src={`https://fantasy.premierleague.com/dist/img/shirts/special/shirt_${team?.code}${\n                    position?.singular_name_short === 'GKP' ? '_1' : ''\n                }-66.png`}\n                alt={player?.web_name}\n                className=\"player__shirt\"\n            />\n            <div className=\"player__detail\">\n                <div className=\"player__name\">\n                    <span>\n                        {props.suffix && !props.extended ? <b>{player?.web_name}</b> : player?.web_name}\n                        {typeof props.suffix === 'string' ? ` (${props.suffix})` : props.suffix ? props.suffix() : null}\n                    </span>\n                </div>\n                <div className=\"player__info\">\n                    <span className=\"player__team\" title={team?.name}>\n                        {team?.short_name}\n                    </span>\n                    <span className=\"player__position\">{position?.singular_name_short}</span>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default Player\n","import React from 'react'\nimport './Button.scss'\n\ntype Props = {\n    label: string\n    type?: 'reset' | 'submit' | 'button'\n    disabled?: boolean\n    onClick?: () => void\n}\n\nconst Button: React.FC<Props> = (props: Props) => (\n    <button className=\"button\" type={props.type || 'button'} onClick={props.onClick} disabled={props.disabled}>\n        {props.label}\n    </button>\n)\n\nexport default Button\n","import React from 'react'\nimport classNames from 'classnames'\nimport { useSelector } from 'react-redux'\nimport { RootState } from '../../reducers'\nimport { Button } from '../Button'\nimport './Widget.scss'\n\ntype Props = {\n    title?: string\n    children?: React.ReactNode\n    cssClasses?: string\n    onClose?: () => void\n}\n\nconst Widget: React.FC<Props> = (props: Props) => {\n    const id = useSelector((state: RootState) => state.settings.id)\n\n    return (\n        <div\n            className={classNames('widget', props.cssClasses, {\n                'widget--cloaked': !id,\n            })}\n        >\n            {props.title && (\n                <h3 className=\"widget__title\">\n                    {props.title}{' '}\n                    {props.onClose && <Button label=\"X\" onClick={() => props.onClose?.()} aria-label=\"Close\" />}\n                </h3>\n            )}\n            <div className=\"widget__content\">\n                {props.children || <div className=\"widget__empty\">No data available.</div>}\n            </div>\n        </div>\n    )\n}\n\nexport default Widget\n","import React from 'react'\nimport './Spinner.scss'\n\nconst Spinner: React.FC = () => (\n    <div className=\"spinner\">\n        <div className=\"spinner__item\"></div>\n        <div className=\"spinner__item\"></div>\n        <div className=\"spinner__item\"></div>\n        <div className=\"spinner__item\"></div>\n        <div className=\"spinner__item\"></div>\n        <div className=\"spinner__item\"></div>\n        <div className=\"spinner__item\"></div>\n        <div className=\"spinner__item\"></div>\n        <div className=\"spinner__item\"></div>\n    </div>\n)\n\nexport default Spinner\n","export const sort = <T>(series: T[], comparator: (element: T) => number, direction: 'asc' | 'desc' = 'desc'): T[] => {\n    return [...series].sort((a, b) => (comparator(a) - comparator(b)) * (direction === 'desc' ? -1 : 1))\n}\n\nexport const head = <T>(series: T[]): T | null => {\n    return series.length ? series[0] : null\n}\n\nexport const last = <T>(series: T[]): T | null => {\n    return series.length ? series[series.length - 1] : null\n}\n\nexport const reduce = <T>(series: T[], extractor: (element: T) => number, initialValue: number = 0): number => {\n    return series.reduce((acc, curr) => acc + extractor(curr), initialValue)\n}\n","const chips: { [key: string]: string } = {\n    '3xc': 'TC',\n    bboost: 'BB',\n    freehit: 'FH',\n    wildcard: 'WC',\n}\n\nexport const getChipAbbreviation = (key: string): string | null => chips[key] || null\n","import { Event } from '../types'\n\nexport const getPastEvents = (events: Event[]): Event[] => {\n    const timestamp = Date.now()\n    return events.filter(event => event.deadline_time_epoch * 1000 < timestamp)\n}\n\nexport const getShortName = (event: Event): string => {\n    return event.name.split(' ').pop() || ''\n}\n","import { History, Range } from '../types'\n\nexport const filterHistoryData = async (history: History, range: Range): Promise<History> => {\n    return {\n        ...history,\n        current: history.current.slice(range.start, range.end + 1),\n    }\n}\n","import { head, reduce, sort } from './arrays'\n\nexport const thousandsSeparator = (value: number): string => {\n    return value.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',')\n}\n\nexport const thousandsShorthand = (value: number): string => {\n    return value > 999999 ? `${round(value / 1000000)}M` : value > 999 ? `${round(value / 1000, 0)}K` : `${value}`\n}\n\nexport const sumNumbers = (series: (number | null)[]): number => {\n    return reduce(series, el => el || 0)\n}\n\nexport const average = (series: (number | null)[]): number => {\n    const filtered = series.filter(el => el !== null)\n\n    return filtered.length ? sumNumbers(filtered) / filtered.length : 0\n}\n\nexport const median = (series: (number | null)[]): number => {\n    const filtered = series.filter(el => el !== null) as number[]\n    const sorted = sort(filtered, el => el)\n    const mid = Math.ceil(filtered.length / 2)\n\n    if (sorted.length % 2 === 0) {\n        return (sorted[mid] + sorted[mid + 1]) / 2\n    }\n\n    return sorted[mid - 1]\n}\n\nexport const round = (value: number, precision: number = 1): string => {\n    const formatted = value.toFixed(precision)\n\n    if (/\\.0+$/.test(formatted)) {\n        return head(formatted.split('.')) || ''\n    }\n\n    return formatted\n}\n","export const validateTeamId = (value: string) => {\n    const number = Number(value)\n\n    return value && !Number.isNaN(number) && Number.isInteger(number)\n}\n","import {\n    ElementStats,\n    StatData,\n    Stats,\n    StatDataGameweek,\n    Streak,\n    Picks,\n    LiveEvent,\n    Bootstrap,\n    Range,\n    StatAggregateTotals,\n} from '../types'\nimport { head, reduce, sort } from './arrays'\nimport { sumNumbers } from './numbers'\n\nexport const getTotalSelections = (statData: StatData): number => {\n    return statData.data.filter(pick => pick.multiplier !== null).length\n}\n\nexport const getTotalStarts = (statData: StatData): number => {\n    return statData.data.filter(pick => pick.multiplier && pick.multiplier > 0).length\n}\n\nexport const getTotalBenched = (statData: StatData): number => {\n    return statData.data.filter(pick => pick.multiplier === 0).length\n}\n\nexport const getTotalPoints = (statData: StatData): number => {\n    return reduce(statData.data, el => el.points || 0)\n}\n\nexport const getTotalCaptaincies = (statData: StatData): number => {\n    return statData.data.filter(data => (data.multiplier || 0) > 1).length\n}\n\nexport const getTotalRawPoints = (statData: StatData): number => {\n    return reduce(statData.data, el => el.rawPoints || 0)\n}\n\nexport const getTotalBenchPoints = (statData: StatData): number => {\n    return reduce(statData.data, el => (el.multiplier === 0 ? el.rawPoints || 0 : 0))\n}\n\nexport const getAllPlayers = (stats: Stats): StatData[] => {\n    return Object.values(stats).reduce((acc, curr) => acc.concat(curr), [])\n}\n\nexport const getPlayerAggregate = (player: StatData, key: keyof ElementStats): number =>\n    player.data.reduce((acc, data) => {\n        if (typeof data.stats?.[key] === 'number') {\n            return ((data.stats?.[key] as number) || 0) + acc\n        }\n\n        if (typeof data.stats?.[key] === 'boolean') {\n            return (+(data.stats?.[key] as boolean) || 0) + acc\n        }\n\n        return acc\n    }, 0)\n\nexport const getTopStatAggregate = (players: StatData[], key: keyof StatAggregateTotals): StatData | null =>\n    head(sort(players, el => el.aggregates.totals[key]))\n\nconst getStreak = (\n    statData: StatData,\n    comparison: (gw: StatDataGameweek) => boolean,\n    ignoreBlanks: boolean = false\n): Streak | null => {\n    const streaks = statData.data.reduce((acc, curr) => {\n        if (comparison(curr)) {\n            if (ignoreBlanks) {\n                return [...acc.slice(0, acc.length - 1), acc[acc.length - 1] + 1]\n            }\n\n            if (!acc.length || acc[acc.length - 1] === 0) {\n                return [...acc, 1]\n            }\n\n            return [...acc.slice(0, acc.length - 1), acc[acc.length - 1] + 1]\n        }\n\n        return [...acc, 0]\n    }, (ignoreBlanks ? [0] : []) as number[])\n\n    const max = Math.max(...streaks)\n\n    if (max === 0) {\n        return null\n    }\n\n    const start = sumNumbers(streaks.slice(0, streaks.indexOf(max)).map(streak => (streak > 0 ? streak : 1)))\n    const end = start - 1 + max\n\n    const points = statData.data.slice(start, end).map(event => event.points || 0)\n\n    return {\n        start: statData.data[start].event,\n        end: statData.data[end].event,\n        length: max,\n        points,\n        totalPoints: sumNumbers(points),\n    }\n}\n\nexport const getSelectionStreak = (statData: StatData): Streak | null =>\n    getStreak(statData, gw => gw.multiplier !== null, true)\n\nexport const getStartStreak = (statData: StatData): Streak | null =>\n    getStreak(statData, gw => (gw.multiplier || 0) > 0, true)\n\nexport const getBenchStreak = (statData: StatData): Streak | null =>\n    getStreak(statData, gw => gw.multiplier === 0, true)\n\nexport const getNonBlankStreak = (statData: StatData): Streak | null =>\n    getStreak(statData, gw => (gw.rawPoints || 0) > 2)\n\nconst MIN_GK = 1\nconst MAX_GK = 2\n\nconst MIN_DEF = 3\nconst MAX_DEF = 5\n\nconst MIN_MID = 2\nconst MAX_MID = 5\n\nconst MIN_FWD = 1\nconst MAX_FWD = 3\n\nexport const getTeamOfTheSeason = (stats: Stats): { xi: StatData[]; bench: StatData[] } => {\n    const gk = sort(stats[1], el => el.aggregates.totals.points).slice(0, MAX_GK)\n    const def = sort(stats[2], el => el.aggregates.totals.points).slice(0, MAX_DEF)\n    const mid = sort(stats[3], el => el.aggregates.totals.points).slice(0, MAX_MID)\n    const fwd = sort(stats[4], el => el.aggregates.totals.points).slice(0, MAX_FWD)\n\n    const top = gk\n        .slice(0, MIN_GK)\n        .concat(def.slice(0, MIN_DEF))\n        .concat(mid.slice(0, MIN_MID))\n        .concat(fwd.slice(0, MIN_FWD))\n\n    const rest = sort(\n        def.slice(MIN_DEF).concat(mid.slice(MIN_MID)).concat(fwd.slice(MIN_FWD)),\n        el => el.aggregates.totals.points\n    )\n\n    const xi = sort(top.concat(rest.slice(0, 4)), el => el.element.element_type, 'asc')\n    const bench = sort(gk.slice(MIN_GK).concat(rest.slice(4)), el => el.element.element_type, 'asc')\n\n    return {\n        xi,\n        bench,\n    }\n}\n\nconst emptyAggregates = {\n    totals: {\n        redCards: 0,\n        yellowCards: 0,\n        goals: 0,\n        assists: 0,\n        cleanSheets: 0,\n        goalsConceded: 0,\n        ownGoals: 0,\n        saves: 0,\n        minutes: 0,\n        penaltiesMissed: 0,\n        penaltiesSaved: 0,\n        timesInDreamteam: 0,\n        bps: 0,\n        bonus: 0,\n        captaincies: 0,\n        points: 0,\n        rawPoints: 0,\n        benchPoints: 0,\n        selections: 0,\n        starts: 0,\n        benched: 0,\n    },\n    streaks: {\n        selection: null,\n        start: null,\n        bench: null,\n        nonBlank: null,\n    },\n}\n\nexport const filterStatData = async (\n    rawStats: {\n        pick: Picks\n        live: LiveEvent\n    }[],\n    bootstrap: Bootstrap,\n    range: Range\n): Promise<{\n    data: Stats\n    chips: {\n        [key: number]: string\n    }\n    tots: {\n        xi: StatData[]\n        bench: StatData[]\n    }\n}> => {\n    const stats: { [key: number]: StatData } = {}\n    const chips: { [key: number]: string } = {}\n\n    rawStats.slice(range.start, range.end + 1).forEach(gw => {\n        if (gw.pick.active_chip) {\n            chips[gw.pick.entry_history.event] = gw.pick.active_chip\n        }\n\n        gw.pick.picks.forEach(item => {\n            if (!stats[item.element]) {\n                stats[item.element] = {\n                    element: bootstrap.elements.find(el => el.id === item.element)!,\n                    data: bootstrap.events.slice(range.start, gw.pick.entry_history.event - 1).map(event => ({\n                        event,\n                        multiplier: null,\n                        points: null,\n                        rawPoints: null,\n                        stats: null,\n                        position: null,\n                    })),\n                    aggregates: emptyAggregates,\n                }\n            }\n\n            const points = gw.live.elements.find(el => el.id === item.element)?.stats.total_points || null\n\n            stats[item.element] = {\n                ...stats[item.element],\n                data: [\n                    ...stats[item.element].data,\n                    {\n                        event: bootstrap.events.find(event => event.id === gw.pick.entry_history.event)!,\n                        multiplier: item.multiplier,\n                        points: points !== null ? points * item.multiplier : points,\n                        rawPoints: points,\n                        stats: gw.live.elements.find(el => el.id === item.element)?.stats || null,\n                        position: item.position,\n                    },\n                ],\n            }\n        })\n\n        Object.keys(stats).forEach(player => {\n            const index = Number(player)\n\n            if (stats[index].data.length < gw.pick.entry_history.event - range.start) {\n                stats[index] = {\n                    ...stats[index],\n                    data: [\n                        ...stats[index].data,\n                        {\n                            event: bootstrap.events.find(event => event.id === gw.pick.entry_history.event)!,\n                            multiplier: null,\n                            points: null,\n                            rawPoints: null,\n                            stats: null,\n                            position: null,\n                        },\n                    ],\n                }\n            }\n        })\n    })\n\n    Object.keys(stats).forEach(id => {\n        const player = stats[Number(id)]\n\n        stats[Number(id)].aggregates = {\n            totals: {\n                redCards: getPlayerAggregate(player, 'red_cards'),\n                yellowCards: getPlayerAggregate(player, 'yellow_cards'),\n                goals: getPlayerAggregate(player, 'goals_scored'),\n                assists: getPlayerAggregate(player, 'assists'),\n                cleanSheets: getPlayerAggregate(player, 'clean_sheets'),\n                goalsConceded: getPlayerAggregate(player, 'goals_conceded'),\n                ownGoals: getPlayerAggregate(player, 'own_goals'),\n                saves: getPlayerAggregate(player, 'saves'),\n                minutes: getPlayerAggregate(player, 'minutes'),\n                penaltiesMissed: getPlayerAggregate(player, 'penalties_missed'),\n                penaltiesSaved: getPlayerAggregate(player, 'penalties_saved'),\n                timesInDreamteam: getPlayerAggregate(player, 'in_dreamteam'),\n                bps: getPlayerAggregate(player, 'bps'),\n                bonus: getPlayerAggregate(player, 'bonus'),\n                captaincies: getTotalCaptaincies(player),\n                points: getTotalPoints(player),\n                rawPoints: getTotalRawPoints(player),\n                benchPoints: getTotalBenchPoints(player),\n                selections: getTotalSelections(player),\n                starts: getTotalStarts(player),\n                benched: getTotalBenched(player),\n            },\n            streaks: {\n                selection: getSelectionStreak(player),\n                start: getStartStreak(player),\n                bench: getBenchStreak(player),\n                nonBlank: getNonBlankStreak(player),\n            },\n        }\n    })\n\n    const data = Object.values(stats).reduce(\n        (acc: Stats, curr) => ({\n            ...acc,\n            [curr.element.element_type]: [...(acc[curr.element.element_type] || []), curr],\n        }),\n        {}\n    )\n\n    return {\n        data,\n        chips,\n        tots: getTeamOfTheSeason(data),\n    }\n}\n","export const initialCaps = (value: string): string => `${value.charAt(0).toUpperCase()}${value.toLowerCase().slice(1)}`\n\nexport const pluralise = (value: number | string, singular: string, plural: string) => {\n    const parsedValue = typeof value === 'number' ? value : Number(value.replace(/,/g, ''))\n\n    return `${value} ${parsedValue === 1 ? singular : plural}`\n}\n\nexport const getGWCountLabel = (value: number | string): string => pluralise(value, 'GW', 'GWs')\n\nexport const getPointsLabel = (value: number | string): string => pluralise(value, 'pt', 'pts')\n\nexport const normaliseDiacritics = (value: string): string => value.normalize('NFD').replace(/[\\u0300-\\u036f]/g, '')\n","import React from 'react'\nimport classNames from 'classnames'\nimport { Button } from '../Button'\nimport './Modal.scss'\n\ntype Props = {\n    title: string\n    children?: React.ReactNode\n    onClose?: () => void\n    footer?: React.ReactNode\n    cssClasses?: string\n}\n\nconst TeamModal: React.FC<Props> = (props: Props) => {\n    return (\n        <div className={classNames('modal', props.cssClasses)}>\n            <div className=\"modal__backdrop\" onClick={() => props.onClose?.()}></div>\n            <div className=\"modal__element\">\n                <h3 className=\"modal__header\">\n                    {props.title}\n                    <Button label=\"X\" onClick={() => props.onClose?.()} aria-label=\"Close\" />\n                </h3>\n                <div className=\"modal__body\">{props.children}</div>\n                {props.footer && <footer className=\"modal__footer\">{props.footer}</footer>}\n            </div>\n        </div>\n    )\n}\n\nexport default TeamModal\n","import React from 'react'\nimport './ModalInput.scss'\n\ntype Props = {\n    label: string\n    value: string\n    onChange: (value: string) => void\n    placeholder?: string\n    id?: string\n    innerRef?: (element: any) => any\n}\n\nconst ModalInput: React.FC<Props> = (props: Props) => {\n    return (\n        <div className=\"modal-input\">\n            <label htmlFor={props.id}>{props.label}</label>\n            <input\n                className=\"modal-input__element\"\n                id={props.id}\n                type=\"text\"\n                placeholder={props.placeholder}\n                value={props.value}\n                onChange={e => props.onChange(e.target.value)}\n                ref={props.innerRef}\n            />\n        </div>\n    )\n}\n\nexport default ModalInput\n","import React, { useState, useEffect, useCallback } from 'react'\nimport { useSelector } from 'react-redux'\nimport { useHistory } from 'react-router-dom'\nimport { Button } from '../Button'\nimport { validateTeamId } from '../../utilities'\nimport { RootState } from '../../reducers'\nimport { Modal } from '../Modal'\nimport { ModalInput } from '../ModalInput'\n\ntype Props = {\n    onClose?: () => void\n}\n\nconst TeamModal: React.FC<Props> = (props: Props) => {\n    const [value, setValue] = useState<string>('')\n\n    const isLoading = useSelector((state: RootState) => state.loading > 0)\n\n    const id = useSelector((state: RootState) => state.settings.id)\n\n    const history = useHistory()\n\n    const close = useCallback(\n        (cancel: boolean) => {\n            if (!cancel) {\n                history.push(`/${value}/`)\n            } else if (id) {\n                props.onClose?.()\n            }\n        },\n        [value, history, props, id]\n    )\n\n    useEffect(() => {\n        const listener = (e: KeyboardEvent) => {\n            if (e.key === 'Escape') {\n                close(true)\n            }\n        }\n\n        document.addEventListener('keyup', listener)\n\n        return () => document.removeEventListener('keyup', listener)\n    }, [close])\n\n    const callbackRef = useCallback(inputElement => inputElement?.focus(), [])\n\n    return (\n        <form\n            onSubmit={e => {\n                close(false)\n                e.preventDefault()\n            }}\n        >\n            <Modal\n                title=\"Select Team\"\n                onClose={() => close(true)}\n                footer={\n                    <Button\n                        label=\"Show Stats\"\n                        type=\"submit\"\n                        disabled={!validateTeamId(value) || value === `${id}` || isLoading}\n                    />\n                }\n            >\n                <ModalInput\n                    label=\"Team ID\"\n                    placeholder=\"Enter your team ID\"\n                    value={value}\n                    onChange={value => setValue(value)}\n                    innerRef={callbackRef}\n                />\n            </Modal>\n        </form>\n    )\n}\n\nexport default TeamModal\n","import { createSlice } from '@reduxjs/toolkit'\n\nconst loading = createSlice({\n    name: 'loading',\n    initialState: 0,\n    reducers: {\n        startLoading(state) {\n            state += 1\n\n            return state\n        },\n        finishLoading(state) {\n            state -= 1\n\n            return state\n        },\n    },\n})\n\nexport const { startLoading, finishLoading } = loading.actions\n\nexport default loading.reducer\n","import { createSlice, createAsyncThunk } from '@reduxjs/toolkit'\nimport { finishLoading, startLoading } from './loading'\n\nexport const fetchEntry = createAsyncThunk('entry/fetch', async (id: number, thunkAPI) => {\n    thunkAPI.dispatch(fetchEntryStart())\n    thunkAPI.dispatch(startLoading())\n\n    const response = await fetch(\n        `https://jsonp.afeld.me/?url=${encodeURIComponent(`https://fantasy.premierleague.com/api/entry/${id}/`)}`\n    )\n\n    const data = await response.json()\n\n    thunkAPI.dispatch(fetchEntrySuccess(data))\n    thunkAPI.dispatch(finishLoading())\n})\n\nconst entry = createSlice({\n    name: 'entry',\n    initialState: {\n        data: undefined,\n    },\n    reducers: {\n        fetchEntryStart(state) {\n            state.data = undefined\n        },\n        fetchEntrySuccess(state, action) {\n            state.data = action.payload\n        },\n    },\n})\n\nexport const { fetchEntryStart, fetchEntrySuccess } = entry.actions\n\nexport default entry.reducer\n","import { createSlice, createAsyncThunk } from '@reduxjs/toolkit'\nimport { finishLoading, startLoading } from './loading'\n\nexport const fetchHistory = createAsyncThunk('history/fetch', async (entry: number, thunkAPI) => {\n    thunkAPI.dispatch(fetchHistoryStart())\n    thunkAPI.dispatch(startLoading())\n\n    const response = await fetch(\n        `https://jsonp.afeld.me/?url=${encodeURIComponent(\n            `https://fantasy.premierleague.com/api/entry/${entry}/history/`\n        )}`\n    )\n\n    const data = await response.json()\n\n    thunkAPI.dispatch(fetchHistorySuccess(data))\n    thunkAPI.dispatch(finishLoading())\n})\n\nconst history = createSlice({\n    name: 'history',\n    initialState: {\n        data: undefined,\n    },\n    reducers: {\n        fetchHistoryStart(state) {\n            state.data = undefined\n        },\n        fetchHistorySuccess(state, action) {\n            state.data = action.payload\n        },\n    },\n})\n\nexport const { fetchHistoryStart, fetchHistorySuccess } = history.actions\n\nexport default history.reducer\n","import { createSlice, createAsyncThunk } from '@reduxjs/toolkit'\nimport { Bootstrap, Picks, LiveEvent } from '../types'\nimport { getPastEvents } from '../utilities'\nimport { finishLoading, startLoading } from './loading'\n\nexport const fetchStatData = createAsyncThunk(\n    'stats/fetch',\n    async (arg: { bootstrap: Bootstrap; entry: number }, thunkAPI) => {\n        thunkAPI.dispatch(fetchStatsStart())\n        thunkAPI.dispatch(startLoading())\n\n        const gameweeks = await Promise.all(\n            getPastEvents(arg.bootstrap.events).map(async event => await fetchGameweekInformation(event.id, arg.entry))\n        )\n\n        thunkAPI.dispatch(fetchStatsSuccess(gameweeks))\n        thunkAPI.dispatch(finishLoading())\n    }\n)\n\nconst stats = createSlice({\n    name: 'stats',\n    initialState: {\n        data: undefined,\n    },\n    reducers: {\n        fetchStatsStart(state) {\n            state.data = undefined\n        },\n        fetchStatsSuccess(state, action) {\n            state.data = action.payload\n        },\n    },\n})\n\nexport const { fetchStatsStart, fetchStatsSuccess } = stats.actions\n\nconst fetchPicks = async (event: number, entry: number): Promise<Picks> => {\n    const response = await fetch(\n        `https://jsonp.afeld.me/?url=${encodeURIComponent(\n            `https://fantasy.premierleague.com/api/entry/${entry}/event/${event}/picks/`\n        )}`\n    )\n    return await response.json()\n}\n\nconst fetchEvent = async (event: number): Promise<LiveEvent> => {\n    const response = await fetch(\n        `https://jsonp.afeld.me/?url=${encodeURIComponent(\n            `https://fantasy.premierleague.com/api/event/${event}/live/`\n        )}`\n    )\n    return await response.json()\n}\n\nconst fetchGameweekInformation = async (event: number, entry: number): Promise<{ pick: Picks; live: LiveEvent }> => {\n    const [pick, live] = await Promise.all([fetchPicks(event, entry), fetchEvent(event)])\n\n    return {\n        pick,\n        live,\n    }\n}\n\nexport default stats.reducer\n","import { createSlice, createAsyncThunk } from '@reduxjs/toolkit'\nimport { fetchEntry } from './entry'\nimport { fetchHistory } from './history'\nimport { finishLoading, startLoading } from './loading'\nimport { fetchStatData } from './stats'\n\nexport const fetchBootstrap = createAsyncThunk('bootstrap/fetch', async (id: number, thunkAPI) => {\n    thunkAPI.dispatch(fetchBootstrapStart())\n    thunkAPI.dispatch(startLoading())\n\n    const response = await fetch(\n        `https://jsonp.afeld.me/?url=${encodeURIComponent('https://fantasy.premierleague.com/api/bootstrap-static/')}`\n    )\n\n    const data = await response.json()\n\n    await Promise.all([\n        thunkAPI.dispatch(fetchStatData({ bootstrap: data, entry: id })),\n        thunkAPI.dispatch(fetchHistory(id)),\n        thunkAPI.dispatch(fetchEntry(id)),\n    ])\n\n    thunkAPI.dispatch(finishLoading())\n    thunkAPI.dispatch(fetchBootstrapSuccess(data))\n})\n\nconst bootstrap = createSlice({\n    name: 'bootstrap',\n    initialState: {\n        data: undefined,\n        latestFetch: null,\n    },\n    reducers: {\n        fetchBootstrapStart(state) {\n            state.data = undefined\n        },\n        fetchBootstrapSuccess(state, action) {\n            state.data = action.payload\n            localStorage.setItem('latestFetch', `${Date.now()}`)\n        },\n    },\n})\n\nexport const { fetchBootstrapStart, fetchBootstrapSuccess } = bootstrap.actions\n\nexport default bootstrap.reducer\n","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit'\nimport { fetchBootstrap } from './bootstrap'\n\nexport const fetchDataWithId = createAsyncThunk('settings/fetch', async (id: number, thunkAPI) => {\n    thunkAPI.dispatch(setId(id))\n    thunkAPI.dispatch(fetchBootstrap(id))\n})\n\nconst settings = createSlice({\n    name: 'settings',\n    initialState: {\n        id: undefined,\n        meanStrategy: 'average',\n        theme: 'light',\n    },\n    reducers: {\n        setId(state, action) {\n            state.id = action.payload\n        },\n        setMeanStrategy(state, action) {\n            state.meanStrategy = action.payload\n        },\n        setTheme(state, action) {\n            state.theme = action.payload\n        },\n    },\n})\n\nexport const { setId, setMeanStrategy, setTheme } = settings.actions\n\nexport default settings.reducer\n","import { useSelector } from 'react-redux'\nimport { RootState } from '../reducers'\n\nconst useMeanLabel: () => (suffix: string) => string = () => {\n    const strategy = useSelector((state: RootState) => state.settings.meanStrategy)\n\n    return (suffix: string) => `${strategy === 'average' ? 'Average' : 'Median'} ${suffix}`\n}\n\nexport default useMeanLabel\n","import { useSelector } from 'react-redux'\nimport { RootState } from '../reducers'\nimport { average, median } from '../utilities'\n\nconst useMeanValue: () => (series: (number | null)[]) => number = () => {\n    const strategy = useSelector((state: RootState) => state.settings.meanStrategy)\n\n    return (series: (number | null)[]) => {\n        if (strategy === 'average') {\n            return average(series)\n        }\n\n        return median(series)\n    }\n}\n\nexport default useMeanValue\n","import React from 'react'\nimport { head, last, round, sort, thousandsSeparator } from '../../utilities'\nimport { Widget } from '../Widget'\nimport { useMeanValue, useMeanLabel } from '../../hooks'\nimport { FilteredData } from '../Dashboard/Dashboard'\n\nconst TITLE = 'Historical Data'\n\ntype Props = {\n    data: FilteredData | undefined\n}\n\nconst HistoryWidget: React.FC<Props> = (props: Props) => {\n    const meanLabel = useMeanLabel()\n    const meanValue = useMeanValue()\n\n    if (!props.data) {\n        return <Widget title={TITLE} />\n    }\n\n    const history = props.data.history\n\n    const pastSeasonsByRank = sort(history.past, el => el.rank, 'asc')\n    const pastSeasonsByPoints = sort(history.past, el => el.total_points)\n\n    const bestRankedSeason = head(pastSeasonsByRank)\n    const worstRankedSeason = last(pastSeasonsByRank)\n\n    const bestPointSeason = head(pastSeasonsByPoints)\n    const worstPointSeason = last(pastSeasonsByPoints)\n\n    const top1k = pastSeasonsByRank.filter(season => season.rank <= 1000).length\n    const top10k = pastSeasonsByRank.filter(season => season.rank <= 10000).length\n    const top100k = pastSeasonsByRank.filter(season => season.rank <= 100000).length\n    const top1m = pastSeasonsByRank.filter(season => season.rank <= 1000000).length\n\n    return (\n        <Widget title={TITLE}>\n            <ul className=\"widget__list\">\n                {bestRankedSeason && (\n                    <li className=\"widget__list__item\">\n                        <span>Best Season Rank</span>\n                        <span>\n                            <b>{thousandsSeparator(bestRankedSeason.rank)}</b> ({bestRankedSeason.season_name})\n                        </span>\n                    </li>\n                )}\n                {worstRankedSeason && (\n                    <li className=\"widget__list__item\">\n                        <span>Worst Season Rank</span>\n                        <span>\n                            <b>{thousandsSeparator(worstRankedSeason.rank)}</b> ({worstRankedSeason.season_name})\n                        </span>\n                    </li>\n                )}\n                {bestPointSeason && (\n                    <li className=\"widget__list__item\">\n                        <span>Best Points Finish</span>\n                        <span>\n                            <b>{thousandsSeparator(bestPointSeason.total_points)}</b> ({bestPointSeason.season_name})\n                        </span>\n                    </li>\n                )}\n                {worstPointSeason && (\n                    <li className=\"widget__list__item\">\n                        <span>Worst Points Finish</span>\n                        <span>\n                            <b>{thousandsSeparator(worstPointSeason.total_points)}</b> ({worstPointSeason.season_name})\n                        </span>\n                    </li>\n                )}\n                <li className=\"widget__list__item\">\n                    <span>{meanLabel('Rank')}</span>\n                    <b>\n                        {thousandsSeparator(Number(round(meanValue(pastSeasonsByRank.map(season => season.rank)), 0)))}\n                    </b>\n                </li>\n                <li className=\"widget__list__item\">\n                    <span>{meanLabel('Points')}</span>\n                    <b>\n                        {thousandsSeparator(\n                            Number(round(meanValue(pastSeasonsByPoints.map(season => season.total_points)), 0))\n                        )}\n                    </b>\n                </li>\n                <li className=\"widget__list__item\">\n                    <span>Top 1K Finishes</span>\n                    <b>{top1k}</b>\n                </li>\n                <li className=\"widget__list__item\">\n                    <span>Top 10K Finishes</span>\n                    <b>{top10k}</b>\n                </li>\n                <li className=\"widget__list__item\">\n                    <span>Top 100K Finishes</span>\n                    <b>{top100k}</b>\n                </li>\n                <li className=\"widget__list__item\">\n                    <span>Top 1M Finishes</span>\n                    <b>{top1m}</b>\n                </li>\n            </ul>\n        </Widget>\n    )\n}\n\nexport default HistoryWidget\n","import React from 'react'\nimport { useSelector } from 'react-redux'\nimport { RootState } from '../../reducers'\nimport './TotsPlayer.scss'\n\ntype Props = {\n    id: number\n    points: number\n}\n\nconst TotsPlayer: React.FC<Props> = (props: Props) => {\n    const bootstrap = useSelector((state: RootState) => state.bootstrap.data)\n\n    const player = bootstrap?.elements.find(el => el.id === props.id)\n    const team = bootstrap?.teams.find(el => el.id === player?.team)\n    const position = bootstrap?.element_types.find(el => el.id === player?.element_type)\n\n    return (\n        <div className=\"tots-player\">\n            <img\n                src={`https://fantasy.premierleague.com/dist/img/shirts/special/shirt_${team?.code}${\n                    position?.singular_name_short === 'GKP' ? '_1' : ''\n                }-66.png`}\n                alt={player?.web_name}\n                className=\"tots-player__shirt\"\n            />\n            <div className=\"tots-player__detail\">\n                <div className=\"tots-player__name\">\n                    <span>{player?.web_name}</span>\n                </div>\n                <div className=\"tots-player__points\">{props.points}</div>\n            </div>\n        </div>\n    )\n}\n\nexport default TotsPlayer\n","import React from 'react'\nimport { FilteredData } from '../Dashboard/Dashboard'\nimport { TotsPlayer } from '../TotsPlayer'\nimport { Widget } from '../Widget'\nimport './TotsWidget.scss'\n\nconst TITLE = 'Team of the Season'\n\ntype Props = {\n    data: FilteredData | undefined\n}\n\nconst TotsWidget: React.FC<Props> = (props: Props) => {\n    if (!props.data) {\n        return <Widget title={TITLE} />\n    }\n\n    return (\n        <Widget title={TITLE} cssClasses=\"tots-widget\">\n            <div className=\"tots\">\n                <div className=\"tots__row\">\n                    {props.data.stats.tots.xi\n                        .filter(el => el.element.element_type === 1)\n                        .map(player => (\n                            <TotsPlayer\n                                key={player.element.id}\n                                id={player.element.id}\n                                points={player.aggregates.totals.points}\n                            />\n                        ))}\n                </div>\n                <div className=\"tots__row\">\n                    {props.data.stats.tots.xi\n                        .filter(el => el.element.element_type === 2)\n                        .map(player => (\n                            <TotsPlayer\n                                key={player.element.id}\n                                id={player.element.id}\n                                points={player.aggregates.totals.points}\n                            />\n                        ))}\n                </div>\n                <div className=\"tots__row\">\n                    {props.data.stats.tots.xi\n                        .filter(el => el.element.element_type === 3)\n                        .map(player => (\n                            <TotsPlayer\n                                key={player.element.id}\n                                id={player.element.id}\n                                points={player.aggregates.totals.points}\n                            />\n                        ))}\n                </div>\n                <div className=\"tots__row\">\n                    {props.data.stats.tots.xi\n                        .filter(el => el.element.element_type === 4)\n                        .map(player => (\n                            <TotsPlayer\n                                key={player.element.id}\n                                id={player.element.id}\n                                points={player.aggregates.totals.points}\n                            />\n                        ))}\n                </div>\n                <div className=\"tots__row tots__row--bench\">\n                    {props.data.stats.tots.bench.map(player => (\n                        <TotsPlayer\n                            key={player.element.id}\n                            id={player.element.id}\n                            points={player.aggregates.totals.points}\n                        />\n                    ))}\n                </div>\n            </div>\n        </Widget>\n    )\n}\n\nexport default TotsWidget\n","import React from 'react'\nimport './Metric.scss'\n\nconst explanations = {\n    ppg: 'Points per Game',\n    ppp: 'Points per Player',\n}\n\ntype Props = {\n    metric: 'ppg' | 'ppp'\n}\n\nconst Metric: React.FC<Props> = (props: Props) => {\n    return (\n        <abbr className=\"metric\" title={explanations[props.metric]}>\n            {props.metric}\n        </abbr>\n    )\n}\n\nexport default Metric\n","import React from 'react'\nimport { useSelector } from 'react-redux'\nimport { RootState } from '../../reducers'\n\ntype Props = {\n    label?: string\n    event?: number\n    target?: 'transfers'\n}\n\nconst SiteLink: React.FC<Props> = (props: Props) => {\n    const id = useSelector((state: RootState) => state.settings.id)\n\n    const baseUrl = `https://fantasy.premierleague.com/entry/${id}/`\n    let url = baseUrl\n\n    if (props.event) {\n        url = `${url}event/${props.event}/`\n    } else if (props.target) {\n        url = `${url}${props.target}/`\n    }\n\n    return (\n        <a href={url} target=\"_blank\" rel=\"noopener noreferrer\">\n            {props.event ? `GW ${props.event}` : props.label ? props.label : url}\n        </a>\n    )\n}\n\nexport default SiteLink\n","import React from 'react'\nimport { StatData } from '../../types'\nimport {\n    getAllPlayers,\n    getTopStatAggregate,\n    thousandsSeparator,\n    round,\n    sort,\n    head,\n    getPointsLabel,\n} from '../../utilities'\nimport { Metric } from '../Metric'\nimport { Player } from '../Player'\nimport { SiteLink } from '../SiteLink'\nimport { Widget } from '../Widget'\nimport { useMeanValue } from '../../hooks'\nimport { FilteredData } from '../Dashboard/Dashboard'\n\nconst TITLE = 'Player Stats'\n\nconst renderTopBenchGWReturner = (returner: StatData): JSX.Element | null => {\n    const week = head(returner.data)\n\n    if (!week) {\n        return null\n    }\n\n    return (\n        <li className=\"widget__list__item\">\n            <span>Top GW Bench Returner</span>\n            <span>\n                <Player\n                    id={returner.element.id}\n                    suffix={() => (\n                        <>\n                            {' '}\n                            ({getPointsLabel(week.rawPoints || 0)}, <SiteLink event={week.event.id} />)\n                        </>\n                    )}\n                    reversed\n                />\n            </span>\n        </li>\n    )\n}\n\ntype Props = {\n    data: FilteredData | undefined\n}\n\nconst PlayerStatsWidget: React.FC<Props> = (props: Props) => {\n    const meanValue = useMeanValue()\n\n    if (!props.data) {\n        return <Widget title={TITLE} />\n    }\n\n    const allPlayers = getAllPlayers(props.data.stats.data)\n\n    const reds = getTopStatAggregate(allPlayers, 'redCards')\n    const yellows = getTopStatAggregate(allPlayers, 'yellowCards')\n    const goals = getTopStatAggregate(allPlayers, 'goals')\n    const assists = getTopStatAggregate(allPlayers, 'assists')\n    const cleanSheets = getTopStatAggregate(allPlayers, 'cleanSheets')\n    const goalsConceded = getTopStatAggregate(allPlayers, 'goalsConceded')\n    const ownGoals = getTopStatAggregate(allPlayers, 'ownGoals')\n    const saves = getTopStatAggregate(allPlayers, 'saves')\n    const minutes = getTopStatAggregate(allPlayers, 'minutes')\n    const penaltiesMissed = getTopStatAggregate(allPlayers, 'penaltiesMissed')\n    const penaltiesSaved = getTopStatAggregate(allPlayers, 'penaltiesSaved')\n    const inDreamteam = getTopStatAggregate(allPlayers, 'timesInDreamteam')\n    const bps = getTopStatAggregate(allPlayers, 'bps')\n    const bonus = getTopStatAggregate(allPlayers, 'bonus')\n\n    const mostCaptaincies = head(sort(allPlayers, el => el.aggregates.totals.captaincies))\n\n    const topReturner = head(\n        sort(\n            allPlayers.map(player => ({\n                ...player,\n                data: sort([...player.data], el => el.points || 0),\n            })),\n            el => head(el.data)?.points || 0\n        )\n    )\n\n    const topBenchGWReturner = head(\n        sort(\n            allPlayers\n                .map(player => ({\n                    ...player,\n                    data: sort(\n                        player.data.filter(data => data.multiplier === 0),\n                        el => el.rawPoints || 0\n                    ),\n                }))\n                .filter(player => player.data.length),\n            el => head(el.data)?.rawPoints || 0\n        )\n    )\n\n    const topSeasonReturner = head(sort(allPlayers, el => el.aggregates.totals.points))\n    const topBenchReturner = head(sort(allPlayers, el => el.aggregates.totals.benchPoints))\n\n    const weeks = props.data.history.current.length\n\n    const idealCaptain = head(\n        sort(\n            Object.entries(\n                Array.from(Array(weeks).keys())\n                    .map((el, index) => head(sort(allPlayers, el => el.data[index].rawPoints || 0)))\n                    .reduce(\n                        (acc, curr) =>\n                            curr\n                                ? {\n                                      ...acc,\n                                      [curr.element.id]: (acc[curr.element.id] ? acc[curr.element.id] : 0) + 1,\n                                  }\n                                : acc,\n                        {} as Record<number, number>\n                    )\n            ),\n            el => el[1]\n        )\n    )\n\n    return (\n        <Widget title={TITLE}>\n            <ul className=\"widget__list\">\n                {topReturner && (\n                    <li className=\"widget__list__item\">\n                        <span>Top GW Returner</span>\n                        <span>\n                            <Player\n                                id={topReturner.element.id}\n                                suffix={() => {\n                                    const week = head(topReturner.data)\n\n                                    if (!week) {\n                                        return null\n                                    }\n\n                                    return (\n                                        <>\n                                            {' '}\n                                            ({getPointsLabel(week.points || 0)}, <SiteLink event={week.event.id} />)\n                                        </>\n                                    )\n                                }}\n                                reversed\n                            />\n                        </span>\n                    </li>\n                )}\n                {topSeasonReturner && (\n                    <li className=\"widget__list__item\">\n                        <span>Top Season Returner</span>\n                        {topSeasonReturner.aggregates.totals.starts > 0 && (\n                            <Player\n                                id={topSeasonReturner.element.id}\n                                suffix={() => (\n                                    <>\n                                        {' '}\n                                        ({getPointsLabel(topSeasonReturner.aggregates.totals.points)},{' '}\n                                        {round(\n                                            meanValue(\n                                                topSeasonReturner.data\n                                                    .filter(data => (data.multiplier || 0) > 0)\n                                                    .map(data => data.points)\n                                            )\n                                        )}{' '}\n                                        <Metric metric=\"ppg\" />)\n                                    </>\n                                )}\n                                reversed\n                            />\n                        )}\n                    </li>\n                )}\n                {topBenchGWReturner && renderTopBenchGWReturner(topBenchGWReturner)}\n                {topBenchReturner && (\n                    <li className=\"widget__list__item\">\n                        <span>Most Points While Benched</span>\n                        {topBenchReturner.aggregates.totals.benched > 0 && (\n                            <Player\n                                id={topBenchReturner.element.id}\n                                suffix={() => (\n                                    <>\n                                        {' '}\n                                        ({getPointsLabel(topBenchReturner.aggregates.totals.benchPoints)},{' '}\n                                        {round(\n                                            meanValue(\n                                                topBenchReturner.data\n                                                    .filter(data => data.multiplier === 0)\n                                                    .map(data => data.rawPoints)\n                                            )\n                                        )}{' '}\n                                        <Metric metric=\"ppg\" />)\n                                    </>\n                                )}\n                                reversed\n                            />\n                        )}\n                    </li>\n                )}\n                {goals && goals.aggregates.totals.goals > 0 && (\n                    <li className=\"widget__list__item\">\n                        <span>Top Scorer</span>\n                        <Player id={goals.element.id} suffix={`${goals.aggregates.totals.goals}`} reversed />\n                    </li>\n                )}\n                {assists && assists.aggregates.totals.assists > 0 && (\n                    <li className=\"widget__list__item\">\n                        <span>Most Assists</span>\n                        <Player id={assists.element.id} suffix={`${assists.aggregates.totals.assists}`} reversed />\n                    </li>\n                )}\n                {ownGoals && ownGoals.aggregates.totals.ownGoals > 0 && (\n                    <li className=\"widget__list__item\">\n                        <span>Most Own Goals</span>\n                        <Player id={ownGoals.element.id} suffix={`${ownGoals.aggregates.totals.ownGoals}`} reversed />\n                    </li>\n                )}\n                {goalsConceded && goalsConceded.aggregates.totals.goalsConceded > 0 && (\n                    <li className=\"widget__list__item\">\n                        <span>Most Goals Conceded</span>\n                        <Player\n                            id={goalsConceded.element.id}\n                            suffix={`${goalsConceded.aggregates.totals.goalsConceded}`}\n                            reversed\n                        />\n                    </li>\n                )}\n                {cleanSheets && cleanSheets.aggregates.totals.cleanSheets > 0 && (\n                    <li className=\"widget__list__item\">\n                        <span>Most Clean Sheets</span>\n                        <Player\n                            id={cleanSheets.element.id}\n                            suffix={`${cleanSheets.aggregates.totals.cleanSheets}`}\n                            reversed\n                        />\n                    </li>\n                )}\n                {saves && saves.aggregates.totals.saves > 0 && (\n                    <li className=\"widget__list__item\">\n                        <span>Most Saves</span>\n                        <Player id={saves.element.id} suffix={`${saves.aggregates.totals.saves}`} reversed />\n                    </li>\n                )}\n                {penaltiesMissed && penaltiesMissed.aggregates.totals.penaltiesMissed > 0 && (\n                    <li className=\"widget__list__item\">\n                        <span>Most Penalties Missed</span>\n                        <Player\n                            id={penaltiesMissed.element.id}\n                            suffix={`${penaltiesMissed.aggregates.totals.penaltiesMissed}`}\n                            reversed\n                        />\n                    </li>\n                )}\n                {penaltiesSaved && penaltiesSaved.aggregates.totals.penaltiesSaved > 0 && (\n                    <li className=\"widget__list__item\">\n                        <span>Most Penalties Saved</span>\n                        <Player\n                            id={penaltiesSaved.element.id}\n                            suffix={`${penaltiesSaved.aggregates.totals.penaltiesSaved}`}\n                            reversed\n                        />\n                    </li>\n                )}\n                {minutes && minutes.aggregates.totals.minutes > 0 && (\n                    <li className=\"widget__list__item\">\n                        <span>Most Minutes</span>\n                        <Player\n                            id={minutes.element.id}\n                            suffix={`${thousandsSeparator(minutes.aggregates.totals.minutes as number)}`}\n                            reversed\n                        />\n                    </li>\n                )}\n                {reds && reds.aggregates.totals.redCards > 0 && (\n                    <li className=\"widget__list__item\">\n                        <span>Most Red Cards</span>\n                        <Player id={reds.element.id} suffix={`${reds.aggregates.totals.redCards}`} reversed />\n                    </li>\n                )}\n                {yellows && yellows.aggregates.totals.yellowCards > 0 && (\n                    <li className=\"widget__list__item\">\n                        <span>Most Yellow Cards</span>\n                        <Player id={yellows.element.id} suffix={`${yellows.aggregates.totals.yellowCards}`} reversed />\n                    </li>\n                )}\n                {bonus && bonus.aggregates.totals.bonus > 0 && (\n                    <li className=\"widget__list__item\">\n                        <span>Most Bonus Points</span>\n                        <Player id={bonus.element.id} suffix={`${bonus.aggregates.totals.bonus}`} reversed />\n                    </li>\n                )}\n                {bps && bps.aggregates.totals.bps > 0 && (\n                    <li className=\"widget__list__item\">\n                        <span>Highest Total BPS</span>\n                        <Player\n                            id={bps.element.id}\n                            suffix={`${thousandsSeparator(bps.aggregates.totals.bps)}`}\n                            reversed\n                        />\n                    </li>\n                )}\n                {inDreamteam && inDreamteam.aggregates.totals.timesInDreamteam > 0 && (\n                    <li className=\"widget__list__item\">\n                        <span>Most Times in Dreamteam</span>\n                        <Player\n                            id={inDreamteam.element.id}\n                            suffix={`${inDreamteam.aggregates.totals.timesInDreamteam}`}\n                            reversed\n                        />\n                    </li>\n                )}\n                {mostCaptaincies && mostCaptaincies.aggregates.totals.captaincies > 0 && (\n                    <li className=\"widget__list__item\">\n                        <span>Most Captaincies</span>\n                        <Player\n                            id={mostCaptaincies.element.id}\n                            suffix={`${mostCaptaincies.aggregates.totals.captaincies}`}\n                            reversed\n                        />\n                    </li>\n                )}\n                {idealCaptain && (\n                    <li className=\"widget__list__item\">\n                        <span>Ideal Captain</span>\n                        <Player id={Number(idealCaptain[0])} suffix={`${idealCaptain[1]}`} reversed />\n                    </li>\n                )}\n            </ul>\n        </Widget>\n    )\n}\n\nexport default PlayerStatsWidget\n","import React from 'react'\nimport { Widget } from '../Widget'\nimport { thousandsSeparator, sumNumbers, round, sort, getPointsLabel, getGWCountLabel } from '../../utilities'\nimport { Metric } from '../Metric'\nimport { useMeanValue } from '../../hooks'\nimport { FilteredData } from '../Dashboard/Dashboard'\n\ntype FormationInformation = {\n    count: number\n    points: (number | null)[]\n}\n\nconst TITLE = 'Formations'\n\nconst formatFormation = (formation: string) =>\n    sumNumbers(formation.split('-').map(position => Number(position))) > 10 ? 'Bench Boost' : formation\n\ntype Props = {\n    data: FilteredData | undefined\n}\n\nconst FormationWidget: React.FC<Props> = (props: Props) => {\n    const meanValue = useMeanValue()\n\n    if (!props.data) {\n        return <Widget title={TITLE} />\n    }\n\n    const history = props.data.history\n    const stats = props.data.stats.data\n\n    const weeks = history.current.length\n\n    const formations = Object.values(stats)\n        .map(position => {\n            const selections = position.map(player => player.data.map(data => data.multiplier))\n\n            return Array.from(Array(weeks).keys()).map(\n                (el, index) => selections.map(player => (player[index] || 0) > 0).filter(val => !!val).length\n            )\n        })\n        .slice(1)\n\n    const data = Array.from(Array(weeks).keys())\n        .map((el, index) => formations.map(entries => entries[index]).join('-'))\n        .reduce(\n            (acc, formation, index) => ({\n                ...acc,\n                [formation]: {\n                    count: (acc[formation] ? acc[formation].count : 0) + 1,\n                    points: [\n                        ...(acc[formation] ? acc[formation].points : ([] as number[])),\n                        history.current[index].points,\n                    ],\n                },\n            }),\n            {} as Record<string, FormationInformation>\n        )\n\n    return (\n        <Widget title={TITLE}>\n            {Object.entries(data).length > 0 && (\n                <ul className=\"widget__list\">\n                    {sort(Object.entries(data), el => el[1].count).map(([formation, information]) => {\n                        return (\n                            <li className=\"widget__list__item\" key={formation}>\n                                <span>{formatFormation(formation)}</span>\n                                <div>\n                                    <div>\n                                        <b>{getGWCountLabel(information.count)}</b>\n                                    </div>\n                                    <div className=\"muted\">\n                                        {getPointsLabel(thousandsSeparator(sumNumbers(information.points)))},{' '}\n                                        {round(meanValue(information.points))} <Metric metric=\"ppg\" />\n                                    </div>\n                                </div>\n                            </li>\n                        )\n                    })}\n                </ul>\n            )}\n        </Widget>\n    )\n}\n\nexport default FormationWidget\n","import React from 'react'\nimport { thousandsSeparator, sumNumbers, round, sort, getPointsLabel, getGWCountLabel } from '../../utilities'\nimport { Player } from '../Player'\nimport { Widget } from '../Widget'\nimport { Metric } from '../Metric'\nimport { useMeanValue } from '../../hooks'\nimport { FilteredData } from '../Dashboard/Dashboard'\n\nconst TITLE = 'Captains'\n\ntype Props = {\n    data: FilteredData | undefined\n}\n\nconst CaptainWidget: React.FC<Props> = (props: Props) => {\n    const meanValue = useMeanValue()\n\n    if (!props.data) {\n        return <Widget title={TITLE} />\n    }\n\n    const stats = props.data.stats.data\n\n    const captains = sort(\n        Object.values(stats)\n            .map(position => {\n                return position\n                    .map(player => ({\n                        player,\n                        data: player.data.filter(data => (data.multiplier || 0) > 1),\n                    }))\n                    .filter(player => player.data.length > 0)\n            })\n            .reduce((acc, curr) => acc.concat(curr), []),\n        el => el.data.length\n    )\n\n    return (\n        <Widget title={TITLE}>\n            {captains.length > 0 && (\n                <ul className=\"widget__list\">\n                    {captains.map(captain => {\n                        const points = captain.data.map(data => data.points)\n\n                        return (\n                            <li className=\"widget__list__item\" key={captain.player.element.id}>\n                                <Player id={captain.player.element.id} />\n                                <div>\n                                    <div>\n                                        <b>{getGWCountLabel(captain.data.length)}</b>\n                                    </div>\n                                    <div className=\"muted\">\n                                        {getPointsLabel(thousandsSeparator(sumNumbers(points)))},{' '}\n                                        {round(meanValue(points))} <Metric metric=\"ppg\" />\n                                    </div>\n                                </div>\n                            </li>\n                        )\n                    })}\n                </ul>\n            )}\n        </Widget>\n    )\n}\n\nexport default CaptainWidget\n","import React from 'react'\nimport { useSelector } from 'react-redux'\nimport { useMeanLabel, useMeanValue } from '../../hooks'\nimport { RootState } from '../../reducers'\nimport { Widget } from '../Widget'\nimport { head, last, round, sort, thousandsSeparator, getPointsLabel } from '../../utilities'\nimport { SiteLink } from '../SiteLink'\nimport { FilteredData } from '../Dashboard/Dashboard'\n\nconst TITLE = 'Gameweeks'\n\ntype Props = {\n    data: FilteredData | undefined\n}\n\nconst GameweekWidget: React.FC<Props> = (props: Props) => {\n    const bootstrap = useSelector((state: RootState) => state.bootstrap.data)\n\n    const meanLabel = useMeanLabel()\n    const meanValue = useMeanValue()\n\n    if (!props.data || !bootstrap) {\n        return <Widget title={TITLE} />\n    }\n\n    const history = props.data.history\n\n    const differences = history.current.map((week, index) => week.points - bootstrap.events[index].average_entry_score)\n    const sortedRanks = sort(history.current, el => el.rank, 'asc')\n\n    const gws = sort(history.current, el => el.points)\n\n    const bestGW = head(gws)\n    const worstGW = last(gws)\n\n    const bestGWRank = head(sortedRanks)\n    const worstGWRank = last(sortedRanks)\n\n    return (\n        <Widget title={TITLE}>\n            <ul className=\"widget__list\">\n                <li className=\"widget__list__item\">\n                    <span>{meanLabel('Difference to GW Average')}</span>\n                    <b>{getPointsLabel(round(meanValue(differences)))}</b>\n                </li>\n                <li className=\"widget__list__item\">\n                    <span>Times Above GW Average</span>\n                    <b>{differences.filter(diff => diff >= 0).length}</b>\n                </li>\n                <li className=\"widget__list__item\">\n                    <span>Times Below GW Average</span>\n                    <b>{differences.filter(diff => diff < 0).length}</b>\n                </li>\n                <li className=\"widget__list__item\">\n                    <span>{meanLabel('GW Rank')}</span>\n                    <b>{thousandsSeparator(Number(round(meanValue(history.current.map(week => week.rank)))))}</b>\n                </li>\n                {bestGW && (\n                    <li className=\"widget__list__item\">\n                        <span>Best Gameweek</span>\n                        <span>\n                            <b>{getPointsLabel(bestGW.points)}</b> (\n                            <SiteLink event={bestGW.event} />)\n                        </span>\n                    </li>\n                )}\n                {worstGW && (\n                    <li className=\"widget__list__item\">\n                        <span>Worst Gameweek</span>\n                        <span>\n                            <b>{getPointsLabel(worstGW.points)}</b> (\n                            <SiteLink event={worstGW.event} />)\n                        </span>\n                    </li>\n                )}\n                {bestGWRank && (\n                    <li className=\"widget__list__item\">\n                        <span>Best GW Rank</span>\n                        <span>\n                            <b>{thousandsSeparator(bestGWRank.rank)}</b> (\n                            <SiteLink event={bestGWRank.event} />)\n                        </span>\n                    </li>\n                )}\n                {worstGWRank && (\n                    <li className=\"widget__list__item\">\n                        <span>Worst GW Rank</span>\n                        <span>\n                            <b>{thousandsSeparator(worstGWRank.rank)}</b> (\n                            <SiteLink event={worstGWRank.event} />)\n                        </span>\n                    </li>\n                )}\n            </ul>\n        </Widget>\n    )\n}\n\nexport default GameweekWidget\n","import React from 'react'\nimport { useSelector } from 'react-redux'\nimport { useMeanValue } from '../../hooks'\nimport { RootState } from '../../reducers'\nimport { thousandsSeparator, sumNumbers, round, reduce, getPointsLabel, pluralise } from '../../utilities'\nimport { Widget } from '../Widget'\nimport { Metric } from '../Metric'\nimport { FilteredData } from '../Dashboard/Dashboard'\n\nconst TITLE = 'Positions'\n\ntype Props = {\n    data: FilteredData | undefined\n}\n\nconst PositionsWidget: React.FC<Props> = (props: Props) => {\n    const bootstrap = useSelector((state: RootState) => state.bootstrap.data)\n\n    const meanValue = useMeanValue()\n\n    if (!props.data || !bootstrap) {\n        return <Widget title={TITLE} />\n    }\n\n    const stats = props.data.stats.data\n\n    const positions: Record<string, number> = Object.entries(stats).reduce(\n        (acc, [elementType, elements]) => ({\n            ...acc,\n            [elementType]: elements.length,\n        }),\n        {}\n    )\n\n    return (\n        <Widget title={TITLE}>\n            {Object.entries(positions).length > 0 && (\n                <ul className=\"widget__list\">\n                    <li className=\"widget__list__item\">\n                        <span>Total</span>\n                        <b>\n                            {pluralise(\n                                reduce(Object.values(positions), el => el),\n                                'Player',\n                                'Players'\n                            )}\n                        </b>\n                    </li>\n                    {Object.entries(positions).map(([elementType, elements]) => {\n                        const totalPoints = stats[Number(elementType)].map(player => player.aggregates.totals.points)\n\n                        return (\n                            <li className=\"widget__list__item\" key={elementType}>\n                                <span>\n                                    {bootstrap.element_types.find(el => el.id === Number(elementType))?.plural_name}\n                                </span>\n                                <div>\n                                    <div>\n                                        <b>{pluralise(elements, 'Player', 'Players')}</b>\n                                    </div>\n                                    <div className=\"muted\">\n                                        {getPointsLabel(thousandsSeparator(sumNumbers(totalPoints)))},{' '}\n                                        {round(meanValue(totalPoints))} <Metric metric=\"ppp\" />\n                                    </div>\n                                </div>\n                            </li>\n                        )\n                    })}\n                </ul>\n            )}\n        </Widget>\n    )\n}\n\nexport default PositionsWidget\n","import React from 'react'\nimport { useSelector } from 'react-redux'\nimport { RootState } from '../../reducers'\nimport { Widget } from '../Widget'\nimport {\n    getAllPlayers,\n    head,\n    thousandsSeparator,\n    sumNumbers,\n    reduce,\n    round,\n    getPointsLabel,\n    last,\n} from '../../utilities'\nimport { SiteLink } from '../SiteLink'\nimport { StatData } from '../../types'\nimport { StatAggregateTotals } from '../../types'\nimport { FilteredData } from '../Dashboard/Dashboard'\n\nconst TITLE = 'Season'\n\nconst getAggregateValues = (players: StatData[], key: keyof StatAggregateTotals): number =>\n    sumNumbers(players.map(player => player.aggregates.totals[key]))\n\ntype Props = {\n    data: FilteredData | undefined\n}\n\nconst SeasonWidget: React.FC<Props> = (props: Props) => {\n    const rawHistory = useSelector((state: RootState) => state.history.data)\n    const entry = useSelector((state: RootState) => state.entry.data)\n\n    if (!props.data || !entry) {\n        return <Widget title={TITLE} />\n    }\n\n    const history = props.data.history\n\n    const allPlayers = getAllPlayers(props.data.stats.data)\n\n    const reds = getAggregateValues(allPlayers, 'redCards')\n    const yellows = getAggregateValues(allPlayers, 'yellowCards')\n    const goals = getAggregateValues(allPlayers, 'goals')\n    const assists = getAggregateValues(allPlayers, 'assists')\n    const cleanSheets = getAggregateValues(allPlayers, 'cleanSheets')\n    const goalsConceded = getAggregateValues(allPlayers, 'goalsConceded')\n    const ownGoals = getAggregateValues(allPlayers, 'ownGoals')\n    const saves = getAggregateValues(allPlayers, 'saves')\n    const minutes = getAggregateValues(allPlayers, 'minutes')\n    const penaltiesMissed = getAggregateValues(allPlayers, 'penaltiesMissed')\n    const penaltiesSaved = getAggregateValues(allPlayers, 'penaltiesSaved')\n    const inDreamteam = getAggregateValues(allPlayers, 'timesInDreamteam')\n    const bps = getAggregateValues(allPlayers, 'bps')\n    const bonus = getAggregateValues(allPlayers, 'bonus')\n\n    const totalTransfers = reduce(history.current, el => el.event_transfers)\n    const totalHits = reduce(history.current, el => el.event_transfers_cost / 4)\n    const totalBenched = reduce(history.current, el => el.points_on_bench)\n\n    const tc = allPlayers\n        .find(player => [...player.data].findIndex(data => data.multiplier === 3) !== -1)\n        ?.data.find(data => data.multiplier === 3)\n\n    const bbWeek = head(Object.entries(props.data.stats.chips).find(([gw, chip]) => chip === 'bboost') || [])\n\n    const bbPoints = bbWeek\n        ? sumNumbers(\n              allPlayers\n                  .filter(player => ([...player.data][Number(bbWeek) - 1]?.position || 0) > 11)\n                  .map(player => [...player.data][Number(bbWeek) - 1]?.points || 0)\n          )\n        : null\n\n    const doubleDigitHauls = reduce(\n        allPlayers.map(player => [...player.data].filter(data => (data.rawPoints || 0) > 9).length),\n        el => el\n    )\n\n    const totalPlays = reduce(\n        allPlayers.map(player => player.data.filter(data => data.multiplier !== null).length),\n        el => el\n    )\n\n    const totalPoints =\n        (last(history.current)?.total_points || 0) -\n        (rawHistory?.current.find(event => event.event === (head(history.current)?.event || 1) - 1)?.total_points || 0)\n\n    return (\n        <Widget title={TITLE}>\n            <ul className=\"widget__list\">\n                <li className=\"widget__list__item\">\n                    <span>Total Transfers Made</span>\n                    <span>\n                        <SiteLink target=\"transfers\" label={`${totalTransfers}`} />\n                    </span>\n                </li>\n                <li className=\"widget__list__item\">\n                    <span>Total Hits Taken</span>\n                    <span>\n                        <b>{totalHits}</b> ({getPointsLabel(totalHits * -4)},{' '}\n                        {entry.summary_overall_points > 0 ? round(((totalHits * 4) / totalPoints) * 100) : 0}\n                        %)\n                    </span>\n                </li>\n                <li className=\"widget__list__item\">\n                    <span>Total Points</span>\n                    <b>{getPointsLabel(thousandsSeparator(totalPoints))}</b>\n                </li>\n                <li className=\"widget__list__item\">\n                    <span>Total Points on Bench</span>\n                    <b>{getPointsLabel(thousandsSeparator(totalBenched))}</b>\n                </li>\n                <li className=\"widget__list__item\">\n                    <span>Double Digit Hauls</span>\n                    <span>\n                        <b>{doubleDigitHauls}</b>\n                        {totalPlays > 0 && ` (${round(doubleDigitHauls / totalPlays)}%)`}\n                    </span>\n                </li>\n                {tc !== undefined && (\n                    <li className=\"widget__list__item\">\n                        <span>Triple Captain Points Gained</span>\n                        <span>\n                            <b>{getPointsLabel((tc.points || 0) / 3)}</b> (\n                            <SiteLink event={tc.event.id} />)\n                        </span>\n                    </li>\n                )}\n                {bbPoints !== null && (\n                    <li className=\"widget__list__item\">\n                        <span>Bench Boost Points Gained</span>\n                        <span>\n                            <b>{getPointsLabel(bbPoints)}</b> (\n                            <SiteLink event={Number(bbWeek)} />)\n                        </span>\n                    </li>\n                )}\n                <li className=\"widget__list__item\">\n                    <span>Total Goals Scored</span>\n                    <b>{goals}</b>\n                </li>\n                <li className=\"widget__list__item\">\n                    <span>Total Assists</span>\n                    <b>{assists}</b>\n                </li>\n                <li className=\"widget__list__item\">\n                    <span>Total Own Goals</span>\n                    <b>{ownGoals}</b>\n                </li>\n                <li className=\"widget__list__item\">\n                    <span>Total Goals Conceded</span>\n                    <b>{goalsConceded}</b>\n                </li>\n                <li className=\"widget__list__item\">\n                    <span>Total Clean Sheets</span>\n                    <b>{cleanSheets}</b>\n                </li>\n                <li className=\"widget__list__item\">\n                    <span>Total Saves</span>\n                    <b>{saves}</b>\n                </li>\n                <li className=\"widget__list__item\">\n                    <span>Total Penalties Missed</span>\n                    <b>{penaltiesMissed}</b>\n                </li>\n                <li className=\"widget__list__item\">\n                    <span>Total Penalties Saved</span>\n                    <b>{penaltiesSaved}</b>\n                </li>\n                <li className=\"widget__list__item\">\n                    <span>Total Minutes Played</span>\n                    <b>{thousandsSeparator(minutes)}</b>\n                </li>\n                <li className=\"widget__list__item\">\n                    <span>Total Red Cards</span>\n                    <b>{reds}</b>\n                </li>\n                <li className=\"widget__list__item\">\n                    <span>Total Yellow Cards</span>\n                    <b>{yellows}</b>\n                </li>\n                <li className=\"widget__list__item\">\n                    <span>Total Bonus Points</span>\n                    <b>{thousandsSeparator(bonus)}</b>\n                </li>\n                <li className=\"widget__list__item\">\n                    <span>Total BPS</span>\n                    <b>{thousandsSeparator(bps)}</b>\n                </li>\n                <li className=\"widget__list__item\">\n                    <span>Total Times in Dreamteam</span>\n                    <b>{inDreamteam}</b>\n                </li>\n            </ul>\n        </Widget>\n    )\n}\n\nexport default SeasonWidget\n","import React from 'react'\nimport { Team as TeamType } from '../../types'\nimport './Team.scss'\n\ntype Props = {\n    team: TeamType\n}\n\nconst Team: React.FC<Props> = (props: Props) => (\n    <div className=\"team\">\n        <img\n            src={`https://fantasy.premierleague.com/dist/img/shirts/special/shirt_${props.team.code}-66.png`}\n            alt={props.team.short_name}\n            className=\"player__shirt\"\n        />\n        <span className=\"team__name\">{props.team.name}</span>\n    </div>\n)\n\nexport default Team\n","import React from 'react'\nimport { useSelector } from 'react-redux'\nimport { RootState } from '../../reducers'\nimport { Team } from '../Team'\nimport { Widget } from '../Widget'\nimport { getAllPlayers, getPointsLabel, round, sort, sumNumbers } from '../../utilities'\nimport { Metric } from '../Metric'\nimport { useMeanValue } from '../../hooks'\nimport { FilteredData } from '../Dashboard/Dashboard'\nimport './TeamsWidget.scss'\n\nconst TITLE = 'Teams'\n\ntype Props = {\n    data: FilteredData | undefined\n}\n\nconst TeamsWidget: React.FC<Props> = (props: Props) => {\n    const bootstrap = useSelector((state: RootState) => state.bootstrap.data)\n\n    const meanValue = useMeanValue()\n\n    if (!props.data || !bootstrap) {\n        return <Widget title={TITLE} />\n    }\n\n    const stats = props.data.stats.data\n\n    const counts = Object.values(stats)\n        .reduce((acc: number[], curr) => [...acc, ...curr.map(el => el.element.team)], [])\n        .reduce((acc: { [key: number]: number }, curr) => ({ ...acc, [curr]: (acc[Number(curr)] || 0) + 1 }), {})\n\n    const teams = sort(bootstrap.teams, el => counts[el.id] || 0)\n\n    const allPlayers = getAllPlayers(stats)\n\n    return (\n        <Widget title={TITLE} cssClasses=\"teams-widget\">\n            {teams.length > 0 && (\n                <ul className=\"widget__list\">\n                    {teams.map(team => {\n                        const players = allPlayers.filter(player => player.element.team === team.id)\n                        const points = players.map(player => player.aggregates.totals.points)\n\n                        return (\n                            <li className=\"teams-widget__item\" key={team.id}>\n                                <div className=\"teams-widget__header\">\n                                    <Team team={team} />\n                                    <div>\n                                        <div>\n                                            <b>{counts[team.id] || 0}</b>\n                                        </div>\n                                        <div className=\"muted\">\n                                            {getPointsLabel(sumNumbers(points))},{' '}\n                                            {players.length > 0 ? round(meanValue(points)) : 0} <Metric metric=\"ppp\" />\n                                        </div>\n                                    </div>\n                                </div>\n                                <div>\n                                    {Object.entries(stats).map(([position, players]) => {\n                                        const positionPlayers = players.filter(\n                                            player => player.element.team === team.id\n                                        )\n\n                                        if (!positionPlayers.length) {\n                                            return null\n                                        }\n\n                                        return (\n                                            <div\n                                                className=\"teams-widget__position\"\n                                                data-position={\n                                                    bootstrap.element_types.find(el => el.id === Number(position))\n                                                        ?.plural_name_short\n                                                }\n                                                key={position}\n                                            >\n                                                {sort(\n                                                    positionPlayers.filter(player => player.element.team === team.id),\n                                                    el => el.aggregates.totals.points\n                                                ).map(player => (\n                                                    <div key={player.element.id}>\n                                                        {player.element.web_name} (\n                                                        {getPointsLabel(player.aggregates.totals.points)})\n                                                    </div>\n                                                ))}\n                                            </div>\n                                        )\n                                    })}\n                                </div>\n                            </li>\n                        )\n                    })}\n                </ul>\n            )}\n        </Widget>\n    )\n}\n\nexport default TeamsWidget\n","import React from 'react'\n\nconst SwapIcon: React.FC = () => {\n    return (\n        <svg\n            xmlns=\"http://www.w3.org/2000/svg\"\n            width=\"12\"\n            height=\"12\"\n            viewBox=\"0 0 24 24\"\n            fill=\"#aaa\"\n            className=\"swap-icon\"\n        >\n            <path d=\"M21 12l-18 12v-24z\" />\n        </svg>\n    )\n}\n\nexport default SwapIcon\n","import React from 'react'\nimport { getAllPlayers, getPointsLabel, head, sort } from '../../utilities'\nimport { Player } from '../Player'\nimport { Widget } from '../Widget'\nimport { SwapIcon } from '../SwapIcon'\nimport { SiteLink } from '../SiteLink'\nimport { FilteredData } from '../Dashboard/Dashboard'\nimport './CaptainOpportunityWidget.scss'\n\nconst TITLE = 'Missed Captaincies'\n\ntype Props = {\n    data: FilteredData | undefined\n}\n\nconst CaptainOpportunityWidget: React.FC<Props> = (props: Props) => {\n    if (!props.data) {\n        return <Widget title={TITLE} />\n    }\n\n    const stats = props.data.stats.data\n    const history = props.data.history\n\n    const allPlayers = getAllPlayers(stats)\n    const weeks = history.current.length\n\n    const improvements = Array.from(Array(weeks).keys()).map((el, index) => ({\n        top: head(sort(allPlayers, el => el.data[index].rawPoints || 0)),\n        captain: allPlayers.find(player => (player.data[index].multiplier || 0) > 1),\n    }))\n\n    return (\n        <Widget title={TITLE} cssClasses=\"captain-opportunity-widget\">\n            {improvements.length > 0 && (\n                <ul className=\"widget__list\">\n                    {improvements.map((improvement, index) => {\n                        if (!improvement.captain || !improvement.top) {\n                            return null\n                        }\n\n                        const captainData = improvement.captain.data[index]\n                        const topData = improvement.top.data[index]\n\n                        if (captainData.rawPoints === topData.rawPoints) {\n                            return null\n                        }\n\n                        return (\n                            <li className=\"widget__list__item\" key={captainData.event.id}>\n                                <div className=\"captain-opportunity-widget__group\">\n                                    <div className=\"captain-opportunity-widget__player\">\n                                        <b>OUT:</b> <Player id={improvement.captain.element.id} />\n                                    </div>\n                                    <div className=\"captain-opportunity-widget__player\">\n                                        <b>IN:</b> <Player id={improvement.top.element.id} />\n                                    </div>\n                                </div>\n                                <div className=\"captain-opportunity-widget__swap-info\">\n                                    <b>{getPointsLabel((captainData.rawPoints || 0) * 2)}</b> <SwapIcon />{' '}\n                                    <b>{getPointsLabel((topData.rawPoints || 0) * 2)} </b> (\n                                    <SiteLink event={captainData.event.id} />)\n                                </div>\n                            </li>\n                        )\n                    })}\n                </ul>\n            )}\n        </Widget>\n    )\n}\n\nexport default CaptainOpportunityWidget\n","import React, { useCallback, useEffect, useState } from 'react'\nimport classNames from 'classnames'\nimport { StatData } from '../../types'\nimport { normaliseDiacritics } from '../../utilities'\nimport { Button } from '../Button'\nimport { Widget } from '../Widget'\nimport { ModalInput } from '../ModalInput'\nimport './BasePlayerWidget.scss'\n\ntype Props = {\n    title: string\n    max: number\n    players: StatData[]\n    renderItem: (player: StatData) => JSX.Element | null\n    cssClasses?: string\n}\n\nconst renderList = (players: StatData[], renderItem: (player: StatData) => JSX.Element | null): JSX.Element => (\n    <ul className=\"widget__list\">\n        {players.map(player => {\n            const item = renderItem(player)\n\n            if (!item) {\n                return null\n            }\n\n            return (\n                <li className=\"widget__list__item\" key={player.element.id}>\n                    {item}\n                </li>\n            )\n        })}\n    </ul>\n)\n\nconst BasePlayerWidget: React.FC<Props> = (props: Props) => {\n    const [value, setValue] = useState<string>('')\n    const [showExtended, setShowExtended] = useState<boolean>(false)\n\n    const callbackRef = useCallback(inputElement => inputElement?.focus(), [])\n\n    const close = useCallback(() => {\n        setShowExtended(false)\n        setValue('')\n    }, [setShowExtended, setValue])\n\n    useEffect(() => {\n        const listener = (e: KeyboardEvent) => {\n            if (e.key === 'Escape') {\n                close()\n            }\n        }\n\n        document.addEventListener('keyup', listener)\n\n        return () => document.removeEventListener('keyup', listener)\n    }, [close])\n\n    const filteredPlayers = value\n        ? props.players.filter(player =>\n              normaliseDiacritics(player.element.web_name)\n                  .toLowerCase()\n                  .includes(normaliseDiacritics(value).toLowerCase())\n          )\n        : props.players\n\n    const topPlayers = props.players.slice(0, props.max)\n\n    return (\n        <>\n            <Widget title={props.title} cssClasses={classNames('base-player-widget', props.cssClasses)}>\n                {props.players.length > 0 && (\n                    <>\n                        {renderList(topPlayers, props.renderItem)}\n                        {props.players.length > props.max && (\n                            <Button label=\"Show all\" onClick={() => setShowExtended(true)} />\n                        )}\n                    </>\n                )}\n            </Widget>\n            {showExtended && (\n                <div className=\"modal modal--players\">\n                    <div className=\"modal__backdrop\" onClick={() => close()}></div>\n                    <Widget title={props.title} onClose={() => close()}>\n                        <ModalInput\n                            label=\"Name\"\n                            placeholder=\"Filter by name\"\n                            id=\"query\"\n                            value={value}\n                            onChange={value => setValue(value)}\n                            innerRef={callbackRef}\n                        />\n                        <div className=\"widget__scroller\">\n                            {filteredPlayers.length > 0 ? (\n                                renderList(filteredPlayers, props.renderItem)\n                            ) : (\n                                <div className=\"widget__empty\">No data available.</div>\n                            )}\n                        </div>\n                    </Widget>\n                </div>\n            )}\n        </>\n    )\n}\n\nexport default BasePlayerWidget\n","import React from 'react'\nimport { Widget } from '../Widget'\nimport { getAllPlayers, getGWCountLabel, sort } from '../../utilities'\nimport { Player } from '../Player'\nimport { BasePlayerWidget } from '../BasePlayerWidget'\nimport { FilteredData } from '../Dashboard/Dashboard'\n\nconst MAX_ITEMS = 10\n\ntype Props = {\n    title: string\n    metric: 'selections' | 'starts' | 'benched'\n    data: FilteredData | undefined\n}\n\nconst SelectionWidget: React.FC<Props> = (props: Props) => {\n    if (!props.data) {\n        return <Widget title={props.title} />\n    }\n\n    const stats = props.data.stats.data\n\n    const elements = sort(getAllPlayers(stats), el => el.aggregates.totals[props.metric])\n\n    return (\n        <BasePlayerWidget\n            title={props.title}\n            players={elements}\n            max={MAX_ITEMS}\n            renderItem={element => (\n                <>\n                    <Player id={element.element.id} />\n                    <b>{getGWCountLabel(element.aggregates.totals[props.metric])}</b>\n                </>\n            )}\n        />\n    )\n}\n\nexport default SelectionWidget\n","import React from 'react'\nimport { Widget } from '../Widget'\nimport { getAllPlayers, getGWCountLabel, round } from '../../utilities'\nimport { Player } from '../Player'\nimport { BasePlayerWidget } from '../BasePlayerWidget'\nimport { FilteredData } from '../Dashboard/Dashboard'\n\ntype Props = {\n    title: string\n    data: FilteredData | undefined\n    top?: boolean\n}\n\nconst MAX_ITEMS = 10\n\nconst DifferenceWidget: React.FC<Props> = (props: Props) => {\n    if (!props.data) {\n        return <Widget title={props.title} />\n    }\n\n    const stats = props.data.stats.data\n\n    const elements = getAllPlayers(stats).map(element => {\n        const selections = element.aggregates.totals.selections\n        const starts = element.aggregates.totals.starts\n        const benched = element.aggregates.totals.benched\n\n        return {\n            ...element,\n            benched,\n            benchedPercentage: (benched / selections) * 100,\n            starts,\n            startsPercentage: (starts / selections) * 100,\n        }\n    })\n\n    const starters = [...elements].sort((a, b) => {\n        const percentageDiff = b.startsPercentage - a.startsPercentage\n        return percentageDiff === 0 ? b.starts - a.starts : percentageDiff\n    })\n\n    const benchwarmers = [...elements].sort((a, b) => {\n        const percentageDiff = b.benchedPercentage - a.benchedPercentage\n        return percentageDiff === 0 ? b.benched - a.benched : percentageDiff\n    })\n\n    return (\n        <BasePlayerWidget\n            title={props.title}\n            players={props.top ? starters : benchwarmers}\n            max={MAX_ITEMS}\n            renderItem={element => (\n                <>\n                    <Player id={element.element.id} />\n                    <div>\n                        <div>\n                            <b>\n                                {round(\n                                    ((props.top\n                                        ? element.aggregates.totals.starts\n                                        : element.aggregates.totals.benched) /\n                                        element.aggregates.totals.selections) *\n                                        100\n                                )}\n                                %\n                            </b>\n                        </div>\n                        <div className=\"muted\">\n                            {getGWCountLabel(\n                                props.top ? element.aggregates.totals.starts : element.aggregates.totals.benched\n                            )}\n                        </div>\n                    </div>\n                </>\n            )}\n        />\n    )\n}\n\nexport default DifferenceWidget\n","import React from 'react'\nimport { useSelector } from 'react-redux'\nimport { AreaChart, Area, XAxis, YAxis, ResponsiveContainer, CartesianGrid, Tooltip } from 'recharts'\nimport { RootState } from '../../reducers'\nimport { Widget } from '../Widget'\nimport { getShortName, head, sort, thousandsSeparator, thousandsShorthand } from '../../utilities'\nimport { FilteredData } from '../Dashboard/Dashboard'\n\nconst TITLE = 'Overall Rank Evolution'\n\ntype Props = {\n    data: FilteredData | undefined\n}\n\nconst OverallRankWidget: React.FC<Props> = (props: Props) => {\n    const bootstrap = useSelector((state: RootState) => state.bootstrap.data)\n    const theme = useSelector((state: RootState) => state.settings.theme)\n\n    if (!props.data || !bootstrap) {\n        return <Widget title={TITLE} />\n    }\n\n    const history = props.data.history\n\n    let data = history.current.map(entry => {\n        const event = bootstrap.events.find(event => event.id === entry.event)\n\n        return {\n            name: `GW ${event ? getShortName(event) : entry.event}`,\n            value: entry.overall_rank,\n        }\n    })\n\n    const max = (head(sort([...data], el => el.value))?.value || 0) * 1.05\n\n    data = [...data].map(element => ({\n        ...element,\n        max,\n    }))\n\n    return (\n        <Widget title={TITLE}>\n            <div className=\"chart chart--reversed\">\n                <ResponsiveContainer height={300} width=\"100%\">\n                    <AreaChart data={data} margin={{ bottom: 45, left: 15, right: 15 }}>\n                        <Area type=\"monotone\" dataKey=\"max\" fill=\"#177B47\" fillOpacity=\"1\" />\n                        <Area\n                            type=\"monotone\"\n                            dataKey=\"value\"\n                            stroke=\"#177B47\"\n                            fill={theme === 'dark' ? '#3a4556' : '#fff'}\n                            fillOpacity=\"1\"\n                        />\n                        <YAxis\n                            reversed={true}\n                            tickFormatter={value => thousandsShorthand(value)}\n                            domain={[1, max]}\n                            interval=\"preserveStartEnd\"\n                            tickCount={10}\n                        />\n                        <XAxis dataKey=\"name\" angle={-90} textAnchor=\"end\" interval=\"preserveStartEnd\" />\n                        <CartesianGrid stroke=\"rgba(192, 192, 192, 0.5)\" strokeDasharray=\"3 3\" />\n                        <Tooltip\n                            isAnimationActive={false}\n                            formatter={(value, name) =>\n                                name === 'max' ? [undefined, undefined] : [thousandsSeparator(Number(value)), 'Rank']\n                            }\n                            separator=\": \"\n                        />\n                    </AreaChart>\n                </ResponsiveContainer>\n            </div>\n        </Widget>\n    )\n}\n\nexport default OverallRankWidget\n","import React from 'react'\nimport { useSelector } from 'react-redux'\nimport { AreaChart, Area, XAxis, YAxis, ResponsiveContainer, CartesianGrid, Tooltip } from 'recharts'\nimport { RootState } from '../../reducers'\nimport { Widget } from '../Widget'\nimport { getShortName, initialCaps } from '../../utilities'\nimport { FilteredData } from '../Dashboard/Dashboard'\n\nconst TITLE = 'Gameweek Points'\n\ntype Props = {\n    data: FilteredData | undefined\n}\n\nconst OverallRankWidget: React.FC<Props> = (props: Props) => {\n    const bootstrap = useSelector((state: RootState) => state.bootstrap.data)\n\n    if (!props.data || !bootstrap) {\n        return <Widget title={TITLE} />\n    }\n\n    const history = props.data.history\n\n    const data = history.current.map(entry => {\n        const event = bootstrap.events.find(event => event.id === entry.event)\n\n        return {\n            name: `GW ${event ? getShortName(event) : entry.event}`,\n            points: entry.points,\n            bench: entry.points_on_bench,\n        }\n    })\n\n    return (\n        <Widget title={TITLE}>\n            <div className=\"chart\">\n                <ResponsiveContainer height={300} width=\"100%\">\n                    <AreaChart data={data} margin={{ bottom: 45, left: 15, right: 15 }}>\n                        <Area type=\"monotone\" dataKey=\"points\" stroke=\"#177B47\" fill=\"#177B47\" fillOpacity=\"1\" />\n                        <Area type=\"monotone\" dataKey=\"bench\" stroke=\"#00FF87\" fill=\"#00FF87\" fillOpacity=\"1\" />\n                        <YAxis interval=\"preserveStartEnd\" />\n                        <XAxis dataKey=\"name\" angle={-90} textAnchor=\"end\" interval=\"preserveStartEnd\" />\n                        <CartesianGrid stroke=\"rgba(192, 192, 192, 0.5)\" strokeDasharray=\"3 3\" />\n                        <Tooltip\n                            isAnimationActive={false}\n                            formatter={(value, name) => [value, initialCaps(name)]}\n                            separator=\": \"\n                        />\n                    </AreaChart>\n                </ResponsiveContainer>\n            </div>\n        </Widget>\n    )\n}\n\nexport default OverallRankWidget\n","import React from 'react'\nimport { useSelector } from 'react-redux'\nimport { AreaChart, Area, XAxis, YAxis, ResponsiveContainer, CartesianGrid, Tooltip } from 'recharts'\nimport { RootState } from '../../reducers'\nimport { Widget } from '../Widget'\nimport { getShortName, initialCaps } from '../../utilities'\nimport { FilteredData } from '../Dashboard/Dashboard'\n\nconst TITLE = 'Team Value Evolution'\n\ntype Props = {\n    data: FilteredData | undefined\n}\n\nconst ValueWidget: React.FC<Props> = (props: Props) => {\n    const bootstrap = useSelector((state: RootState) => state.bootstrap.data)\n\n    if (!props.data || !bootstrap) {\n        return <Widget title={TITLE} />\n    }\n\n    const history = props.data.history\n\n    const data = history.current.map(entry => {\n        const event = bootstrap.events.find(event => event.id === entry.event)\n\n        return {\n            name: `GW ${event ? getShortName(event) : entry.event}`,\n            value: entry.value + entry.bank,\n        }\n    })\n\n    return (\n        <Widget title={TITLE}>\n            <div className=\"chart\">\n                <ResponsiveContainer height={300} width=\"100%\">\n                    <AreaChart data={data} margin={{ bottom: 45, left: 15, right: 15 }}>\n                        <Area type=\"monotone\" dataKey=\"value\" stroke=\"#177B47\" fill=\"#177B47\" fillOpacity=\"1\" />\n                        <YAxis\n                            tickFormatter={value => `£${value / 10}`}\n                            domain={['auto', 'auto']}\n                            interval=\"preserveStartEnd\"\n                        />\n                        <XAxis dataKey=\"name\" angle={-90} textAnchor=\"end\" interval=\"preserveStartEnd\" />\n                        <CartesianGrid stroke=\"rgba(192, 192, 192, 0.5)\" strokeDasharray=\"3 3\" />\n                        <Tooltip\n                            isAnimationActive={false}\n                            formatter={(value, name) => [`£${Number(value) / 10}`, initialCaps(name)]}\n                            separator=\": \"\n                        />\n                    </AreaChart>\n                </ResponsiveContainer>\n            </div>\n        </Widget>\n    )\n}\n\nexport default ValueWidget\n","import React from 'react'\nimport { getAllPlayers, getGWCountLabel, head, round, sort } from '../../utilities'\nimport { FilteredData } from '../Dashboard/Dashboard'\nimport { Player } from '../Player'\nimport { Widget } from '../Widget'\n\nconst TITLE = 'Wrong Captains'\n\ntype Props = {\n    data: FilteredData | undefined\n}\n\nconst WrongCaptainWidget: React.FC<Props> = (props: Props) => {\n    if (!props.data) {\n        return <Widget title={TITLE} />\n    }\n\n    const stats = props.data.stats.data\n    const history = props.data.history\n\n    const allPlayers = getAllPlayers(stats)\n    const weeks = history.current.length\n\n    const improvements = Array.from(Array(weeks).keys())\n        .map((el, index) => ({\n            top: head(sort(allPlayers, el => el.data[index].rawPoints || 0)),\n            captain: allPlayers.find(player => (player.data[index].multiplier || 0) > 1),\n        }))\n        .filter(\n            (element, index) =>\n                (element.top?.data[index].rawPoints || 0) > (element.captain?.data[index].rawPoints || 0)\n        )\n        .reduce(\n            (acc, curr) =>\n                curr.captain\n                    ? {\n                          ...acc,\n                          [curr.captain.element.id]:\n                              (acc[curr.captain.element.id] ? acc[curr.captain.element.id] : 0) + 1,\n                      }\n                    : acc,\n            {} as Record<number, number>\n        )\n\n    const timesUsed = allPlayers.reduce((acc, curr) => {\n        return {\n            ...acc,\n            [curr.element.id]: curr.aggregates.totals.captaincies,\n        }\n    }, {} as Record<number, number>)\n\n    return (\n        <Widget title={TITLE}>\n            {Object.entries(improvements).length > 0 && (\n                <ul className=\"widget__list\">\n                    {sort(Object.entries(improvements), el => el[1]).map(([player, count]) => (\n                        <li className=\"widget__list__item\" key={player}>\n                            <Player id={Number(player)} />\n                            <div>\n                                <div>\n                                    <b>\n                                        {count} out of {getGWCountLabel(timesUsed[Number(player)])}\n                                    </b>\n                                </div>\n                                <div className=\"muted\">{round((count / timesUsed[Number(player)]) * 100, 1)}%</div>\n                            </div>\n                        </li>\n                    ))}\n                </ul>\n            )}\n        </Widget>\n    )\n}\n\nexport default WrongCaptainWidget\n","import React from 'react'\nimport { useSelector } from 'react-redux'\nimport { RootState } from '../../reducers'\nimport { getAllPlayers, getPointsLabel, head, last, round, sort } from '../../utilities'\nimport { BasePlayerWidget } from '../BasePlayerWidget'\nimport { FilteredData } from '../Dashboard/Dashboard'\nimport { Player } from '../Player'\nimport { Widget } from '../Widget'\n\nconst MAX_ITEMS = 10\nconst TITLE = 'Total Points Contribution'\n\ntype Props = {\n    data: FilteredData | undefined\n}\n\nconst ContributionWidget: React.FC<Props> = (props: Props) => {\n    const entry = useSelector((state: RootState) => state.entry.data)\n    const rawHistory = useSelector((state: RootState) => state.history.data)\n\n    if (!entry || !props.data || !rawHistory) {\n        return <Widget title={TITLE} />\n    }\n\n    const history = props.data.history\n    const stats = props.data.stats.data\n\n    const totalPoints =\n        (last(history.current)?.total_points || 0) -\n        (rawHistory?.current.find(event => event.event === (head(history.current)?.event || 1))?.total_points || 0)\n\n    const contributions = sort(getAllPlayers(stats), el => el.aggregates.totals.points)\n\n    return (\n        <BasePlayerWidget\n            title={TITLE}\n            players={contributions}\n            max={MAX_ITEMS}\n            renderItem={player => (\n                <>\n                    <Player id={player.element.id} />\n                    <div>\n                        <div>\n                            <b>{round((player.aggregates.totals.points / totalPoints) * 100)}%</b>\n                        </div>\n                        <div className=\"muted\">{getPointsLabel(player.aggregates.totals.points)}</div>\n                    </div>\n                </>\n            )}\n        />\n    )\n}\n\nexport default ContributionWidget\n","import React from 'react'\nimport { Widget } from '../Widget'\nimport { getAllPlayers, getPointsLabel, round, sort } from '../../utilities'\nimport { Player } from '../Player'\nimport { getGWCountLabel } from '../../utilities/strings'\nimport { StatData } from '../../types'\nimport { BasePlayerWidget } from '../BasePlayerWidget'\nimport { FilteredData } from '../Dashboard/Dashboard'\n\ntype Props = {\n    title: string\n    data: FilteredData | undefined\n    top?: boolean\n}\n\nconst MAX_ITEMS = 10\n\nconst getPointsShare = (player: StatData): number =>\n    100 - (player.aggregates.totals.rawPoints / player.element.total_points) * 100\n\nconst MissedPointsShareWidget: React.FC<Props> = (props: Props) => {\n    if (!props.data) {\n        return <Widget title={props.title} />\n    }\n\n    const stats = props.data.stats.data\n    const history = props.data.history\n\n    const elements = sort(\n        getAllPlayers(stats).filter(player => player.aggregates.totals.points > 0),\n        el => getPointsShare(el),\n        props.top ? 'desc' : 'asc'\n    )\n\n    return (\n        <BasePlayerWidget\n            title={props.title}\n            players={elements}\n            max={MAX_ITEMS}\n            renderItem={element => (\n                <>\n                    <Player id={element.element.id} />\n                    <div>\n                        <div>\n                            <b>{element.element.total_points > 0 && `${round(getPointsShare(element))}%`}</b>\n                        </div>\n                        <div className=\"muted\">\n                            {getPointsLabel(element.element.total_points - element.aggregates.totals.rawPoints)} in{' '}\n                            {getGWCountLabel(history.current.length - element.aggregates.totals.selections)}\n                        </div>\n                    </div>\n                </>\n            )}\n        />\n    )\n}\n\nexport default MissedPointsShareWidget\n","import React from 'react'\nimport { getAllPlayers, getPointsLabel, sort, thousandsSeparator } from '../../utilities'\nimport { BasePlayerWidget } from '../BasePlayerWidget'\nimport { FilteredData } from '../Dashboard/Dashboard'\nimport { Player } from '../Player'\nimport { Widget } from '../Widget'\n\nconst MAX_ITEMS = 15\nconst TITLE = 'Other Players'\n\ntype Props = {\n    data: FilteredData | undefined\n}\n\nconst NearMissesWidget: React.FC<Props> = (props: Props) => {\n    if (!props.data) {\n        return <Widget title={TITLE} />\n    }\n\n    const totsIds = props.data.stats.tots.xi.concat(props.data.stats.tots.bench).map(player => player.element.id)\n    const players = sort(\n        getAllPlayers(props.data.stats.data).filter(player => !totsIds.includes(player.element.id)),\n        el => el.aggregates.totals.points\n    )\n\n    return (\n        <BasePlayerWidget\n            title={TITLE}\n            players={players}\n            max={MAX_ITEMS}\n            renderItem={player => (\n                <>\n                    <Player id={player.element.id} />\n                    <b>{getPointsLabel(thousandsSeparator(player.aggregates.totals.points))}</b>\n                </>\n            )}\n        />\n    )\n}\n\nexport default NearMissesWidget\n","import React from 'react'\nimport { useMeanValue } from '../../hooks'\nimport { StatAggregateStreaks } from '../../types'\nimport { getAllPlayers, getGWCountLabel, getPointsLabel, round } from '../../utilities'\nimport { BasePlayerWidget } from '../BasePlayerWidget'\nimport { FilteredData } from '../Dashboard/Dashboard'\nimport { Metric } from '../Metric'\nimport { Player } from '../Player'\nimport { SiteLink } from '../SiteLink'\nimport { Widget } from '../Widget'\n\nconst MAX_ITEMS = 10\n\ntype Props = {\n    title: string\n    metric: keyof StatAggregateStreaks\n    data: FilteredData | undefined\n    showDetailedStats?: boolean\n}\n\nconst StreakWidget: React.FC<Props> = (props: Props) => {\n    const meanValue = useMeanValue()\n\n    if (!props.data) {\n        return <Widget title={props.title} />\n    }\n\n    const stats = props.data.stats.data\n\n    const streakers = getAllPlayers(stats)\n        .sort((a, b) => {\n            const aStreak = a.aggregates.streaks[props.metric]\n            const bStreak = b.aggregates.streaks[props.metric]\n\n            const aStreakLength = a.aggregates.streaks[props.metric]?.length || 0\n            const bStreakLength = b.aggregates.streaks[props.metric]?.length || 0\n\n            if (bStreakLength - aStreakLength === 0) {\n                return (bStreak?.totalPoints || 0) - (aStreak?.totalPoints || 0)\n            }\n\n            return bStreakLength - aStreakLength\n        })\n        .filter(streaker => streaker.aggregates.streaks[props.metric] !== null)\n\n    return (\n        <BasePlayerWidget\n            title={props.title}\n            players={streakers}\n            max={MAX_ITEMS}\n            renderItem={streaker => {\n                const streak = streaker.aggregates.streaks[props.metric]\n\n                if (!streak) {\n                    return null\n                }\n\n                return (\n                    <>\n                        <Player id={streaker.element.id} />\n                        <div>\n                            <div className=\"duration\">\n                                <SiteLink event={streak.start.id} /> – <SiteLink event={streak.end.id} />\n                            </div>\n                            <div className=\"muted\">\n                                {props.showDetailedStats ? (\n                                    <>\n                                        {getGWCountLabel(streak.length)}, {getPointsLabel(streak.totalPoints || 0)},{' '}\n                                        {round(meanValue(streak.points || []))} <Metric metric=\"ppg\" />\n                                    </>\n                                ) : (\n                                    <div className=\"muted\">{getGWCountLabel(streak.length)}</div>\n                                )}\n                            </div>\n                        </div>\n                    </>\n                )\n            }}\n        />\n    )\n}\n\nexport default StreakWidget\n","import React, { ChangeEvent } from 'react'\nimport classNames from 'classnames'\nimport './Checkbox.scss'\n\ntype Props = {\n    label: string\n    checked: boolean\n    onChange: (event: ChangeEvent<HTMLInputElement>) => void\n    reversed?: boolean\n}\n\nconst Checkbox: React.FC<Props> = (props: Props) => (\n    <div className={classNames('checkbox', { 'checkbox--reversed': props.reversed })}>\n        <label className=\"checkbox__label\">\n            <input type=\"checkbox\" className=\"checkbox__element\" checked={props.checked} onChange={props.onChange} />\n            <div className=\"checkbox__visual\"></div>\n            {props.label}\n        </label>\n    </div>\n)\n\nexport default Checkbox\n","import React from 'react'\nimport classNames from 'classnames'\nimport { Button } from '../Button'\nimport './SegmentedControl.scss'\n\ntype SegmentedOption = {\n    label: string\n    value: string\n}\n\ntype Props = {\n    label: string\n    options: SegmentedOption[]\n    selected: string\n    setSelected: (value: string) => void\n}\n\nconst SegmentedControl: React.FC<Props> = (props: Props) => {\n    return (\n        <div className=\"segmented-control\">\n            <label>{props.label}</label>\n            {props.options.length > 0 && (\n                <div className=\"segmented-control__options\">\n                    {props.options.map(option => (\n                        <div\n                            className={classNames('segmented-control__option', {\n                                'segmented-control__option--selected': props.selected === option.value,\n                            })}\n                        >\n                            <Button label={option.label} onClick={() => props.setSelected(option.value)} />\n                        </div>\n                    ))}\n                </div>\n            )}\n        </div>\n    )\n}\n\nexport default SegmentedControl\n","import React, { useEffect, useState } from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { Checkbox } from '../Checkbox'\nimport { RootState } from '../../reducers'\nimport { setMeanStrategy, setTheme } from '../../reducers/settings'\nimport { SegmentedControl } from '../SegmentedControl'\nimport { Modal } from '../Modal'\nimport './SettingsModal.scss'\n\ntype Props = {\n    onClose?: () => void\n}\n\nconst meanOptions = [\n    { label: 'Average', value: 'average' },\n    { label: 'Median', value: 'median' },\n]\n\nconst SettingsModal: React.FC<Props> = (props: Props) => {\n    const settings = useSelector((state: RootState) => state.settings)\n    const [checked, setChecked] = useState<boolean>(settings.theme === 'dark')\n    const [strategy, setStrategy] = useState<string>(settings.meanStrategy)\n\n    const dispatch = useDispatch()\n\n    useEffect(() => {\n        const listener = (e: KeyboardEvent) => {\n            if (e.key === 'Escape') {\n                props.onClose?.()\n            }\n        }\n\n        document.addEventListener('keyup', listener)\n\n        return () => document.removeEventListener('keyup', listener)\n    }, [props])\n\n    useEffect(() => {\n        if ((checked && settings.theme === 'light') || (!checked && settings.theme === 'dark')) {\n            dispatch(setTheme(checked ? 'dark' : 'light'))\n        }\n    }, [checked, dispatch, settings.theme])\n\n    useEffect(() => {\n        if (strategy !== settings.meanStrategy) {\n            dispatch(setMeanStrategy(strategy))\n        }\n    }, [dispatch, settings.meanStrategy, strategy])\n\n    return (\n        <Modal title=\"Settings\" onClose={() => props.onClose?.()} cssClasses=\"modal--settings\">\n            <SegmentedControl\n                label=\"Display values as\"\n                options={meanOptions}\n                selected={strategy}\n                setSelected={value => setStrategy(value)}\n            />\n            <Checkbox label=\"Use dark mode\" checked={checked} onChange={e => setChecked(e.target.checked)} reversed />\n        </Modal>\n    )\n}\n\nexport default SettingsModal\n","import React, { useState, useEffect, useRef } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport classNames from 'classnames'\nimport Select, { ValueType } from 'react-select'\nimport { useParams, useHistory } from 'react-router-dom'\nimport debounce from 'lodash/debounce'\nimport ReactSlider from 'react-slider'\nimport { Bootstrap, StatData, Stats, History, Range } from '../../types'\nimport { RootState } from '../../reducers'\nimport { Player } from '../Player'\nimport { Widget } from '../Widget'\nimport { Spinner } from '../Spinner'\nimport {\n    getChipAbbreviation,\n    thousandsSeparator,\n    validateTeamId,\n    round,\n    sort,\n    getPointsLabel,\n    last,\n    filterStatData,\n    filterHistoryData,\n    head,\n    getPastEvents,\n} from '../../utilities'\nimport { TeamModal } from '../TeamModal'\nimport { fetchDataWithId } from '../../reducers/settings'\nimport { Button } from '../Button'\nimport { HistoryWidget } from '../HistoryWidget'\nimport { TotsWidget } from '../TotsWidget'\nimport { PlayerStatsWidget } from '../PlayerStatsWidget'\nimport { FormationWidget } from '../FormationWidget'\nimport { CaptainWidget } from '../CaptainWidget'\nimport { GameweekWidget } from '../GameweekWidget'\nimport { PositionsWidget } from '../PositionsWidget'\nimport { Metric } from '../Metric'\nimport { SeasonWidget } from '../SeasonWidget'\nimport { TeamsWidget } from '../TeamsWidget'\nimport { CaptainOpportunityWidget } from '../CaptainOpportunityWidget'\nimport { SelectionWidget } from '../SelectionWidget'\nimport { DifferenceWidget } from '../DifferenceWidget'\nimport { OverallRankWidget } from '../OverallRankWidget'\nimport { PointsWidget } from '../PointsWidget'\nimport { ValueWidget } from '../ValueWidget'\nimport { SiteLink } from '../SiteLink'\nimport { WrongCaptainWidget } from '../WrongCaptainWidget'\nimport { ContributionWidget } from '../ContributionWidget'\nimport { MissedPointsShareWidget } from '../MissedPointsShareWidget'\nimport { NearMissesWidget } from '../NearMissesWidget'\nimport { StreakWidget } from '../StreakWidget'\nimport { SettingsModal } from '../SettingsModal'\nimport { useMeanValue } from '../../hooks'\nimport './Dashboard.scss'\n\ntype OptionType = {\n    value: string\n    label: string\n}\n\ntype DashboardParams = {\n    team?: string\n}\n\nexport type FilteredData = {\n    history: History\n    stats: {\n        data: Stats\n        chips: {\n            [key: number]: string\n        }\n        tots: {\n            xi: StatData[]\n            bench: StatData[]\n        }\n    }\n}\n\nconst sortings: { [key: string]: (statData: StatData) => number } = {\n    points: el => el.aggregates.totals.points,\n    selection: el => el.aggregates.totals.selections,\n    start: el => el.aggregates.totals.starts,\n    bench: el => el.aggregates.totals.benched,\n    alphabet: (statData: StatData): number => {\n        return statData.element.web_name.toLowerCase().charCodeAt(0) * -1\n    },\n}\n\nconst sortOptions = [\n    { value: 'points', label: 'Total Points' },\n    { value: 'selection', label: 'Most Selected' },\n    { value: 'start', label: 'Most Started' },\n    { value: 'bench', label: 'Most Benched' },\n    { value: 'alphabet', label: 'Alphabetically' },\n]\n\nconst renderPlayerList = (\n    stats: Stats,\n    bootstrap: Bootstrap,\n    sorting: OptionType,\n    meanValue: (series: (number | null)[]) => number\n): JSX.Element[] =>\n    Object.entries(stats).map(([elementType, statData]) => (\n        <div key={elementType}>\n            <li className=\"dashboard__category\">\n                <span>{bootstrap?.element_types.find(el => el.id === Number(elementType))?.plural_name_short}</span>\n                <span>{statData.length}</span>\n            </li>\n            {sort(\n                statData.filter(element => element.data.filter(pick => pick.multiplier !== null).length),\n                el => sortings[sorting.value](el)\n            ).map(element => (\n                <li key={element.element.id} className=\"dashboard__item\">\n                    <div className=\"dashboard__player\">\n                        <Player id={element.element.id} extended />\n                    </div>\n                    <div className=\"dashboard__stats\">\n                        {element.data.map(item => (\n                            <span\n                                key={item.event.id}\n                                className={classNames('dashboard__stat', {\n                                    'dashboard__stat--benched': item.multiplier === 0,\n                                    'dashboard__stat--triple': item.multiplier === 3,\n                                    'dashboard__stat--started': item.multiplier,\n                                })}\n                            />\n                        ))}\n                    </div>\n                    <div className=\"dashboard__totals\">\n                        <span className=\"dashboard__stat\">\n                            <div>\n                                <b>{element.aggregates.totals.selections}</b>{' '}\n                                <span className=\"muted\">\n                                    (\n                                    {element.data.length\n                                        ? round((element.aggregates.totals.selections / element.data.length) * 100)\n                                        : 0}\n                                    %)\n                                </span>\n                            </div>\n                        </span>\n                        <span className=\"dashboard__stat\">\n                            <div>\n                                <b>{element.aggregates.totals.starts}</b>{' '}\n                                <span className=\"muted\">\n                                    (\n                                    {element.data.length\n                                        ? round((element.aggregates.totals.starts / element.data.length) * 100)\n                                        : 0}\n                                    %)\n                                </span>\n                            </div>\n                        </span>\n                        <span className=\"dashboard__stat\">\n                            <div>\n                                <b>{element.aggregates.totals.benched}</b>{' '}\n                                <span className=\"muted\">\n                                    (\n                                    {element.data.length\n                                        ? round((element.aggregates.totals.benched / element.data.length) * 100)\n                                        : 0}\n                                    %)\n                                </span>\n                            </div>\n                        </span>\n                        <span className=\"dashboard__stat\">\n                            <div>\n                                <b>{element.aggregates.totals.points}</b>{' '}\n                                <span className=\"muted\">\n                                    (\n                                    {round(\n                                        meanValue(\n                                            element.data\n                                                .filter(data => (data.multiplier || 0) > 0)\n                                                .map(data => data.points)\n                                        )\n                                    )}{' '}\n                                    <Metric metric=\"ppg\" />)\n                                </span>\n                            </div>\n                        </span>\n                    </div>\n                </li>\n            ))}\n        </div>\n    ))\n\nconst Dashboard: React.FC = () => {\n    const [sort, setSort] = useState<ValueType<OptionType>>(sortOptions[0])\n    const [isSettingsOpen, setIsSettingsOpen] = useState<boolean>(false)\n    const [range, setRange] = useState<Range>({ start: 0, end: 37 })\n    const [filteredData, setFilteredData] = useState<FilteredData | undefined>(undefined)\n\n    const isLoading = useSelector((state: RootState) => state.loading > 0)\n\n    const bootstrap = useSelector((state: RootState) => state.bootstrap.data)\n\n    const rawStatsData = useSelector((state: RootState) => state.stats.data)\n\n    const id = useSelector((state: RootState) => state.settings.id)\n    const theme = useSelector((state: RootState) => state.settings.theme)\n\n    const entry = useSelector((state: RootState) => state.entry.data)\n\n    const rawHistory = useSelector((state: RootState) => state.history.data)\n\n    const { team } = useParams<DashboardParams>()\n    const browserHistory = useHistory()\n\n    const [isModalOpen, setIsModalOpen] = useState(!team)\n\n    const dashboardRef = useRef<HTMLDivElement>(null)\n\n    const dispatch = useDispatch()\n    const meanValue = useMeanValue()\n\n    useEffect(() => {\n        document.documentElement.setAttribute('data-theme', theme)\n    }, [theme])\n\n    useEffect(() => {\n        if (id && !team) {\n            browserHistory.push(`/${id}/`)\n        } else if (team && validateTeamId(team)) {\n            setIsModalOpen(false)\n\n            if (Number(team) !== id) {\n                dispatch(fetchDataWithId(Number(team)))\n            }\n        } else {\n            browserHistory.push('/')\n        }\n    }, [team, browserHistory, dispatch, id])\n\n    useEffect(() => {\n        setTimeout(() => {\n            if (dashboardRef && dashboardRef.current) {\n                dashboardRef.current.scrollTo(dashboardRef.current.scrollWidth, 0)\n            }\n        }, 1)\n    }, [rawStatsData])\n\n    useEffect(() => {\n        setIsModalOpen(!team)\n    }, [team])\n\n    const debouncedFiltering = useRef(\n        debounce(async (rawStatsData, rawHistory, bootstrap, range) => {\n            const [filteredStatData, filteredHistoryData] = await Promise.all([\n                filterStatData(rawStatsData, bootstrap, range),\n                filterHistoryData(rawHistory, range),\n            ])\n\n            setFilteredData({\n                stats: filteredStatData,\n                history: filteredHistoryData,\n            })\n        }, 300)\n    ).current\n\n    useEffect(() => {\n        if (!rawStatsData || !bootstrap || !rawHistory) {\n            return\n        }\n\n        debouncedFiltering(rawStatsData, rawHistory, bootstrap, range)\n    }, [rawStatsData, bootstrap, rawHistory, range, debouncedFiltering, dispatch])\n\n    const totalPoints = filteredData\n        ? (last(filteredData.history.current)?.total_points || 0) -\n          (rawHistory?.current.find(event => event.event === (head(filteredData.history.current)?.event || 1) - 1)\n              ?.total_points || 0)\n        : 0\n\n    return (\n        <div className=\"app\">\n            {isModalOpen && <TeamModal onClose={() => setIsModalOpen(false)} />}\n            {isSettingsOpen && <SettingsModal onClose={() => setIsSettingsOpen(false)} />}\n            <div\n                className={classNames('app__loading', {\n                    'app__loading--hidden': !isLoading,\n                })}\n            >\n                <Spinner />\n            </div>\n            <div className=\"app__content\">\n                {entry && (\n                    <header className=\"dashboard__entry\">\n                        <Widget>\n                            <h1 className=\"dashboard__title\">\n                                <SiteLink label={entry.name} />\n                                <div className=\"small muted\">\n                                    {getPointsLabel(thousandsSeparator(totalPoints))} — Rank{' '}\n                                    {thousandsSeparator(entry.summary_overall_rank)}\n                                </div>\n                            </h1>\n                            <div>\n                                <Button onClick={() => setIsSettingsOpen(true)} label=\"Settings\" />\n                                {id !== undefined && (\n                                    <Button\n                                        onClick={() => setIsModalOpen(true)}\n                                        label=\"Change Team\"\n                                        disabled={isLoading}\n                                    />\n                                )}\n                            </div>\n                        </Widget>\n                    </header>\n                )}\n                <div className=\"dashboard__widgets dashboard__widgets--split\">\n                    <TotsWidget data={filteredData} />\n                    <NearMissesWidget data={filteredData} />\n                </div>\n                <div className=\"dashboard__widgets dashboard__widgets-duo\">\n                    <PlayerStatsWidget data={filteredData} />\n                    <SeasonWidget data={filteredData} />\n                    <HistoryWidget data={filteredData} />\n                    <GameweekWidget data={filteredData} />\n                    <PositionsWidget data={filteredData} />\n                    <FormationWidget data={filteredData} />\n                </div>\n                <h2>\n                    <span>Players</span>\n                </h2>\n                <div className=\"app__meta\">\n                    <label className=\"app__meta__label\">Sort by</label>\n                    <Select\n                        options={sortOptions}\n                        value={sort}\n                        onChange={option => setSort(option)}\n                        styles={{\n                            container: provided => ({ ...provided, width: '100%' }),\n                            menu: provided => ({ ...provided, zIndex: 20 }),\n                        }}\n                    />\n                    <div className=\"app__legend\">\n                        <div className=\"app__color\">\n                            <div className=\"app__color__indicator app__color__indicator--started\"></div>\n                            Started\n                        </div>\n                        <div className=\"app__color\">\n                            <div className=\"app__color__indicator app__color__indicator--benched\"></div>\n                            Benched\n                        </div>\n                        <div className=\"app__color\">\n                            <div className=\"app__color__indicator app__color__indicator--triple\"></div>\n                            TC\n                        </div>\n                        <div className=\"app__color\">\n                            <div className=\"app__color__indicator\"></div>\n                            Not Selected\n                        </div>\n                    </div>\n                </div>\n                <div\n                    className={classNames('dashboard', {\n                        'dashboard--cloaked': !id,\n                    })}\n                >\n                    <div className=\"dashboard__container\" ref={dashboardRef}>\n                        <header className=\"dashboard__header\">\n                            <span className=\"dashboard__heading\">Player</span>\n                            {filteredData?.history.current.map(event => (\n                                <span className=\"dashboard__stat\" key={event.event}>\n                                    GW {event.event}\n                                    {filteredData?.stats.chips[event.event] && (\n                                        <div>{getChipAbbreviation(filteredData.stats.chips[event.event])}</div>\n                                    )}\n                                </span>\n                            ))}\n                            <div className=\"dashboard__totals\">\n                                <span className=\"dashboard__stat\">Selected</span>\n                                <span className=\"dashboard__stat\">Starting</span>\n                                <span className=\"dashboard__stat\">Benched</span>\n                                <span className=\"dashboard__stat\">Points</span>\n                            </div>\n                        </header>\n                        <ul className=\"dashboard__list\">\n                            {filteredData &&\n                                bootstrap &&\n                                renderPlayerList(filteredData.stats.data, bootstrap, sort as OptionType, meanValue)}\n                        </ul>\n                    </div>\n                </div>\n                <div className=\"dashboard__widgets\">\n                    <SelectionWidget title=\"Top Selections\" metric=\"selections\" data={filteredData} />\n                    <SelectionWidget title=\"Top Starters\" metric=\"starts\" data={filteredData} />\n                    <SelectionWidget title=\"Top Bench Players\" metric=\"benched\" data={filteredData} />\n                    <DifferenceWidget title=\"Most Consistent Starters\" top data={filteredData} />\n                    <DifferenceWidget title=\"Most Consistent Bench Players\" data={filteredData} />\n                </div>\n                <h2>\n                    <span>Teams</span>\n                </h2>\n                <div className=\"dashboard__widgets dashboard__widgets--single\">\n                    <TeamsWidget data={filteredData} />\n                </div>\n                <h2>\n                    <span>Captains</span>\n                </h2>\n                <div className=\"dashboard__widgets\">\n                    <CaptainWidget data={filteredData} />\n                    <CaptainOpportunityWidget data={filteredData} />\n                    <WrongCaptainWidget data={filteredData} />\n                </div>\n                <h2>\n                    <span>Streaks</span>\n                </h2>\n                <div className=\"dashboard__widgets\">\n                    <StreakWidget\n                        title=\"Highest Non-Blank Streaks\"\n                        metric=\"nonBlank\"\n                        showDetailedStats\n                        data={filteredData}\n                    />\n                    <StreakWidget\n                        title=\"Highest Selection Streaks\"\n                        metric=\"selection\"\n                        showDetailedStats\n                        data={filteredData}\n                    />\n                    <StreakWidget title=\"Highest Start Streaks\" metric=\"start\" showDetailedStats data={filteredData} />\n                    <StreakWidget title=\"Highest Bench Appearance Streaks\" metric=\"bench\" data={filteredData} />\n                </div>\n                <h2>\n                    <span>Contributions</span>\n                </h2>\n                <div className=\"dashboard__widgets\">\n                    <ContributionWidget data={filteredData} />\n                    {range.end - range.start + 1 === rawHistory?.current.length && (\n                        <>\n                            <MissedPointsShareWidget\n                                title=\"Most Points Scored Outside of Team\"\n                                top\n                                data={filteredData}\n                            />\n                            <MissedPointsShareWidget title=\"Fewest Points Scored Outside of Team\" data={filteredData} />\n                        </>\n                    )}\n                </div>\n                <h2>\n                    <span>Graphs</span>\n                </h2>\n                <div className=\"dashboard__graphs\">\n                    <OverallRankWidget data={filteredData} />\n                    <PointsWidget data={filteredData} />\n                    <ValueWidget data={filteredData} />\n                </div>\n                <div className=\"app__legal\">\n                    <p>\n                        FPL Stats uses data from the official Premier League Fantasy API. This site is not affiliated\n                        with the Premier League.\n                    </p>\n                </div>\n                {bootstrap && getPastEvents(bootstrap.events).length > 0 && (\n                    <div className=\"dashboard__slider-wrapper\">\n                        <ReactSlider\n                            className=\"dashboard__slider\"\n                            value={[range.start, range.end]}\n                            min={(head(getPastEvents(bootstrap.events))?.id || 1) - 1}\n                            max={(last(getPastEvents(bootstrap.events))?.id || 38) - 1}\n                            onChange={([start, end]) => setRange({ start, end })}\n                            renderThumb={(props, state) => <div {...props}>GW {state.valueNow + 1}</div>}\n                            pearling\n                        />\n                    </div>\n                )}\n            </div>\n        </div>\n    )\n}\n\nexport default Dashboard\n","import { combineReducers } from 'redux'\nimport { Bootstrap, History, Entry, Picks, LiveEvent } from '../types'\nimport bootstrap from './bootstrap'\nimport stats from './stats'\nimport settings from './settings'\nimport entry from './entry'\nimport history from './history'\nimport loading from './loading'\n\nexport type RootState = {\n    loading: number\n    bootstrap: {\n        data: Bootstrap | undefined\n    }\n    stats: {\n        data:\n            | {\n                  pick: Picks\n                  live: LiveEvent\n              }[]\n            | undefined\n    }\n    settings: {\n        id: number | undefined\n        meanStrategy: 'average' | 'median'\n        theme: 'light' | 'dark'\n    }\n    history: {\n        data: History | undefined\n    }\n    entry: {\n        data: Entry | undefined\n    }\n}\n\nexport default combineReducers({\n    loading,\n    bootstrap,\n    stats,\n    settings,\n    history,\n    entry,\n})\n","import { ReportHandler } from 'web-vitals'\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n            getCLS(onPerfEntry)\n            getFID(onPerfEntry)\n            getFCP(onPerfEntry)\n            getLCP(onPerfEntry)\n            getTTFB(onPerfEntry)\n        })\n    }\n}\n\nexport default reportWebVitals\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { Provider } from 'react-redux'\nimport { HashRouter, Route, Switch } from 'react-router-dom'\nimport * as serviceWorker from './serviceWorker'\nimport { Dashboard } from './components/Dashboard'\nimport configureAppStore from './store'\nimport reportWebVitals from './reportWebVitals'\nimport './index.scss'\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={configureAppStore()}>\n            <HashRouter>\n                <Switch>\n                    <Route path=\"/:team/\">\n                        <Dashboard />\n                    </Route>\n                    <Route path=\"/\" exact>\n                        <Dashboard />\n                    </Route>\n                </Switch>\n            </HashRouter>\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n)\n\nserviceWorker.unregister()\n\nreportWebVitals()\n","import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit'\nimport rootReducer from './reducers'\n\nconst STORAGE_VERSION = '2'\n\nconst isStale = () => localStorage.getItem('storageVersion') !== STORAGE_VERSION\n\nexport default function configureAppStore() {\n    const storage = localStorage.getItem('applicationSettings')\n\n    const preloadedState = storage !== null && !isStale() ? JSON.parse(storage) : {}\n\n    const store = configureStore({\n        reducer: rootReducer,\n        middleware: [...getDefaultMiddleware()],\n        preloadedState: {\n            settings: {\n                theme: 'light',\n                meanStrategy: 'average',\n                id: undefined,\n                range: {\n                    start: 0,\n                    end: 38,\n                },\n                ...preloadedState,\n            },\n        },\n    })\n\n    store.subscribe(() => {\n        const state = store.getState().settings\n\n        localStorage.setItem('storageVersion', STORAGE_VERSION)\n        localStorage.setItem(\n            'applicationSettings',\n            JSON.stringify({\n                theme: state.theme,\n                meanStrategy: state.meanStrategy,\n            })\n        )\n    })\n\n    return store\n}\n"],"sourceRoot":""}