{"version":3,"sources":["serviceWorker.ts","components/Player/Player.tsx","components/Widget/Widget.tsx","components/Spinner/Spinner.tsx","utilities/settings.ts","utilities/arrays.ts","utilities/numbers.ts","utilities/stats.ts","utilities/events.ts","utilities/chips.ts","utilities/strings.ts","reducers/loading.ts","reducers/entry.ts","reducers/history.ts","reducers/stats.ts","reducers/bootstrap.ts","reducers/settings.ts","components/Button/Button.tsx","hooks/useClickOutside.ts","hooks/useMeanLabel.ts","hooks/useMeanValue.ts","components/Modal/Modal.tsx","components/HistoryWidget/HistoryWidget.tsx","components/TotsPlayer/TotsPlayer.tsx","components/TotsWidget/TotsWidget.tsx","components/Metric/Metric.tsx","components/SiteLink/SiteLink.tsx","components/PlayerStatsWidget/PlayerStatsWidget.tsx","components/FormationWidget/FormationWidget.tsx","components/CaptainWidget/CaptainWidget.tsx","components/GameweekWidget/GameweekWidget.tsx","components/PositionsWidget/PositionsWidget.tsx","components/SeasonWidget/SeasonWidget.tsx","components/Team/Team.tsx","components/TeamsWidget/TeamsWidget.tsx","components/NonBlankStreakWidget/NonBlankStreakWidget.tsx","components/SelectionStreakWidget/SelectionStreakWidget.tsx","components/StartStreakWidget/StartStreakWidget.tsx","components/BenchStreakWidget/BenchStreakWidget.tsx","components/SwapIcon/SwapIcon.tsx","components/CaptainOpportunityWidget/CaptainOpportunityWidget.tsx","components/SelectionWidget/SelectionWidget.tsx","components/StarterWidget/StarterWidget.tsx","components/BenchWidget/BenchWidget.tsx","components/DifferenceWidget/DifferenceWidget.tsx","components/OverallRankWidget/OverallRankWidget.tsx","components/PointsWidget/PointsWidget.tsx","components/ValueWidget/ValueWidget.tsx","components/WrongCaptainWidget/WrongCaptainWidget.tsx","components/ContributionWidget/ContributionWidget.tsx","components/MissedPointsShareWidget/MissedPointsShareWidget.tsx","components/NearMissesWidget/NearMissesWidget.tsx","components/Dashboard/Dashboard.tsx","reducers/index.ts","index.tsx","store.ts"],"names":["Boolean","window","location","hostname","match","Player","props","bootstrap","useSelector","state","data","player","elements","find","el","id","team","teams","position","element_types","element_type","className","classNames","extended","reversed","src","code","singular_name_short","alt","web_name","suffix","title","name","short_name","Widget","settings","cssClasses","children","Spinner","validateTeamId","value","number","Number","isNaN","isInteger","sort","series","comparator","direction","a","b","head","length","last","reduce","extractor","initialValue","acc","curr","thousandsSeparator","toString","replace","sumNumbers","round","precision","formatted","toFixed","test","split","getTotalSelections","statData","filter","pick","multiplier","getTotalStarts","getTotalBenched","getTotalPoints","points","getTotalRawPoints","rawPoints","getTotalBenchPoints","getAllPlayers","stats","Object","values","concat","getPlayerAggregate","key","getTopStatAggregate","players","aggregates","totals","getStreak","comparison","ignoreBlanks","streaks","slice","max","Math","start","indexOf","map","streak","event","end","getSelectionStreak","gw","getStartStreak","getBenchStreak","getNonBlankStreak","getTeamOfTheSeason","gk","def","mid","fwd","top","rest","xi","element","bench","getPastEvents","events","timestamp","Date","now","deadline_time_epoch","getShortName","pop","chips","bboost","freehit","wildcard","initialCaps","charAt","toUpperCase","toLowerCase","pluralise","singular","plural","parsedValue","getGWCountLabel","getPointsLabel","loading","createSlice","initialState","reducers","startLoading","finishLoading","actions","entry","undefined","fetchEntryStart","fetchEntrySuccess","action","payload","fetchEntry","dispatch","fetch","encodeURIComponent","response","json","history","fetchHistoryStart","fetchHistorySuccess","fetchHistory","emptyAggregates","redCards","yellowCards","goals","assists","cleanSheets","goalsConceded","ownGoals","saves","minutes","penaltiesMissed","penaltiesSaved","timesInDreamteam","bps","bonus","captaincies","benchPoints","selections","starts","benched","selection","nonBlank","tots","buildDataStart","buildDataSuccess","fetchPicks","fetchEvent","fetchGameweekInformation","Promise","all","live","buildData","gameweeks","forEach","active_chip","entry_history","picks","item","total_points","keys","index","fetchBootstrapStart","fetchBootstrapSuccess","fetchBootstrap","localStorage","getItem","meanStrategy","setId","setItem","removeItem","setMeanStrategy","fetchDataWithId","Button","secondary","type","onClick","disabled","label","useClickOutside","callback","React","useRef","useEffect","listener","e","target","Node","current","contains","document","addEventListener","removeEventListener","useMeanLabel","strategy","useMeanValue","average","sorted","ceil","median","Modal","useState","setValue","useDispatch","useHistory","close","useCallback","cancel","push","onClose","ref","onSubmit","preventDefault","placeholder","onChange","HistoryWidget","meanLabel","meanValue","pastSeasonsByRank","past","rank","pastSeasonsByPoints","bestRankedSeason","worstRankedSeason","bestPointSeason","worstPointSeason","top1k","season","top10k","top100k","top1m","season_name","TotsPlayer","TotsWidget","explanations","Metric","metric","SiteLink","url","href","rel","PlayerStatsWidget","allPlayers","reds","yellows","inDreamteam","mostCaptaincies","topReturner","topBenchGWReturner","topSeasonReturner","topBenchReturner","weeks","idealCaptain","entries","Array","from","week","returner","renderTopBenchGWReturner","FormationWidget","formations","val","join","formation","count","information","formatFormation","CaptainWidget","captains","captain","sum","GameweekWidget","differences","average_entry_score","sortedRanks","gws","bestGW","worstGW","bestGWRank","worstGWRank","diff","PositionsWidget","positions","elementType","totalPoints","plural_name","getAggregateValues","SeasonWidget","totalTransfers","event_transfers","totalHits","event_transfers_cost","totalBenched","points_on_bench","tc","findIndex","bbWeek","bbPoints","doubleDigitHauls","totalPlays","summary_overall_points","Team","TeamsWidget","counts","positionPlayers","data-position","plural_name_short","NonBlankStreakWidget","streakers","aStreak","bStreak","aStreakLength","bStreakLength","streaker","SelectionStreakWidget","StartStreakWidget","BenchStreakWidget","SwapIcon","width","height","viewBox","fill","fillRule","d","transform","CaptainOpportunityWidget","improvements","improvement","captainData","topData","StarterWidget","BenchWidget","DifferenceWidget","benchedPercentage","startsPercentage","topStarters","percentageDiff","topBenchwarmers","OverallRankWidget","overall_rank","margin","bottom","left","right","dataKey","fillOpacity","stroke","tickFormatter","thousandsShorthand","domain","interval","tickCount","angle","textAnchor","strokeDasharray","isAnimationActive","formatter","separator","ValueWidget","bank","WrongCaptainWidget","timesUsed","ContributionWidget","contributions","getPointsShare","MissedPointsShareWidget","NearMissesWidget","totsIds","includes","sortings","alphabet","charCodeAt","sortOptions","Dashboard","setSort","isLoading","useParams","isModalOpen","setIsModalOpen","dashboardRef","setTimeout","scrollTo","scrollWidth","summary_overall_rank","options","option","styles","container","provided","menu","zIndex","top_element_info","sorting","renderPlayerList","SelectionWidget","PointsWidget","combineReducers","ReactDOM","render","StrictMode","store","configureStore","reducer","rootReducer","middleware","getDefaultMiddleware","basename","path","exact","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.fde6be6e.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void\n  onUpdate?: (registration: ServiceWorkerRegistration) => void\n}\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    )\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister()\n      })\n      .catch(error => {\n        console.error(error.message)\n      })\n  }\n}\n","import React from 'react'\nimport { useSelector } from 'react-redux'\nimport classNames from 'classnames'\nimport { RootState } from '../../reducers'\nimport './Player.scss'\n\ntype Props = {\n    id: number\n    extended?: boolean\n    reversed?: boolean\n    suffix?: string | (() => JSX.Element | null)\n}\n\nconst Player: React.FC<Props> = (props: Props) => {\n    const bootstrap = useSelector((state: RootState) => state.bootstrap.data)\n\n    const player = bootstrap?.elements.find(el => el.id === props.id)\n    const team = bootstrap?.teams.find(el => el.id === player?.team)\n    const position = bootstrap?.element_types.find(el => el.id === player?.element_type)\n\n    return (\n        <div className={classNames('player', { 'player--condensed': !props.extended, 'player--reversed': props.reversed })}>\n            <img\n                src={`https://fantasy.premierleague.com/dist/img/shirts/special/shirt_${team?.code}${position?.singular_name_short === 'GKP' ? '_1' : ''}-66.png`}\n                alt={player?.web_name}\n                className=\"player__shirt\"\n            />\n            <div className=\"player__detail\">\n                <div className=\"player__name\">\n                    <span>\n                        {props.suffix && !props.extended ? (\n                            <b>{player?.web_name}</b>\n                        ) : (\n                            player?.web_name\n                        )}\n                        {typeof props.suffix === 'string' ? ` (${props.suffix})` : props.suffix ? props.suffix() : null}\n                    </span>\n                </div>\n                <div className=\"player__info\">\n                    <span className=\"player__team\" title={team?.name}>{team?.short_name}</span>\n                    <span className=\"player__position\">{position?.singular_name_short}</span>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default Player","import React from 'react'\nimport classNames from 'classnames'\nimport { useSelector } from 'react-redux'\nimport { RootState } from '../../reducers'\nimport './Widget.scss'\n\ntype Props = {\n    title?: string\n    children?: React.ReactNode\n    cssClasses?: string\n}\n\nconst Widget: React.FC<Props> = (props: Props) => {\n    const id = useSelector((state: RootState) => state.settings.id)\n\n    return (\n        <div className={classNames('widget', props.cssClasses, {\n            'widget--cloaked': !id,\n        })}>\n            {props.title && (\n                <h3 className=\"widget__title\">{props.title}</h3>\n            )}\n            <div className=\"widget__content\">\n                {props.children || (\n                    <div className=\"widget__empty\">No data available.</div>\n                )}\n            </div>\n        </div>\n    )\n}\n\nexport default Widget","import React from 'react'\nimport './Spinner.scss'\n\nconst Spinner: React.FC = () => (\n    <div className=\"spinner\">\n        <div className=\"spinner__item\"></div>\n        <div className=\"spinner__item\"></div>\n        <div className=\"spinner__item\"></div>\n        <div className=\"spinner__item\"></div>\n        <div className=\"spinner__item\"></div>\n        <div className=\"spinner__item\"></div>\n        <div className=\"spinner__item\"></div>\n        <div className=\"spinner__item\"></div>\n        <div className=\"spinner__item\"></div>\n    </div>\n)\n\nexport default Spinner","export const validateTeamId = (value: string) => {\n    const number = Number(value)\n    return value && !Number.isNaN(number) && Number.isInteger(number)\n}","export const sort = <T>(series: T[], comparator: (element: T) => number, direction: 'asc' | 'desc' = 'desc'): T[] => {\n    return [ ...series ].sort((a, b) => (comparator(a) - comparator(b)) * (direction === 'desc' ? -1 : 1))\n}\n\nexport const head = <T>(series: T[]): T | null => {\n    return series.length ? series[0] : null\n}\n\nexport const last = <T>(series: T[]): T | null => {\n    return series.length ? series[series.length - 1] : null\n}\n\nexport const reduce = <T>(series: T[], extractor: (element: T) => number, initialValue: number = 0): number => {\n    return series.reduce((acc, curr) => acc + extractor(curr), initialValue)\n}","import { head, reduce, sort } from './arrays'\n\nexport const thousandsSeparator = (value: number): string => {\n    return value.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',')\n}\n\nexport const thousandsShorthand = (value: number): string => {\n    return value > 999999 ? `${round(value / 1000000)}M` : value > 999 ? `${round(value / 1000, 0)}K` : `${value}`\n}\n\nexport const sumNumbers = (series: number[]): number => {\n    return reduce(series, el => el)\n}\n\nexport const average = (series: number[]): number => {\n    return series.length ? sumNumbers(series) / series.length : 0\n}\n\nexport const median = (series: number[]): number => {\n    const sorted = sort(series, el => el)\n    const mid = Math.ceil(series.length / 2)\n\n    if (sorted.length % 2 === 0) {\n        return (sorted[mid] + sorted[mid + 1]) / 2\n    }\n\n    return sorted[mid - 1]\n}\n\nexport const round = (value: number, precision: number = 1): string => {\n    const formatted = value.toFixed(precision)\n\n    if (/\\.0+$/.test(formatted)) {\n        return head(formatted.split('.')) || ''\n    }\n\n    return formatted\n}","import { ElementStats, StatData, Stats, StatDataGameweek, Streak } from '../types'\nimport { StatAggregateTotals } from '../types/stat-aggregate-totals'\nimport { head, reduce, sort } from './arrays'\nimport { sumNumbers } from './numbers'\n\nexport const getTotalSelections = (statData: StatData): number => {\n    return statData.data.filter(pick => pick.multiplier !== null).length\n}\n\nexport const getTotalStarts = (statData: StatData): number => {\n    return statData.data.filter(pick => pick.multiplier && pick.multiplier > 0).length\n}\n\nexport const getTotalBenched = (statData: StatData): number => {\n    return statData.data.filter(pick => pick.multiplier === 0).length\n}\n\nexport const getTotalPoints = (statData: StatData): number => {\n    return reduce(statData.data, el => el.points || 0)\n}\n\nexport const getTotalCaptaincies = (statData: StatData): number => {\n    return statData.data.filter(data => (data.multiplier || 0) > 1).length\n}\n\nexport const getTotalRawPoints = (statData: StatData): number => {\n    return reduce(statData.data, el => el.rawPoints || 0)\n}\n\nexport const getTotalBenchPoints = (statData: StatData): number => {\n    return reduce(statData.data, el => el.multiplier === 0 ? (el.rawPoints || 0) : 0)\n}\n\nexport const getAllPlayers = (stats: Stats): StatData[] => {\n    return Object.values(stats).reduce((acc, curr) => acc.concat(curr), [])\n}\n\nexport const getPlayerAggregate = (player: StatData, key: keyof ElementStats): number => player.data.reduce((acc, data) => {\n    if (typeof data.stats?.[key] === 'number') {\n        return ((data.stats?.[key] as number) || 0) + acc\n    }\n\n    if (typeof data.stats?.[key] === 'boolean') {\n        return (+(data.stats?.[key] as boolean) || 0) + acc\n    }\n\n    return acc\n}, 0)\n\nexport const getTopStatAggregate = (players: StatData[], key: keyof StatAggregateTotals): StatData | null => head(sort(players, el => el.aggregates.totals[key]))\n\nconst getStreak = (statData: StatData, comparison: (gw: StatDataGameweek) => boolean, ignoreBlanks: boolean = false): Streak | null => {\n    const streaks = statData.data.reduce((acc, curr) => {\n        if (comparison(curr)) {\n            if (ignoreBlanks) {\n                return [ ...acc.slice(0, acc.length - 1), acc[acc.length - 1] + 1 ]\n            }\n\n            if (!acc.length || acc[acc.length - 1] === 0) {\n                return [ ...acc, 1 ]\n            }\n\n            return [ ...acc.slice(0, acc.length - 1), acc[acc.length - 1] + 1 ]\n        }\n\n        return [ ...acc, 0 ]\n    }, (ignoreBlanks ? [ 0 ] : []) as number[])\n\n    const max = Math.max(...streaks)\n\n    if (max === 0) {\n        return null\n    }\n\n    const start = statData.data[sumNumbers(streaks.slice(0, streaks.indexOf(max)).map(streak => streak > 0 ? streak : 1))].event\n    const end = statData.data[start.id - 2 + max].event\n\n    const points = sumNumbers(statData.data\n        .slice(start.id - 1, start.id - 1 + max)\n        .map(event => event.points || 0))\n\n    return {\n        start,\n        end,\n        length: max,\n        points,\n    }\n}\n\nexport const getSelectionStreak = (statData: StatData): Streak | null => getStreak(statData, (gw) => gw.multiplier !== null, true)\n\nexport const getStartStreak = (statData: StatData): Streak | null => getStreak(statData, (gw) => (gw.multiplier || 0) > 0, true)\n\nexport const getBenchStreak = (statData: StatData): Streak | null => getStreak(statData, (gw) => gw.multiplier === 0, true)\n\nexport const getNonBlankStreak = (statData: StatData): Streak | null => getStreak(statData, (gw) => (gw.rawPoints || 0) > 2)\n\nconst MIN_GK = 1\nconst MAX_GK = 2\n\nconst MIN_DEF = 3\nconst MAX_DEF = 5\n\nconst MIN_MID = 2\nconst MAX_MID = 5\n\nconst MIN_FWD = 1\nconst MAX_FWD = 3\n\nexport const getTeamOfTheSeason = (stats: Stats): { xi: StatData[], bench: StatData[] } => {\n    const gk = sort(stats[1], el => el.aggregates.totals.points).slice(0, MAX_GK)\n    const def = sort(stats[2], el => el.aggregates.totals.points).slice(0, MAX_DEF)\n    const mid = sort(stats[3], el => el.aggregates.totals.points).slice(0, MAX_MID)\n    const fwd = sort(stats[4], el => el.aggregates.totals.points).slice(0, MAX_FWD)\n\n    const top = gk.slice(0, MIN_GK).concat(def.slice(0, MIN_DEF)).concat(mid.slice(0, MIN_MID)).concat(fwd.slice(0, MIN_FWD))\n    const rest = sort(def.slice(MIN_DEF).concat(mid.slice(MIN_MID)).concat(fwd.slice(MIN_FWD)), el => el.aggregates.totals.points)\n\n    const xi = sort(top.concat(rest.slice(0, 4)), el => el.element.element_type, 'asc')\n    const bench = sort(gk.slice(MIN_GK).concat(rest.slice(4)), el => el.element.element_type, 'asc')\n\n    return {\n        xi,\n        bench,\n    }\n}","import { Event } from '../types'\n\nexport const getPastEvents = (events: Event[]): Event[] => {\n    const timestamp = Date.now()\n    return events.filter(event => event.deadline_time_epoch * 1000 < timestamp)\n}\n\nexport const getShortName = (event: Event): string => {\n    return event.name.split(' ').pop() || ''\n}","const chips: { [key: string]: string } = {\n    '3xc': 'TC',\n    bboost: 'BB',\n    freehit: 'FH',\n    wildcard: 'WC',\n}\n\nexport const getChipAbbreviation = (key: string): string | null => chips[key] || null","export const initialCaps = (value: string): string => `${value.charAt(0).toUpperCase()}${value.toLowerCase().slice(1)}`\n\nexport const pluralise = (value: number | string, singular: string, plural: string) => {\n    const parsedValue = typeof value === 'number' ? value : Number(value.replace(/,/g, ''))\n\n    return `${value} ${parsedValue === 1 ? singular : plural}`\n}\n\nexport const getGWCountLabel = (value: number | string): string => pluralise(value, 'GW', 'GWs')\n\nexport const getPointsLabel = (value: number | string): string => pluralise(value, 'pt', 'pts')","import { createSlice } from '@reduxjs/toolkit'\n\nconst loading = createSlice({\n    name: 'loading',\n    initialState: 0,\n    reducers: {\n        startLoading(state) {\n            state += 1\n\n            return state\n        },\n        finishLoading(state) {\n            state -= 1\n\n            return state\n        },\n    },\n})\n\nexport const { startLoading, finishLoading } = loading.actions\n\nexport default loading.reducer","import { createSlice, ThunkAction, Action } from '@reduxjs/toolkit'\nimport { History } from '../types'\nimport { finishLoading, startLoading } from './loading'\n\nconst entry = createSlice({\n    name: 'entry',\n    initialState: {\n        data: undefined,\n    },\n    reducers: {\n        fetchEntryStart(state) {\n            state.data = undefined\n        },\n        fetchEntrySuccess(state, action) {\n            state.data = action.payload\n        },\n    },\n})\n\nexport const { fetchEntryStart, fetchEntrySuccess } = entry.actions\n\nexport const fetchEntry = (id: number): ThunkAction<void, History, unknown, Action<string>> => async dispatch => {\n    dispatch(fetchEntryStart())\n    dispatch(startLoading())\n\n    const response = await fetch(`https://jsonp.afeld.me/?url=${encodeURIComponent(`https://fantasy.premierleague.com/api/entry/${id}/`)}`)\n\n    const data = await response.json()\n\n    dispatch(fetchEntrySuccess(data))\n    dispatch(finishLoading())\n}\n\nexport default entry.reducer","import { createSlice, ThunkAction, Action } from '@reduxjs/toolkit'\nimport { History } from '../types'\nimport { finishLoading, startLoading } from './loading'\n\nconst history = createSlice({\n    name: 'history',\n    initialState: {\n        data: undefined,\n    },\n    reducers: {\n        fetchHistoryStart(state) {\n            state.data = undefined\n        },\n        fetchHistorySuccess(state, action) {\n            state.data = action.payload\n        },\n    },\n})\n\nexport const { fetchHistoryStart, fetchHistorySuccess } = history.actions\n\nexport const fetchHistory = (entry: number): ThunkAction<void, History, unknown, Action<string>> => async dispatch => {\n    dispatch(fetchHistoryStart())\n    dispatch(startLoading())\n\n    const response = await fetch(`https://jsonp.afeld.me/?url=${encodeURIComponent(`https://fantasy.premierleague.com/api/entry/${entry}/history/`)}`)\n\n    const data = await response.json()\n\n    dispatch(fetchHistorySuccess(data))\n    dispatch(finishLoading())\n}\n\nexport default history.reducer","import { createSlice, ThunkAction, Action } from '@reduxjs/toolkit'\nimport { Bootstrap, Picks, Stats, StatData, LiveEvent } from '../types'\nimport { getPastEvents, getPlayerAggregate, getTotalPoints, getTotalBenchPoints, getTotalRawPoints, getTotalSelections, getTotalStarts, getTotalBenched, getTotalCaptaincies, getSelectionStreak, getStartStreak, getBenchStreak, getNonBlankStreak, getTeamOfTheSeason } from '../utilities'\nimport { finishLoading, startLoading } from './loading'\n\nconst emptyAggregates = {\n    totals: {\n        redCards: 0,\n        yellowCards: 0,\n        goals: 0,\n        assists: 0,\n        cleanSheets: 0,\n        goalsConceded: 0,\n        ownGoals: 0,\n        saves: 0,\n        minutes: 0,\n        penaltiesMissed: 0,\n        penaltiesSaved: 0,\n        timesInDreamteam: 0,\n        bps: 0,\n        bonus: 0,\n        captaincies: 0,\n        points: 0,\n        rawPoints: 0,\n        benchPoints: 0,\n        selections: 0,\n        starts: 0,\n        benched: 0,\n    },\n    streaks: {\n        selection: null,\n        start: null,\n        bench: null,\n        nonBlank: null,\n    },\n}\n\nconst stats = createSlice({\n    name: 'stats',\n    initialState: {\n        data: undefined,\n        chips: undefined,\n        tots: undefined,\n    },\n    reducers: {\n        buildDataStart(state) {\n            state.data = undefined\n            state.chips = undefined\n            state.tots = undefined\n        },\n        buildDataSuccess(state, action) {\n            state.data = action.payload.data\n            state.chips = action.payload.chips\n            state.tots = action.payload.tots\n        },\n    },\n})\n\nexport const { buildDataStart, buildDataSuccess } = stats.actions\n\nconst fetchPicks = async (event: number, entry: number): Promise<Picks> => {\n    const response = await fetch(`https://jsonp.afeld.me/?url=${encodeURIComponent(`https://fantasy.premierleague.com/api/entry/${entry}/event/${event}/picks/`)}`)\n    return await response.json()\n}\n\nconst fetchEvent = async (event: number): Promise<LiveEvent> => {\n    const response = await fetch(`https://jsonp.afeld.me/?url=${encodeURIComponent(`https://fantasy.premierleague.com/api/event/${event}/live/`)}`)\n    return await response.json()\n}\n\nconst fetchGameweekInformation = async (event: number, entry: number): Promise<{ pick: Picks, live: LiveEvent }> => {\n    const [ pick, live ] = await Promise.all([\n        fetchPicks(event, entry),\n        fetchEvent(event),\n    ])\n\n    return {\n        pick,\n        live,\n    }\n}\n\nexport const buildData = (bootstrap: Bootstrap, entry: number): ThunkAction<void, Bootstrap, unknown, Action<string>> => async dispatch => {\n    dispatch(buildDataStart())\n    dispatch(startLoading())\n\n    const gameweeks = await Promise.all(\n        getPastEvents(bootstrap.events).map(async event => await fetchGameweekInformation(event.id, entry))\n    )\n\n    const stats: { [key: number]: StatData } = {}\n    const chips: { [key: number]: string } = {}\n\n    gameweeks.forEach(gw => {\n        if (gw.pick.active_chip) {\n            chips[gw.pick.entry_history.event] = gw.pick.active_chip\n        }\n\n        gw.pick.picks.forEach(item => {\n            if (!stats[item.element]) {\n                stats[item.element] = {\n                    element: bootstrap.elements.find(el => el.id === item.element)!,\n                    data: bootstrap.events.filter(event => event.id < gw.pick.entry_history.event).map(event => ({\n                        event,\n                        multiplier: null,\n                        points: null,\n                        rawPoints: null,\n                        stats: null,\n                        position: null,\n                    })),\n                    aggregates: emptyAggregates,\n                }\n            }\n\n            const points = gw.live.elements.find(el => el.id === item.element)?.stats.total_points || null\n\n            stats[item.element] = {\n                ...stats[item.element],\n                data: [\n                    ...stats[item.element].data,\n                    {\n                        event: bootstrap.events.find(event => event.id === gw.pick.entry_history.event)!,\n                        multiplier: item.multiplier,\n                        points: points !== null ? points * item.multiplier : points,\n                        rawPoints: points,\n                        stats: gw.live.elements.find(el => el.id === item.element)?.stats || null,\n                        position: item.position,\n                    }\n                ],\n            }\n        })\n\n        Object.keys(stats).forEach(player => {\n            const index = Number(player)\n\n            if (stats[index].data.length < gw.pick.entry_history.event) {\n                stats[index] = {\n                    ...stats[index],\n                    data: [\n                        ...stats[index].data,\n                        {\n                            event: bootstrap.events.find(event => event.id === gw.pick.entry_history.event)!,\n                            multiplier: null,\n                            points: null,\n                            rawPoints: null,\n                            stats: null,\n                            position: null,\n                        },\n                    ],\n                }\n            }\n        })\n    })\n\n    Object.keys(stats).forEach(id => {\n        const player = stats[Number(id)]\n\n        stats[Number(id)].aggregates = {\n            totals: {\n                redCards: getPlayerAggregate(player, 'red_cards'),\n                yellowCards: getPlayerAggregate(player, 'yellow_cards'),\n                goals: getPlayerAggregate(player, 'goals_scored'),\n                assists: getPlayerAggregate(player, 'assists'),\n                cleanSheets: getPlayerAggregate(player, 'clean_sheets'),\n                goalsConceded: getPlayerAggregate(player, 'goals_conceded'),\n                ownGoals: getPlayerAggregate(player, 'own_goals'),\n                saves: getPlayerAggregate(player, 'saves'),\n                minutes: getPlayerAggregate(player, 'minutes'),\n                penaltiesMissed: getPlayerAggregate(player, 'penalties_missed'),\n                penaltiesSaved: getPlayerAggregate(player, 'penalties_saved'),\n                timesInDreamteam: getPlayerAggregate(player, 'in_dreamteam'),\n                bps: getPlayerAggregate(player, 'bps'),\n                bonus: getPlayerAggregate(player, 'bonus'),\n                captaincies: getTotalCaptaincies(player),\n                points: getTotalPoints(player),\n                rawPoints: getTotalRawPoints(player),\n                benchPoints: getTotalBenchPoints(player),\n                selections: getTotalSelections(player),\n                starts: getTotalStarts(player),\n                benched: getTotalBenched(player),\n            },\n            streaks: {\n                selection: getSelectionStreak(player),\n                start: getStartStreak(player),\n                bench: getBenchStreak(player),\n                nonBlank: getNonBlankStreak(player),\n            },\n        }\n    })\n\n    const data = Object.values(stats).reduce((acc: Stats, curr) => ({\n        ...acc,\n        [curr.element.element_type]: [\n            ...(acc[curr.element.element_type] || []),\n            curr,\n        ],\n    }), {})\n\n    dispatch(buildDataSuccess({\n        data,\n        chips,\n        tots: getTeamOfTheSeason(data),\n    }))\n    dispatch(finishLoading())\n}\n\nexport default stats.reducer","import { createSlice, ThunkAction, Action } from '@reduxjs/toolkit'\nimport { fetchEntry } from './entry'\nimport { fetchHistory } from './history'\nimport { finishLoading, startLoading } from './loading'\nimport { buildData } from './stats'\n\nconst bootstrap = createSlice({\n    name: 'bootstrap',\n    initialState: {\n        data: undefined,\n    },\n    reducers: {\n        fetchBootstrapStart(state) {\n            state.data = undefined\n        },\n        fetchBootstrapSuccess(state, action) {\n            state.data = action.payload\n        },\n    },\n})\n\nexport const { fetchBootstrapStart, fetchBootstrapSuccess } = bootstrap.actions\n\nexport const fetchBootstrap = (id: number): ThunkAction<void, any, unknown, Action<string>> => async dispatch => {\n    dispatch(fetchBootstrapStart())\n    dispatch(startLoading())\n\n    const response = await fetch(`https://jsonp.afeld.me/?url=${encodeURIComponent('https://fantasy.premierleague.com/api/bootstrap-static/')}`)\n\n    const data = await response.json()\n\n    dispatch(buildData(data, id))\n    dispatch(fetchHistory(id))\n    dispatch(fetchEntry(id))\n\n    dispatch(fetchBootstrapSuccess(data))\n    dispatch(finishLoading())\n}\n\nexport default bootstrap.reducer","import { Action, createSlice, ThunkAction } from '@reduxjs/toolkit'\nimport { Bootstrap } from '../types'\nimport { fetchBootstrap } from './bootstrap'\n\nconst settings = createSlice({\n    name: 'settings',\n    initialState: {\n        id: localStorage.getItem('id') || undefined,\n        meanStrategy: localStorage.getItem('meanStrategy') || 'average',\n    },\n    reducers: {\n        setId(state, action) {\n            state.id = action.payload\n\n            if (state.id) {\n                localStorage.setItem('id', state.id)\n            } else {\n                localStorage.removeItem('id')\n            }\n        },\n        setMeanStrategy(state, action) {\n            state.meanStrategy = action.payload\n            localStorage.setItem('meanStrategy', state.meanStrategy)\n        }\n    },\n})\n\nexport const { setId, setMeanStrategy } = settings.actions\n\nexport const fetchDataWithId = (id: number): ThunkAction<void, Bootstrap, unknown, Action<string>> => async dispatch => {\n    dispatch(setId(id))\n    dispatch(fetchBootstrap(id))\n}\n\nexport default settings.reducer","import React from 'react'\nimport classNames from 'classnames'\nimport './Button.scss'\n\ntype Props = {\n    label: string\n    type?: 'reset' | 'submit' | 'button'\n    disabled?: boolean\n    secondary?: boolean\n    onClick?: () => void\n}\n\nconst Button: React.FC<Props> = (props: Props) => (\n    <button\n        className={classNames('button', { 'button--secondary': props.secondary })}\n        type={props.type || 'button'}\n        onClick={props.onClick}\n        disabled={props.disabled}\n    >\n        {props.label}\n    </button>\n)\n\nexport default Button","import React from 'react'\n\nconst useClickOutside = <T extends HTMLElement>(callback: () => void): React.RefObject<T> => {\n  const element = React.useRef<T>(null)\n\n  React.useEffect(() => {\n    const listener = (e: MouseEvent): void => {\n      if (e.target instanceof Node && element.current && !element.current.contains(e.target)) {\n        callback()\n      }\n    }\n\n    if (element.current) {\n      document.addEventListener('click', listener)\n    } else {\n      document.removeEventListener('click', listener)\n    }\n\n    return () => document.removeEventListener('click', listener)\n  }, [element, callback])\n\n  return element\n}\n\nexport default useClickOutside\n","import { useSelector } from 'react-redux'\nimport { RootState } from '../reducers'\n\nconst useMeanLabel: () => (suffix: string) => string = () => {\n    const strategy = useSelector((state: RootState) => state.settings.meanStrategy)\n\n    return (suffix: string) => `${strategy === 'average' ? 'Average' : 'Median'} ${suffix}`\n}\n\nexport default useMeanLabel","import { useSelector } from 'react-redux'\nimport { RootState } from '../reducers'\nimport { average, median } from '../utilities'\n\nconst useMeanValue: () => (series: number[]) => number = () => {\n    const strategy = useSelector((state: RootState) => state.settings.meanStrategy)\n\n    return (series: number[]) => {\n        if (strategy === 'average') {\n            return average(series)\n        }\n\n        return median(series)\n    }\n}\n\nexport default useMeanValue","import React, { useState, useEffect, useCallback } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { useHistory } from 'react-router-dom'\nimport { fetchDataWithId } from '../../reducers/settings'\nimport { Button } from '../Button'\nimport { useClickOutside } from '../../hooks'\nimport { validateTeamId } from '../../utilities'\nimport { RootState } from '../../reducers'\nimport './Modal.scss'\n\ntype Props = {\n    onClose?: () => void\n}\n\nconst Modal: React.FC<Props> = (props: Props) => {\n    const [ value, setValue ] = useState<string>('')\n\n    const id = useSelector((state: RootState) => state.settings.id)\n\n    const dispatch = useDispatch()\n    const history = useHistory()\n\n    const close = useCallback((cancel: boolean) => {\n        if (!cancel) {\n            dispatch(fetchDataWithId(Number(value)))\n            history.push(`/${value}/`)\n        } else if (!id) {\n            return\n        }\n\n        if (props.onClose) {\n            props.onClose()\n        }\n    }, [ dispatch, props, value, id, history ])\n\n    const ref = useClickOutside<HTMLDivElement>(() => close(true))\n\n    useEffect(() => {\n        const listener = (e: KeyboardEvent) => {\n            if (e.key === 'Escape') {\n                close(true)\n            }\n        }\n\n        document.addEventListener('keyup', listener)\n\n        return () => document.removeEventListener('keyup', listener)\n    }, [ close ])\n\n    return (\n        <form onSubmit={e => { close(false); e.preventDefault() }}>\n            <div className=\"modal\">\n                <div className=\"modal__element\" ref={ref}>\n                    <header className=\"modal__header\">\n                        Enter Your Team ID\n                    </header>\n                    <div className=\"modal__body\">\n                        <input\n                            className=\"modal__input\"\n                            type=\"text\"\n                            placeholder=\"e.g. 4654486\"\n                            value={value}\n                            onChange={e => setValue(e.target.value)}\n                        />\n                    </div>\n                    <footer className=\"modal__footer\">\n                        <Button\n                            label=\"Show Stats\"\n                            type=\"submit\"\n                            disabled={!validateTeamId(value)}\n                        />\n                    </footer>\n                </div>\n            </div>\n        </form>\n    )\n}\n\nexport default Modal\n","import React from 'react'\nimport { useSelector } from 'react-redux'\nimport { RootState } from '../../reducers'\nimport { head, last, round, sort, thousandsSeparator } from '../../utilities'\nimport { Widget } from '../Widget'\nimport { useMeanValue, useMeanLabel } from '../../hooks'\n\nconst HistoryWidget: React.FC = () => {\n    const history = useSelector((state: RootState) => state.history.data)\n\n    const meanLabel = useMeanLabel()\n    const meanValue = useMeanValue()\n\n    if (!history) {\n        return (\n            <Widget title=\"Historical Data\" />\n        )\n    }\n\n    const pastSeasonsByRank = sort(history.past, el => el.rank, 'asc')\n    const pastSeasonsByPoints = sort(history.past, el => el.total_points)\n\n    const bestRankedSeason = head(pastSeasonsByRank)\n    const worstRankedSeason = last(pastSeasonsByRank)\n\n    const bestPointSeason = head(pastSeasonsByPoints)\n    const worstPointSeason = last(pastSeasonsByPoints)\n\n    const top1k = pastSeasonsByRank.filter(season => season.rank <= 1000).length\n    const top10k = pastSeasonsByRank.filter(season => season.rank <= 10000).length\n    const top100k = pastSeasonsByRank.filter(season => season.rank <= 100000).length\n    const top1m = pastSeasonsByRank.filter(season => season.rank <= 1000000).length\n\n    return (\n        <Widget title=\"Historical Data\">\n            <ul className=\"widget__list\">\n                {bestRankedSeason && (\n                    <li className=\"widget__list__item\">\n                        <span>Best Season Rank</span>\n                        <span><b>{thousandsSeparator(bestRankedSeason.rank)}</b> ({bestRankedSeason.season_name})</span>\n                    </li>\n                )}\n                {worstRankedSeason && (\n                    <li className=\"widget__list__item\">\n                        <span>Worst Season Rank</span>\n                        <span><b>{thousandsSeparator(worstRankedSeason.rank)}</b> ({worstRankedSeason.season_name})</span>\n                    </li>\n                )}\n                {bestPointSeason && (\n                    <li className=\"widget__list__item\">\n                        <span>Best Points Finish</span>\n                        <span><b>{thousandsSeparator(bestPointSeason.total_points)}</b> ({bestPointSeason.season_name})</span>\n                    </li>\n                )}\n                {worstPointSeason && (\n                    <li className=\"widget__list__item\">\n                        <span>Worst Points Finish</span>\n                        <span><b>{thousandsSeparator(worstPointSeason.total_points)}</b> ({worstPointSeason.season_name})</span>\n                    </li>\n                )}\n                <li className=\"widget__list__item\">\n                    <span>{meanLabel('Rank')}</span>\n                    <b>{thousandsSeparator(Number(round(meanValue(pastSeasonsByRank.map((season) => season.rank)), 0)))}</b>\n                </li>\n                <li className=\"widget__list__item\">\n                    <span>{meanLabel('Points')}</span>\n                    <b>{thousandsSeparator(Number(round(meanValue(pastSeasonsByPoints.map((season) => season.total_points)), 0)))}</b>\n                </li>\n                <li className=\"widget__list__item\">\n                    <span>Top 1K Finishes</span>\n                    <b>{top1k}</b>\n                </li>\n                <li className=\"widget__list__item\">\n                    <span>Top 10K Finishes</span>\n                    <b>{top10k}</b>\n                </li>\n                <li className=\"widget__list__item\">\n                    <span>Top 100K Finishes</span>\n                    <b>{top100k}</b>\n                </li>\n                <li className=\"widget__list__item\">\n                    <span>Top 1M Finishes</span>\n                    <b>{top1m}</b>\n                </li>\n            </ul>\n        </Widget>\n    )\n}\n\nexport default HistoryWidget","import React from 'react'\nimport { useSelector } from 'react-redux'\nimport { RootState } from '../../reducers'\nimport './TotsPlayer.scss'\n\ntype Props = {\n    id: number\n    points: number\n}\n\nconst TotsPlayer: React.FC<Props> = (props: Props) => {\n    const bootstrap = useSelector((state: RootState) => state.bootstrap.data)\n\n    const player = bootstrap?.elements.find(el => el.id === props.id)\n    const team = bootstrap?.teams.find(el => el.id === player?.team)\n    const position = bootstrap?.element_types.find(el => el.id === player?.element_type)\n\n    return (\n        <div className=\"tots-player\">\n            <img\n                src={`https://fantasy.premierleague.com/dist/img/shirts/special/shirt_${team?.code}${position?.singular_name_short === 'GKP' ? '_1' : ''}-66.png`}\n                alt={player?.web_name}\n                className=\"tots-player__shirt\"\n            />\n            <div className=\"tots-player__detail\">\n                <div className=\"tots-player__name\">\n                    <span>{player?.web_name}</span>\n                </div>\n                <div className=\"tots-player__points\">\n                    {props.points}\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default TotsPlayer","import React from 'react'\nimport { useSelector } from 'react-redux'\nimport { RootState } from '../../reducers'\nimport { TotsPlayer } from '../TotsPlayer'\nimport { Widget } from '../Widget'\nimport './TotsWidget.scss'\n\nconst TotsWidget: React.FC = () => {\n    const tots = useSelector((state: RootState) => state.stats.tots)\n\n    if (!tots) {\n        return (\n            <Widget title=\"Team of the Season\" />\n        )\n    }\n\n    return (\n        <Widget title=\"Team of the Season\" cssClasses=\"tots-widget\">\n            <div className=\"tots\">\n                <div className=\"tots__row\">\n                    {tots.xi.filter(el => el.element.element_type === 1).map(player => (\n                        <TotsPlayer\n                            key={player.element.id}\n                            id={player.element.id}\n                            points={player.aggregates.totals.points}\n                        />\n                    ))}\n                </div>\n                <div className=\"tots__row\">\n                    {tots.xi.filter(el => el.element.element_type === 2).map(player => (\n                        <TotsPlayer\n                            key={player.element.id}\n                            id={player.element.id}\n                            points={player.aggregates.totals.points}\n                        />\n                    ))}\n                </div>\n                <div className=\"tots__row\">\n                    {tots.xi.filter(el => el.element.element_type === 3).map(player => (\n                        <TotsPlayer\n                            key={player.element.id}\n                            id={player.element.id}\n                            points={player.aggregates.totals.points}\n                        />\n                    ))}\n                </div>\n                <div className=\"tots__row\">\n                    {tots.xi.filter(el => el.element.element_type === 4).map(player => (\n                        <TotsPlayer\n                            key={player.element.id}\n                            id={player.element.id}\n                            points={player.aggregates.totals.points}\n                        />\n                    ))}\n                </div>\n                <div className=\"tots__row tots__row--bench\">\n                    {tots.bench.map(player => (\n                        <TotsPlayer\n                            key={player.element.id}\n                            id={player.element.id}\n                            points={player.aggregates.totals.points}\n                        />\n                    ))}\n                </div>\n            </div>\n        </Widget>\n    )\n}\n\nexport default TotsWidget","import React from 'react'\nimport './Metric.scss'\n\nconst explanations = {\n    'ppg': 'Points per Game',\n    'ppp': 'Points per Player',\n}\n\ntype Props = {\n    metric: 'ppg' | 'ppp'\n}\n\nconst Metric: React.FC<Props> = (props: Props) => {\n    return (\n        <abbr className=\"metric\" title={explanations[props.metric]}>{props.metric}</abbr>\n    )\n}\n\nexport default Metric","import React from 'react'\nimport { useSelector } from 'react-redux'\nimport { RootState } from '../../reducers'\n\ntype Props = {\n    label?: string\n    event?: number\n    target?: 'transfers'\n}\n\nconst SiteLink: React.FC<Props> = (props: Props) => {\n    const id = useSelector((state: RootState) => state.settings.id)\n\n    const baseUrl = `https://fantasy.premierleague.com/entry/${id}/`\n    let url = baseUrl\n\n    if (props.event) {\n        url = `${url}event/${props.event}/`\n    } else if (props.target) {\n        url = `${url}${props.target}/`\n    }\n\n    return (\n        <a href={url} target=\"_blank\" rel=\"noopener noreferrer\">\n            {props.event ? `GW ${props.event}` : props.label ? props.label : url}\n        </a>\n    )\n}\n\nexport default SiteLink","import React from 'react'\nimport { useSelector } from 'react-redux'\nimport { RootState } from '../../reducers'\nimport { StatData } from '../../types'\nimport { getAllPlayers, getTopStatAggregate, thousandsSeparator, round, sort, head, getPointsLabel } from '../../utilities'\nimport { Metric } from '../Metric'\nimport { Player } from '../Player'\nimport { SiteLink } from '../SiteLink'\nimport { Widget } from '../Widget'\n\nconst renderTopBenchGWReturner = (returner: StatData): JSX.Element | null => {\n    const week = head(returner.data)\n\n    if (!week) {\n        return null\n    }\n\n    return (\n        <li className=\"widget__list__item\">\n            <span>Top GW Bench Returner</span>\n            <span>\n                <Player\n                    id={returner.element.id}\n                    suffix={() => (\n                        <>\n                            {' '}\n                            (\n                                {getPointsLabel(week.rawPoints || 0)},\n                                {' '}\n                                <SiteLink event={week.event.id} />\n                            )\n                        </>\n                    )}\n\n                    reversed\n                />\n            </span>\n        </li>\n    )\n}\n\nconst PlayerStatsWidget: React.FC = () => {\n    const stats = useSelector((state: RootState) => state.stats.data)\n    const history = useSelector((state: RootState) => state.history.data)\n\n    if (!history || !stats) {\n        return (\n            <Widget title=\"Player Stats\" />\n        )\n    }\n\n    const allPlayers = getAllPlayers(stats)\n\n    const reds = getTopStatAggregate(allPlayers, 'redCards')\n    const yellows = getTopStatAggregate(allPlayers, 'yellowCards')\n    const goals = getTopStatAggregate(allPlayers, 'goals')\n    const assists = getTopStatAggregate(allPlayers, 'assists')\n    const cleanSheets = getTopStatAggregate(allPlayers, 'cleanSheets')\n    const goalsConceded = getTopStatAggregate(allPlayers, 'goalsConceded')\n    const ownGoals = getTopStatAggregate(allPlayers, 'ownGoals')\n    const saves = getTopStatAggregate(allPlayers, 'saves')\n    const minutes = getTopStatAggregate(allPlayers, 'minutes')\n    const penaltiesMissed = getTopStatAggregate(allPlayers, 'penaltiesMissed')\n    const penaltiesSaved = getTopStatAggregate(allPlayers, 'penaltiesSaved')\n    const inDreamteam = getTopStatAggregate(allPlayers, 'timesInDreamteam')\n    const bps = getTopStatAggregate(allPlayers, 'bps')\n    const bonus = getTopStatAggregate(allPlayers, 'bonus')\n\n    const mostCaptaincies = head(sort(allPlayers, el => el.aggregates.totals.captaincies))\n\n    const topReturner = head(sort(\n        allPlayers\n            .map(player => ({\n                ...player,\n                data: sort([ ...player.data ], el => el.points || 0),\n            })),\n        el => head(el.data)?.points || 0\n    ))\n\n    const topBenchGWReturner = head(sort(\n        allPlayers\n            .map(player => ({\n                ...player,\n                data: sort(player.data.filter(data => data.multiplier === 0), el => el.rawPoints || 0),\n            }))\n            .filter(player => player.data.length),\n        el => head(el.data)?.rawPoints || 0\n    ))\n\n    const topSeasonReturner = head(sort(allPlayers, el => el.aggregates.totals.points))\n    const topBenchReturner = head(sort(allPlayers, el => el.aggregates.totals.benchPoints))\n\n    const weeks = history.current.length\n\n    const idealCaptain = head(sort(\n        Object.entries(Array.from(Array(weeks).keys())\n            .map((el, index) => head(sort(allPlayers, el => el.data[index].rawPoints || 0)))\n            .reduce((acc, curr) => curr ? ({\n                ...acc,\n                [curr.element.id]: (acc[curr.element.id] ? acc[curr.element.id] : 0) + 1,\n            }) : acc, {} as Record<number, number>)),\n        el => el[1]\n    ))\n\n    return (\n        <Widget title=\"Player Stats\">\n            <ul className=\"widget__list\">\n                {topReturner && (\n                    <li className=\"widget__list__item\">\n                        <span>Top GW Returner</span>\n                        <span>\n                            <Player\n                                id={topReturner.element.id}\n                                suffix={() => {\n                                    const week = head(topReturner.data)\n\n                                    if (!week) {\n                                        return null\n                                    }\n\n                                    return (\n                                        <>\n                                            {' '}\n                                            (\n                                                {getPointsLabel(week.points || 0)},\n                                                {' '}\n                                                <SiteLink event={week.event.id} />\n                                            )\n                                        </>\n                                    )\n                                }}\n\n                                reversed\n                            />\n                        </span>\n                    </li>\n                )}\n                {topSeasonReturner && (\n                    <li className=\"widget__list__item\">\n                        <span>Top Season Returner</span>\n                        {topSeasonReturner.aggregates.totals.starts > 0 && (\n                            <Player\n                                id={topSeasonReturner.element.id}\n                                suffix={() => (\n                                    <>\n                                        {' '}\n                                        (\n                                            {getPointsLabel(topSeasonReturner.aggregates.totals.points)},\n                                            {' '}\n                                            {round(topSeasonReturner.aggregates.totals.points / topSeasonReturner.aggregates.totals.starts)}\n                                            {' '}\n                                            <Metric metric=\"ppg\" />\n                                        )\n                                    </>\n                                )}\n\n                                reversed\n                            />\n                        )}\n                    </li>\n                )}\n                {topBenchGWReturner && renderTopBenchGWReturner(topBenchGWReturner)}\n                {topBenchReturner && (\n                    <li className=\"widget__list__item\">\n                        <span>Most Points While Benched</span>\n                        {topBenchReturner.aggregates.totals.benched > 0 && (\n                            <Player\n                                id={topBenchReturner.element.id}\n                                suffix={() => (\n                                    <>\n                                        {' '}\n                                        (\n                                            {getPointsLabel(topBenchReturner.aggregates.totals.benchPoints)},\n                                            {' '}\n                                            {round(topBenchReturner.aggregates.totals.benchPoints / topBenchReturner.aggregates.totals.benched)}\n                                            {' '}\n                                            <Metric metric=\"ppg\" />\n                                        )\n                                    </>\n                                )}\n\n                                reversed\n                            />\n                        )}\n                    </li>\n                )}\n                {goals && goals.aggregates.totals.goals > 0 && (\n                    <li className=\"widget__list__item\">\n                        <span>Top Scorer</span>\n                        <Player id={goals.element.id} suffix={`${goals.aggregates.totals.goals}`} reversed />\n                    </li>\n                )}\n                {assists && assists.aggregates.totals.assists > 0 && (\n                    <li className=\"widget__list__item\">\n                        <span>Most Assists</span>\n                        <Player id={assists.element.id} suffix={`${assists.aggregates.totals.assists}`} reversed />\n                    </li>\n                )}\n                {ownGoals && ownGoals.aggregates.totals.ownGoals > 0 && (\n                    <li className=\"widget__list__item\">\n                        <span>Most Own Goals</span>\n                        <Player id={ownGoals.element.id} suffix={`${ownGoals.aggregates.totals.ownGoals}`} reversed />\n                    </li>\n                )}\n                {goalsConceded && goalsConceded.aggregates.totals.goalsConceded > 0 && (\n                    <li className=\"widget__list__item\">\n                        <span>Most Goals Conceded</span>\n                        <Player id={goalsConceded.element.id} suffix={`${goalsConceded.aggregates.totals.goalsConceded}`} reversed />\n                    </li>\n                )}\n                {cleanSheets && cleanSheets.aggregates.totals.cleanSheets > 0 && (\n                    <li className=\"widget__list__item\">\n                        <span>Most Clean Sheets</span>\n                        <Player id={cleanSheets.element.id} suffix={`${cleanSheets.aggregates.totals.cleanSheets}`} reversed />\n                    </li>\n                )}\n                {saves && saves.aggregates.totals.saves > 0 && (\n                    <li className=\"widget__list__item\">\n                        <span>Most Saves</span>\n                        <Player id={saves.element.id} suffix={`${saves.aggregates.totals.saves}`} reversed />\n                    </li>\n                )}\n                {penaltiesMissed && penaltiesMissed.aggregates.totals.penaltiesMissed > 0 && (\n                    <li className=\"widget__list__item\">\n                        <span>Most Penalties Missed</span>\n                        <Player id={penaltiesMissed.element.id} suffix={`${penaltiesMissed.aggregates.totals.penaltiesMissed}`} reversed />\n                    </li>\n                )}\n                {penaltiesSaved && penaltiesSaved.aggregates.totals.penaltiesSaved > 0 && (\n                    <li className=\"widget__list__item\">\n                        <span>Most Penalties Saved</span>\n                        <Player id={penaltiesSaved.element.id} suffix={`${penaltiesSaved.aggregates.totals.penaltiesSaved}`} reversed />\n                    </li>\n                )}\n                {minutes && minutes.aggregates.totals.minutes > 0 && (\n                    <li className=\"widget__list__item\">\n                        <span>Most Minutes</span>\n                        <Player id={minutes.element.id} suffix={`${thousandsSeparator(minutes.aggregates.totals.minutes as number)}`} reversed />\n                    </li>\n                )}\n                {reds && reds.aggregates.totals.redCards > 0 && (\n                    <li className=\"widget__list__item\">\n                        <span>Most Red Cards</span>\n                        <Player id={reds.element.id} suffix={`${reds.aggregates.totals.redCards}`} reversed />\n                    </li>\n                )}\n                {yellows && yellows.aggregates.totals.yellowCards > 0 && (\n                    <li className=\"widget__list__item\">\n                        <span>Most Yellow Cards</span>\n                        <Player id={yellows.element.id} suffix={`${yellows.aggregates.totals.yellowCards}`} reversed />\n                    </li>\n                )}\n                {bonus && bonus.aggregates.totals.bonus > 0 && (\n                    <li className=\"widget__list__item\">\n                        <span>Most Bonus Points</span>\n                        <Player id={bonus.element.id} suffix={`${bonus.aggregates.totals.bonus}`} reversed />\n                    </li>\n                )}\n                {bps && bps.aggregates.totals.bps > 0 && (\n                    <li className=\"widget__list__item\">\n                        <span>Highest Total BPS</span>\n                        <Player id={bps.element.id} suffix={`${thousandsSeparator(bps.aggregates.totals.bps)}`} reversed />\n                    </li>\n                )}\n                {inDreamteam && inDreamteam.aggregates.totals.timesInDreamteam > 0 && (\n                    <li className=\"widget__list__item\">\n                        <span>Most Times in Dreamteam</span>\n                        <Player id={inDreamteam.element.id} suffix={`${inDreamteam.aggregates.totals.timesInDreamteam}`} reversed />\n                    </li>\n                )}\n                {mostCaptaincies && mostCaptaincies.aggregates.totals.captaincies > 0 && (\n                    <li className=\"widget__list__item\">\n                        <span>Most Captaincies</span>\n                        <Player id={mostCaptaincies.element.id} suffix={`${mostCaptaincies.aggregates.totals.captaincies}`} reversed />\n                    </li>\n                )}\n                {idealCaptain && (\n                    <li className=\"widget__list__item\">\n                        <span>Ideal Captain</span>\n                        <Player id={Number(idealCaptain[0])} suffix={`${idealCaptain[1]}`} reversed />\n                    </li>\n                )}\n            </ul>\n        </Widget>\n    )\n}\n\nexport default PlayerStatsWidget","import React from 'react'\nimport { useSelector } from 'react-redux'\nimport { RootState } from '../../reducers'\nimport { Widget } from '../Widget'\nimport { thousandsSeparator, sumNumbers, round, sort, getPointsLabel, getGWCountLabel } from '../../utilities'\nimport { Metric } from '../Metric'\n\ntype FormationInformation = {\n    count: number\n    points: number\n}\n\nconst formatFormation = (formation: string) => sumNumbers(formation.split('-').map(position => Number(position))) > 10 ? 'Bench Boost' : formation\n\nconst FormationWidget: React.FC = () => {\n    const stats = useSelector((state: RootState) => state.stats.data)\n\n    const history = useSelector((state: RootState) => state.history.data)\n\n    if (!stats || !history) {\n        return (\n            <Widget title=\"Formations\" />\n        )\n    }\n\n    const weeks = history.current.length\n\n    const formations = Object\n        .values(stats)\n        .map(position => {\n            const selections = position.map(player => player.data.map(data => data.multiplier))\n\n            return Array.from(Array(weeks).keys()).map((el, index) => selections\n                .map(player => (player[index] || 0) > 0)\n                .filter(val => !!val)\n                .length\n            )\n        })\n        .slice(1)\n\n    const data = Array\n        .from(Array(weeks).keys())\n        .map((el, index) => formations\n            .map(entries => entries[index])\n            .join('-')\n        )\n        .reduce((acc, formation, index) => ({\n            ...acc,\n            [formation]: {\n                count: (acc[formation] ? acc[formation].count : 0) + 1,\n                points: (acc[formation] ? acc[formation].points : 0) + history.current[index].points,\n            }\n        }), {} as Record<string, FormationInformation>)\n\n    return (\n        <Widget title=\"Formations\">\n            {Object.entries(data).length > 0 && (\n                <ul className=\"widget__list\">\n                    {sort(Object.entries(data), el => el[1].count).map(([ formation, information ]) => {\n                        return (\n                            <li className=\"widget__list__item\" key={formation}>\n                                <span>{formatFormation(formation)}</span>\n                                <div>\n                                    <div>\n                                        <b>{getGWCountLabel(information.count)}</b>\n                                    </div>\n                                    <div className=\"muted\">\n                                        {getPointsLabel(thousandsSeparator(information.points))}, {round(information.points / information.count)} <Metric metric=\"ppg\" />\n                                    </div>\n                                </div>\n                            </li>\n                        )\n                    })}\n                </ul>\n            )}\n        </Widget>\n    )\n}\n\nexport default FormationWidget","import React from 'react'\nimport { useSelector } from 'react-redux'\nimport { RootState } from '../../reducers'\nimport { thousandsSeparator, sumNumbers, round, sort, getPointsLabel, getGWCountLabel } from '../../utilities'\nimport { Player } from '../Player'\nimport { Widget } from '../Widget'\nimport { Metric } from '../Metric';\n\nconst CaptainWidget: React.FC = () => {\n    const stats = useSelector((state: RootState) => state.stats.data)\n\n    if (!stats) {\n        return (\n            <Widget title=\"Captains\" />\n        )\n    }\n\n    const captains = sort(\n        Object\n            .values(stats)\n            .map(position => {\n                return position\n                    .map(player => ({\n                        player,\n                        data: player.data.filter(data => (data.multiplier || 0) > 1),\n                    }))\n                    .filter(player => player.data.length > 0)\n            })\n            .reduce((acc, curr) => acc.concat(curr), []),\n        el => el.data.length\n    )\n\n    return (\n        <Widget title=\"Captains\">\n            {captains.length > 0 && (\n                <ul className=\"widget__list\">\n                    {captains.map(captain => {\n                        const sum = sumNumbers(captain.data.map(data => data.points || 0))\n\n                        return (\n                            <li className=\"widget__list__item\" key={captain.player.element.id}>\n                                <Player id={captain.player.element.id} />\n                                <div>\n                                    <div>\n                                        <b>{getGWCountLabel(captain.data.length)}</b>\n                                    </div>\n                                    <div className=\"muted\">\n                                        {getPointsLabel(thousandsSeparator(sum))}, {round(sum / captain.data.length)} <Metric metric=\"ppg\" />\n                                    </div>\n                                </div>\n                            </li>\n                        )\n                    })}\n                </ul>\n            )}\n        </Widget>\n    )\n}\n\nexport default CaptainWidget","import React from 'react'\nimport { useSelector } from 'react-redux'\nimport { useMeanLabel, useMeanValue } from '../../hooks'\nimport { RootState } from '../../reducers'\nimport { Widget } from '../Widget'\nimport { head, last, round, sort, thousandsSeparator, getPointsLabel } from '../../utilities'\nimport { SiteLink } from '../SiteLink'\n\nconst GameweekWidget: React.FC = () => {\n    const history = useSelector((state: RootState) => state.history.data)\n    const bootstrap = useSelector((state: RootState) => state.bootstrap.data)\n\n    const meanLabel = useMeanLabel()\n    const meanValue = useMeanValue()\n\n    if (!history || !bootstrap) {\n        return (\n            <Widget title=\"Gameweeks\" />\n        )\n    }\n\n    const differences = history.current.map((week, index) => week.points - bootstrap.events[index].average_entry_score)\n    const sortedRanks = sort(history.current, el => el.rank, 'asc')\n\n    const gws = sort(history.current, el => el.points)\n\n    const bestGW = head(gws)\n    const worstGW = last(gws)\n\n    const bestGWRank = head(sortedRanks)\n    const worstGWRank = last(sortedRanks)\n\n    return (\n        <Widget title=\"Gameweeks\">\n            <ul className=\"widget__list\">\n                <li className=\"widget__list__item\">\n                    <span>{meanLabel('Difference to GW Average')}</span>\n                    <b>{getPointsLabel(round(meanValue(differences)))}</b>\n                </li>\n                <li className=\"widget__list__item\">\n                    <span>Times Above GW Average</span>\n                    <b>{differences.filter(diff => diff >= 0).length}</b>\n                </li>\n                <li className=\"widget__list__item\">\n                    <span>Times Below GW Average</span>\n                    <b>{differences.filter(diff => diff < 0).length}</b>\n                </li>\n                <li className=\"widget__list__item\">\n                    <span>{meanLabel('GW Rank')}</span>\n                    <b>{thousandsSeparator(Number(round(meanValue(history.current.map(week => week.rank)))))}</b>\n                </li>\n                {bestGW && (\n                    <li className=\"widget__list__item\">\n                        <span>Best Gameweek</span>\n                        <span>\n                            <b>{getPointsLabel(bestGW.points)}</b>\n                            {' '}\n                            (\n                                <SiteLink event={bestGW.event} />\n                            )\n                        </span>\n                    </li>\n                )}\n                {worstGW && (\n                    <li className=\"widget__list__item\">\n                        <span>Worst Gameweek</span>\n                        <span>\n                            <b>{getPointsLabel(worstGW.points)}</b>\n                            {' '}\n                            (\n                                <SiteLink event={worstGW.event} />\n                            )\n                        </span>\n                    </li>\n                )}\n                {bestGWRank && (\n                    <li className=\"widget__list__item\">\n                        <span>Best GW Rank</span>\n                        <span>\n                            <b>{thousandsSeparator(bestGWRank.rank)}</b>\n                            {' '}\n                            (\n                                <SiteLink event={bestGWRank.event} />\n                            )\n                        </span>\n                    </li>\n                )}\n                {worstGWRank && (\n                    <li className=\"widget__list__item\">\n                        <span>Worst GW Rank</span>\n                        <span>\n                            <b>{thousandsSeparator(worstGWRank.rank)}</b>\n                            {' '}\n                            (\n                                <SiteLink event={worstGWRank.event} />\n                            )\n                        </span>\n                    </li>\n                )}\n            </ul>\n        </Widget>\n    )\n}\n\nexport default GameweekWidget","import React from 'react'\nimport { useSelector } from 'react-redux'\nimport { useMeanValue } from '../../hooks'\nimport { RootState } from '../../reducers'\nimport { thousandsSeparator, sumNumbers, round, reduce, getPointsLabel, pluralise } from '../../utilities'\nimport { Widget } from '../Widget'\nimport { Metric } from '../Metric';\n\nconst PositionsWidget: React.FC = () => {\n    const stats = useSelector((state: RootState) => state.stats.data)\n    const bootstrap = useSelector((state: RootState) => state.bootstrap.data)\n\n    const meanValue = useMeanValue()\n\n    if (!stats || !bootstrap) {\n        return (\n            <Widget title=\"Positions\" />\n        )\n    }\n\n    const positions: Record<string, number> = Object.entries(stats)\n        .reduce((acc, [ elementType, elements ]) => ({\n            ...acc,\n            [elementType]: elements.length,\n        }), {})\n\n    return (\n        <Widget title=\"Positions\">\n            {Object.entries(positions).length > 0 && (\n                <ul className=\"widget__list\">\n                    <li className=\"widget__list__item\">\n                        <span>Total</span>\n                        <b>{pluralise(reduce(Object.values(positions), el => el), 'Player', 'Players')}</b>\n                    </li>\n                    {Object.entries(positions).map(([ elementType, elements ]) => {\n                        const totalPoints = stats[Number(elementType)].map(player => player.aggregates.totals.points)\n\n                        return (\n                            <li className=\"widget__list__item\" key={elementType}>\n                                <span>{bootstrap.element_types.find(el => el.id === Number(elementType))?.plural_name}</span>\n                                <div>\n                                    <div>\n                                        <b>{pluralise(elements, 'Player', 'Players')}</b>\n                                    </div>\n                                    <div className=\"muted\">\n                                    {getPointsLabel(thousandsSeparator(sumNumbers(totalPoints)))}, {round(meanValue(totalPoints))} <Metric metric=\"ppp\" />\n                                    </div>\n                                </div>\n                            </li>\n                        )\n                    })}\n                </ul>\n            )}\n        </Widget>\n    )\n}\n\nexport default PositionsWidget","import React from 'react'\nimport { useSelector } from 'react-redux'\nimport { RootState } from '../../reducers'\nimport { Widget } from '../Widget'\nimport { getAllPlayers, head, thousandsSeparator, sumNumbers, reduce, round, getPointsLabel } from '../../utilities'\nimport { SiteLink } from '../SiteLink'\nimport { StatData } from '../../types'\nimport { StatAggregateTotals } from '../../types'\n\nconst getAggregateValues = (players: StatData[], key: keyof StatAggregateTotals): number => sumNumbers(players.map(player => player.aggregates.totals[key]))\n\nconst SeasonWidget: React.FC = () => {\n    const stats = useSelector((state: RootState) => state.stats.data)\n    const chips = useSelector((state: RootState) => state.stats.chips)\n\n    const history = useSelector((state: RootState) => state.history.data)\n\n    const entry = useSelector((state: RootState) => state.entry.data)\n\n    if (!stats || !history || !chips || !entry) {\n        return (\n            <Widget title=\"Season\" />\n        )\n    }\n\n    const allPlayers = getAllPlayers(stats)\n\n    const reds = getAggregateValues(allPlayers, 'redCards')\n    const yellows = getAggregateValues(allPlayers, 'yellowCards')\n    const goals = getAggregateValues(allPlayers, 'goals')\n    const assists = getAggregateValues(allPlayers, 'assists')\n    const cleanSheets = getAggregateValues(allPlayers, 'cleanSheets')\n    const goalsConceded = getAggregateValues(allPlayers, 'goalsConceded')\n    const ownGoals = getAggregateValues(allPlayers, 'ownGoals')\n    const saves = getAggregateValues(allPlayers, 'saves')\n    const minutes = getAggregateValues(allPlayers, 'minutes')\n    const penaltiesMissed = getAggregateValues(allPlayers, 'penaltiesMissed')\n    const penaltiesSaved = getAggregateValues(allPlayers, 'penaltiesSaved')\n    const inDreamteam = getAggregateValues(allPlayers, 'timesInDreamteam')\n    const bps = getAggregateValues(allPlayers, 'bps')\n    const bonus = getAggregateValues(allPlayers, 'bonus')\n\n    const totalTransfers = reduce(history.current, el => el.event_transfers)\n    const totalHits = reduce(history.current, el => el.event_transfers_cost / 4)\n    const totalBenched = reduce(history.current, el => el.points_on_bench)\n\n    const tc = allPlayers\n        .find(player => player.data.findIndex(data => data.multiplier === 3) !== -1)\n        ?.data\n        .find(data => data.multiplier === 3)\n\n    const bbWeek = head(Object.entries(chips).find(([ gw, chip ]) => chip === 'bboost') || [])\n\n    const bbPoints = bbWeek\n        ? sumNumbers(allPlayers\n            .filter(player => (player.data[Number(bbWeek) - 1].position || 0) > 11)\n            .map(player => player.data[Number(bbWeek) - 1].points || 0))\n        : null\n\n    const doubleDigitHauls = reduce(allPlayers.map(player => player.data.filter(data => (data.rawPoints || 0) > 9).length), el => el)\n    const totalPlays = reduce(allPlayers.map(player => player.data.filter(data => data.multiplier !== null).length), el => el)\n\n    return (\n        <Widget title=\"Season\">\n            <ul className=\"widget__list\">\n                <li className=\"widget__list__item\">\n                    <span>Total Transfers Made</span>\n                    <span>\n                        <SiteLink target=\"transfers\" label={`${totalTransfers}`} />\n                    </span>\n                </li>\n                <li className=\"widget__list__item\">\n                    <span>Total Hits Taken</span>\n                    <span><b>{totalHits}</b> ({getPointsLabel(totalHits * -4)}, {entry.summary_overall_points > 0 ? round(totalHits * 4 / entry.summary_overall_points * 100) : 0}%)</span>\n                </li>\n                <li className=\"widget__list__item\">\n                    <span>Total Points</span>\n                    <b>{getPointsLabel(thousandsSeparator(entry.summary_overall_points))}</b>\n                </li>\n                <li className=\"widget__list__item\">\n                    <span>Total Points on Bench</span>\n                    <b>{getPointsLabel(thousandsSeparator(totalBenched))}</b>\n                </li>\n                <li className=\"widget__list__item\">\n                    <span>Double Digit Hauls</span>\n                    <span><b>{doubleDigitHauls}</b>{totalPlays > 0 && ` (${round(doubleDigitHauls / totalPlays)}%)`}</span>\n                </li>\n                {tc !== undefined && (\n                    <li className=\"widget__list__item\">\n                        <span>Triple Captain Points Gained</span>\n                        <span>\n                            <b>{getPointsLabel((tc.points || 0) / 3)}</b>\n                            {' '}\n                            (\n                                <SiteLink event={tc.event.id} />\n                            )\n                        </span>\n                    </li>\n                )}\n                {bbPoints !== null && (\n                    <li className=\"widget__list__item\">\n                        <span>Bench Boost Points Gained</span>\n                        <span>\n                            <b>{getPointsLabel(bbPoints)}</b>\n                            {' '}\n                            (\n                                <SiteLink event={Number(bbWeek)} />\n                            )\n                        </span>\n                    </li>\n                )}\n                <li className=\"widget__list__item\">\n                    <span>Total Goals Scored</span>\n                    <b>{goals}</b>\n                </li>\n                <li className=\"widget__list__item\">\n                    <span>Total Assists</span>\n                    <b>{assists}</b>\n                </li>\n                <li className=\"widget__list__item\">\n                    <span>Total Own Goals</span>\n                    <b>{ownGoals}</b>\n                </li>\n                <li className=\"widget__list__item\">\n                    <span>Total Goals Conceded</span>\n                    <b>{goalsConceded}</b>\n                </li>\n                <li className=\"widget__list__item\">\n                    <span>Total Clean Sheets</span>\n                    <b>{cleanSheets}</b>\n                </li>\n                <li className=\"widget__list__item\">\n                    <span>Total Saves</span>\n                    <b>{saves}</b>\n                </li>\n                <li className=\"widget__list__item\">\n                    <span>Total Penalties Missed</span>\n                    <b>{penaltiesMissed}</b>\n                </li>\n                <li className=\"widget__list__item\">\n                    <span>Total Penalties Saved</span>\n                    <b>{penaltiesSaved}</b>\n                </li>\n                <li className=\"widget__list__item\">\n                    <span>Total Minutes Played</span>\n                    <b>{thousandsSeparator(minutes)}</b>\n                </li>\n                <li className=\"widget__list__item\">\n                    <span>Total Red Cards</span>\n                    <b>{reds}</b>\n                </li>\n                <li className=\"widget__list__item\">\n                    <span>Total Yellow Cards</span>\n                    <b>{yellows}</b>\n                </li>\n                <li className=\"widget__list__item\">\n                    <span>Total Bonus Points</span>\n                    <b>{thousandsSeparator(bonus)}</b>\n                </li>\n                <li className=\"widget__list__item\">\n                    <span>Total BPS</span>\n                    <b>{thousandsSeparator(bps)}</b>\n                </li>\n                <li className=\"widget__list__item\">\n                    <span>Total Times in Dreamteam</span>\n                    <b>{inDreamteam}</b>\n                </li>\n            </ul>\n        </Widget>\n    )\n}\n\nexport default SeasonWidget","import React from 'react'\nimport { Team as TeamType } from '../../types'\nimport './Team.scss'\n\ntype Props = {\n    team: TeamType\n}\n\nconst Team: React.FC<Props> = (props: Props) => (\n    <div className=\"team\">\n        <img\n            src={`https://fantasy.premierleague.com/dist/img/shirts/special/shirt_${props.team.code}-66.png`}\n            alt={props.team.short_name}\n            className=\"player__shirt\"\n        />\n        <span className=\"team__name\">{props.team.name}</span>\n    </div>\n)\n\nexport default Team","import React from 'react'\nimport { useSelector } from 'react-redux'\nimport { RootState } from '../../reducers'\nimport { Team } from '../Team'\nimport { Widget } from '../Widget'\nimport { getAllPlayers, getPointsLabel, round, sort, sumNumbers } from '../../utilities'\nimport { Metric } from '../Metric'\nimport './TeamsWidget.scss'\n\nconst TeamsWidget: React.FC = () => {\n    const stats = useSelector((state: RootState) => state.stats.data)\n    const bootstrap = useSelector((state: RootState) => state.bootstrap.data)\n\n    if (!stats || !bootstrap) {\n        return (\n            <Widget title=\"Teams\" />\n        )\n    }\n\n    const counts = Object.values(stats)\n        .reduce((acc: number[], curr) => [ ...acc, ...curr.map(el => el.element.team) ], [])\n        .reduce((acc: { [key: number]: number }, curr) => ({ ...acc, [curr]: (acc[Number(curr)] || 0) + 1 }), {})\n\n    const teams = sort(bootstrap.teams, el => counts[el.id] || 0)\n\n    const allPlayers = getAllPlayers(stats)\n\n    return (\n        <Widget title=\"Teams\" cssClasses=\"teams-widget\">\n            {teams.length > 0 && (\n                <ul className=\"widget__list\">\n                    {teams.map(team => {\n                        const players = allPlayers.filter(player => player.element.team === team.id)\n                        const points = sumNumbers(players.map(player => player.aggregates.totals.points))\n\n                        return (\n                            <li className=\"teams-widget__item\" key={team.id}>\n                                <div className=\"teams-widget__header\">\n                                    <Team team={team} />\n                                    <div>\n                                        <div>\n                                            <b>{counts[team.id] || 0}</b>\n                                        </div>\n                                        <div className=\"muted\">\n                                            {getPointsLabel(points)}, {players.length > 0 ? round(points / players.length) : 0} <Metric metric=\"ppp\" />\n                                        </div>\n                                    </div>\n                                </div>\n                                <div>\n                                    {Object.entries(stats).map(([ position, players ]) => {\n                                        const positionPlayers = players.filter(player => player.element.team === team.id)\n\n                                        if (!positionPlayers.length) {\n                                            return null\n                                        }\n\n                                        return (\n                                            <div className=\"teams-widget__position\" data-position={bootstrap.element_types.find(el => el.id === Number(position))?.plural_name_short} key={position}>\n                                                {sort(positionPlayers.filter(player => player.element.team === team.id), el => el.aggregates.totals.points)\n                                                    .map(player => (\n                                                        <div key={player.element.id}>{player.element.web_name} ({getPointsLabel(player.aggregates.totals.points)})</div>\n                                                    ))\n                                                }\n                                            </div>\n                                        )\n                                    })}\n                                </div>\n                            </li>\n                        )\n                    })}\n                </ul>\n            )}\n        </Widget>\n    )\n}\n\nexport default TeamsWidget","import React from 'react'\nimport { useSelector } from 'react-redux'\nimport { RootState } from '../../reducers'\nimport { getAllPlayers, getGWCountLabel, round, getPointsLabel } from '../../utilities'\nimport { Metric } from '../Metric'\nimport { Player } from '../Player'\nimport { SiteLink } from '../SiteLink'\nimport { Widget } from '../Widget'\n\nconst MAX_ITEMS = 10\n\nconst NonBlankStreakWidget: React.FC = () => {\n    const stats = useSelector((state: RootState) => state.stats.data)\n\n    if (!stats) {\n        return (\n            <Widget title=\"Highest Non-Blank Streaks\" />\n        )\n    }\n\n    const streakers = getAllPlayers(stats)\n        .sort((a, b) => {\n            const aStreak = a.aggregates.streaks.nonBlank\n            const bStreak = b.aggregates.streaks.nonBlank\n\n            const aStreakLength = a.aggregates.streaks.nonBlank?.length || 0\n            const bStreakLength = b.aggregates.streaks.nonBlank?.length || 0\n\n            if (bStreakLength - aStreakLength === 0) {\n                return (bStreak?.points || 0) - (aStreak?.points || 0)\n            }\n\n            return bStreakLength - aStreakLength\n        })\n        .filter(streaker => streaker.aggregates.streaks.nonBlank !== null)\n        .slice(0, MAX_ITEMS)\n\n    return (\n        <Widget title=\"Highest Non-Blank Streaks\">\n            {streakers.length > 0 && (\n                <ul className=\"widget__list\">\n                    {streakers.map(streaker => {\n                        const streak = streaker.aggregates.streaks.nonBlank\n\n                        if (!streak) {\n                            return null\n                        }\n\n                        return (\n                            <li className=\"widget__list__item\" key={streaker.element.id}>\n                                <Player id={streaker.element.id} />\n                                <div>\n                                    <div className=\"duration\">\n                                        <SiteLink event={streak.start.id} /> – <SiteLink event={streak.end.id} />\n                                    </div>\n                                    <div className=\"muted\">\n                                        {getGWCountLabel(streak.length)}, {getPointsLabel(streak.points || 0)}, {round((streak.points || 0) / streak.length)} <Metric metric=\"ppg\" />\n                                    </div>\n                                </div>\n                            </li>\n                        )\n                    })}\n                </ul>\n            )}\n        </Widget>\n    )\n}\n\nexport default NonBlankStreakWidget","import React from 'react'\nimport { useSelector } from 'react-redux'\nimport { RootState } from '../../reducers'\nimport { getAllPlayers, getGWCountLabel, getPointsLabel, round } from '../../utilities'\nimport { Metric } from '../Metric'\nimport { Player } from '../Player'\nimport { SiteLink } from '../SiteLink'\nimport { Widget } from '../Widget'\n\nconst MAX_ITEMS = 10\n\nconst SelectionStreakWidget: React.FC = () => {\n    const stats = useSelector((state: RootState) => state.stats.data)\n\n    if (!stats) {\n        return (\n            <Widget title=\"Highest Selection Streaks\" />\n        )\n    }\n\n    const streakers = getAllPlayers(stats)\n        .sort((a, b) => {\n            const aStreak = a.aggregates.streaks.selection\n            const bStreak = b.aggregates.streaks.selection\n\n            const aStreakLength = a.aggregates.streaks.selection?.length || 0\n            const bStreakLength = b.aggregates.streaks.selection?.length || 0\n\n            if (bStreakLength - aStreakLength === 0) {\n                return (bStreak?.points || 0) - (aStreak?.points || 0)\n            }\n\n            return bStreakLength - aStreakLength\n        })\n        .filter(streaker => streaker.aggregates.streaks.selection !== null)\n        .slice(0, MAX_ITEMS)\n\n    return (\n        <Widget title=\"Highest Selection Streaks\">\n            {streakers.length > 0 && (\n                <ul className=\"widget__list\">\n                    {streakers.map(streaker => {\n                        const streak = streaker.aggregates.streaks.selection\n\n                        if (!streak) {\n                            return null\n                        }\n\n                        return (\n                            <li className=\"widget__list__item\" key={streaker.element.id}>\n                                <Player id={streaker.element.id} />\n                                <div>\n                                    <div className=\"duration\">\n                                        <SiteLink event={streak.start.id} /> – <SiteLink event={streak.end.id} />\n                                    </div>\n                                    <div className=\"muted\">\n                                        {getGWCountLabel(streak.length)}, {getPointsLabel(streak.points || 0)}, {round((streak.points || 0) / streak.length)} <Metric metric=\"ppg\" />\n                                    </div>\n                                </div>\n                            </li>\n                        )\n                    })}\n                </ul>\n            )}\n        </Widget>\n    )\n}\n\nexport default SelectionStreakWidget","import React from 'react'\nimport { useSelector } from 'react-redux'\nimport { RootState } from '../../reducers'\nimport { getAllPlayers, getGWCountLabel, getPointsLabel, round } from '../../utilities'\nimport { Metric } from '../Metric'\nimport { Player } from '../Player'\nimport { SiteLink } from '../SiteLink'\nimport { Widget } from '../Widget'\n\nconst MAX_ITEMS = 10\n\nconst StartStreakWidget: React.FC = () => {\n    const stats = useSelector((state: RootState) => state.stats.data)\n\n    if (!stats) {\n        return (\n            <Widget title=\"Highest Start Streaks\" />\n        )\n    }\n\n    const streakers = getAllPlayers(stats)\n        .sort((a, b) => {\n            const aStreak = a.aggregates.streaks.start\n            const bStreak = b.aggregates.streaks.start\n\n            const aStreakLength = a.aggregates.streaks.start?.length || 0\n            const bStreakLength = b.aggregates.streaks.start?.length || 0\n\n            if (bStreakLength - aStreakLength === 0) {\n                return (bStreak?.points || 0) - (aStreak?.points || 0)\n            }\n\n            return bStreakLength - aStreakLength\n        })\n        .filter(streaker => streaker.aggregates.streaks.start !== null)\n        .slice(0, MAX_ITEMS)\n\n    return (\n        <Widget title=\"Highest Start Streaks\">\n            {streakers.length > 0 && (\n                <ul className=\"widget__list\">\n                    {streakers.map(streaker => {\n                        const streak = streaker.aggregates.streaks.start\n\n                        if (!streak) {\n                            return null\n                        }\n\n                        return (\n                            <li className=\"widget__list__item\" key={streaker.element.id}>\n                                <Player id={streaker.element.id} />\n                                <div>\n                                    <div className=\"duration\">\n                                        <SiteLink event={streak.start.id} /> – <SiteLink event={streak.end.id} />\n                                    </div>\n                                    <div className=\"muted\">\n                                        {getGWCountLabel(streak.length)}, {getPointsLabel(streak.points || 0)}, {round((streak.points || 0) / streak.length)} <Metric metric=\"ppg\" />\n                                    </div>\n                                </div>\n                            </li>\n                        )\n                    })}\n                </ul>\n            )}\n        </Widget>\n    )\n}\n\nexport default StartStreakWidget","import React from 'react'\nimport { useSelector } from 'react-redux'\nimport { RootState } from '../../reducers'\nimport { getAllPlayers, getGWCountLabel, sort } from '../../utilities'\nimport { Player } from '../Player'\nimport { SiteLink } from '../SiteLink'\nimport { Widget } from '../Widget'\n\nconst MAX_ITEMS = 10\n\nconst BenchStreakWidget: React.FC = () => {\n    const stats = useSelector((state: RootState) => state.stats.data)\n\n    if (!stats) {\n        return (\n            <Widget title=\"Highest Bench Appearance Streaks\" />\n        )\n    }\n\n    const allPlayers = getAllPlayers(stats)\n\n    const streakers = sort(allPlayers, el => el.aggregates.streaks.bench?.length || 0).slice(0, MAX_ITEMS)\n\n    return (\n        <Widget title=\"Highest Bench Appearance Streaks\">\n            {streakers.length > 0 && (\n                <ul className=\"widget__list\">\n                    {streakers.map(streaker => {\n                        const streak = streaker.aggregates.streaks.bench\n\n                        if (!streak) {\n                            return null\n                        }\n\n                        return (\n                            <li className=\"widget__list__item\" key={streaker.element.id}>\n                                <Player id={streaker.element.id} />\n                                <div>\n                                    <div className=\"duration\">\n                                        <SiteLink event={streak.start.id} /> – <SiteLink event={streak.end.id} />\n                                    </div>\n                                    <div className=\"muted\">\n                                        {getGWCountLabel(streak.length)}\n                                    </div>\n                                </div>\n                            </li>\n                        )\n                    })}\n                </ul>\n            )}\n        </Widget>\n    )\n}\n\nexport default BenchStreakWidget","import React from 'react'\n\nconst SwapIcon: React.FC = () => {\n    return (\n        <svg width=\"32\" height=\"20\" viewBox=\"0 0 32 20\" fill=\"#94968C\" className=\"swap-icon\">\n            <path fillRule=\"evenodd\" d=\"M53.6485838,32.0017628 L50.0028805,32.002243 L44.1795487,32.002243 L42.8449352,32.002243 C42.2448392,32.002243 41.6106577,32.2648846 41.1853096,32.6869358 C40.7782045,33.0941023 40.4723956,33.7595891 40.5007201,34.3468117 C40.5285646,34.9508394 40.7258761,35.5807952 41.1853096,36.0066875 C41.6447432,36.4287387 42.2069131,36.6913803 42.8449352,36.6913803 L46.4978397,36.6913803 L47.9851176,36.6913803 L45.4666347,39.209763 C43.6044167,41.0722619 41.7383581,42.9386019 39.8780605,44.7991802 C38.2707633,46.4067198 36.6673068,48.0104182 35.0585694,49.6193983 C34.2803649,50.3977202 33.4867979,51.1722009 32.7181949,51.9601258 L32.6845895,51.9937362 C32.2568411,52.4215492 32,53.0481439 32,53.6536121 C32,54.2317118 32.2530005,54.9140038 32.6845895,55.313488 C33.1305809,55.7206545 33.7157945,56.0265096 34.3442151,55.9981808 C34.9721555,55.9703321 35.5592895,55.7600268 36.0038406,55.313488 L37.931349,53.3856888 L42.5261642,48.7906607 L48.1147384,43.2007634 C49.1805089,42.1348321 50.2462794,41.0689008 51.3115699,40.0034497 L51.3115699,43.8239971 L51.3115699,45.1597723 C51.3115699,45.7599588 51.5741719,46.3937558 51.9961594,46.8196481 C52.4032645,47.2263345 53.068651,47.5321896 53.6557849,47.5038608 C54.2597216,47.4760121 54.8895823,47.279151 55.3154105,46.8196481 C55.7316371,46.3582247 56,45.7954898 56,45.1597723 L56,41.5058366 L56,35.6821067 L56,34.3468117 C56,34.0073461 55.9183869,33.6846859 55.781085,33.3893941 C55.6649064,33.1209907 55.5084013,32.8717932 55.3082093,32.6864556 C54.8617379,32.2792891 54.2770043,31.9739142 53.6485838,32.0017628 Z\" transform=\"rotate(45 71.042 -6.799)\"></path>\n        </svg>\n    )\n}\n\nexport default SwapIcon","import React from 'react'\nimport { useSelector } from 'react-redux'\nimport { RootState } from '../../reducers'\nimport { getAllPlayers, getPointsLabel, head, sort } from '../../utilities'\nimport { Player } from '../Player'\nimport { Widget } from '../Widget'\nimport { SwapIcon } from '../SwapIcon'\nimport { SiteLink } from '../SiteLink'\nimport './CaptainOpportunityWidget.scss'\n\nconst CaptainOpportunityWidget: React.FC = () => {\n    const stats = useSelector((state: RootState) => state.stats.data)\n\n    const history = useSelector((state: RootState) => state.history.data)\n\n    if (!stats || !history) {\n        return (\n            <Widget title=\"Missed Captaincies\" />\n        )\n    }\n\n    const allPlayers = getAllPlayers(stats)\n    const weeks = history.current.length\n\n    const improvements = Array.from(Array(weeks).keys()).map((el, index) => ({\n        top: head(sort(allPlayers, el => el.data[index].rawPoints || 0)),\n        captain: allPlayers.find(player => (player.data[index].multiplier || 0) > 1),\n    }))\n\n    return (\n        <Widget title=\"Missed Captaincies\" cssClasses=\"captain-opportunity-widget\">\n            {improvements.length > 0 && (\n                <ul className=\"widget__list\">\n                    {improvements.map((improvement, index) => {\n                        if (!improvement.captain || !improvement.top) {\n                            return null\n                        }\n\n                        const captainData = improvement.captain.data[index]\n                        const topData = improvement.top.data[index]\n\n                        if (captainData.rawPoints === topData.rawPoints) {\n                            return null\n                        }\n\n                        return (\n                            <li className=\"widget__list__item\" key={captainData.event.id}>\n                                <div className=\"captain-opportunity-widget__group\">\n                                    <div className=\"captain-opportunity-widget__player\">\n                                        <b>OUT:</b> <Player id={improvement.captain.element.id} />\n                                    </div>\n                                    <div className=\"captain-opportunity-widget__player\">\n                                        <b>IN:</b> <Player id={improvement.top.element.id} />\n                                    </div>\n                                </div>\n                                <div className=\"captain-opportunity-widget__swap-info\">\n                                    <b>{getPointsLabel((captainData.rawPoints || 0) * 2)}</b> <SwapIcon /> <b>{getPointsLabel((topData.rawPoints || 0) * 2)} </b>\n                                    {' '}\n                                    (\n                                        <SiteLink event={captainData.event.id} />\n                                    )\n                                </div>\n                            </li>\n                        )\n                    })}\n                </ul>\n            )}\n        </Widget>\n    )\n}\n\nexport default CaptainOpportunityWidget","import React from 'react'\nimport { useSelector } from 'react-redux'\nimport { RootState } from '../../reducers'\nimport { Widget } from '../Widget'\nimport { getAllPlayers, getGWCountLabel, sort } from '../../utilities'\nimport { Player } from '../Player'\n\nconst MAX_ITEMS = 10\n\nconst TeamsWidget: React.FC = () => {\n    const stats = useSelector((state: RootState) => state.stats.data)\n\n    if (!stats) {\n        return (\n            <Widget title=\"Top Selections\" />\n        )\n    }\n\n    const elements = sort(getAllPlayers(stats), el => el.aggregates.totals.selections).slice(0, MAX_ITEMS)\n\n    return (\n        <Widget title=\"Top Selections\">\n            {elements.length > 0 && (\n                <ul className=\"widget__list\">\n                    {elements.map(element => (\n                        <li className=\"widget__list__item\" key={element.element.id}>\n                            <Player id={element.element.id} />\n                            <b>{getGWCountLabel(element.aggregates.totals.selections)}</b>\n                        </li>\n                    ))}\n                </ul>\n            )}\n        </Widget>\n    )\n}\n\nexport default TeamsWidget","import React from 'react'\nimport { useSelector } from 'react-redux'\nimport { RootState } from '../../reducers'\nimport { Widget } from '../Widget'\nimport { getAllPlayers, getGWCountLabel, sort } from '../../utilities'\nimport { Player } from '../Player'\n\nconst MAX_ITEMS = 10\n\nconst StarterWidget: React.FC = () => {\n    const stats = useSelector((state: RootState) => state.stats.data)\n\n    if (!stats) {\n        return (\n            <Widget title=\"Top Starters\" />\n        )\n    }\n\n    const elements = sort(getAllPlayers(stats), el => el.aggregates.totals.starts).slice(0, MAX_ITEMS)\n\n    return (\n        <Widget title=\"Top Starters\">\n            {elements.length > 0 && (\n                <ul className=\"widget__list\">\n                    {elements.map(element => (\n                        <li className=\"widget__list__item\" key={element.element.id}>\n                            <Player id={element.element.id} />\n                            <b>{getGWCountLabel(element.aggregates.totals.starts)}</b>\n                        </li>\n                    ))}\n                </ul>\n            )}\n        </Widget>\n    )\n}\n\nexport default StarterWidget","import React from 'react'\nimport { useSelector } from 'react-redux'\nimport { RootState } from '../../reducers'\nimport { Widget } from '../Widget'\nimport { getAllPlayers, getGWCountLabel, sort } from '../../utilities'\nimport { Player } from '../Player'\n\nconst MAX_ITEMS = 10\n\nconst BenchWidget: React.FC = () => {\n    const stats = useSelector((state: RootState) => state.stats.data)\n\n    if (!stats) {\n        return (\n            <Widget title=\"Top Bench Players\" />\n        )\n    }\n\n    const elements = sort(getAllPlayers(stats), el => el.aggregates.totals.benched).slice(0, MAX_ITEMS)\n\n    return (\n        <Widget title=\"Top Bench Players\">\n            {elements.length > 0 && (\n                <ul className=\"widget__list\">\n                    {elements.map(element => (\n                        <li className=\"widget__list__item\" key={element.element.id}>\n                            <Player id={element.element.id} />\n                            <b>{getGWCountLabel(element.aggregates.totals.benched)}</b>\n                        </li>\n                    ))}\n                </ul>\n            )}\n        </Widget>\n    )\n}\n\nexport default BenchWidget","import React from 'react'\nimport { useSelector } from 'react-redux'\nimport { RootState } from '../../reducers'\nimport { Widget } from '../Widget'\nimport { getAllPlayers, getGWCountLabel, round } from '../../utilities'\nimport { Player } from '../Player'\n\ntype Props = {\n    title: string\n    top?: boolean\n}\n\nconst MAX_ITEMS = 10\n\nconst DifferenceWidget: React.FC<Props> = (props: Props) => {\n    const stats = useSelector((state: RootState) => state.stats.data)\n\n    if (!stats) {\n        return (\n            <Widget title={props.title} />\n        )\n    }\n\n    const elements = getAllPlayers(stats)\n        .map(element => {\n            const selections = element.aggregates.totals.selections\n            const starts = element.aggregates.totals.starts\n            const benched = element.aggregates.totals.benched\n\n            return {\n                ...element,\n                benched,\n                benchedPercentage: benched / selections * 100,\n                starts,\n                startsPercentage: starts / selections * 100,\n            }\n        })\n\n    const topStarters = [ ...elements ].sort((a, b) => {\n        const percentageDiff = b.startsPercentage - a.startsPercentage\n        return percentageDiff === 0 ? b.starts - a.starts : percentageDiff\n    }).slice(0, MAX_ITEMS)\n\n    const topBenchwarmers = [ ...elements ].sort((a, b) => {\n        const percentageDiff = b.benchedPercentage - a.benchedPercentage\n        return percentageDiff === 0 ? b.benched - a.benched : percentageDiff\n    }).slice(0, MAX_ITEMS)\n\n    return (\n        <Widget title={props.title}>\n            {((props.top && topStarters.length > 0) || (!props.top && topBenchwarmers.length > 0)) && (\n                <ul className=\"widget__list\">\n                    {props.top && topStarters.map(element => (\n                        <li className=\"widget__list__item\" key={element.element.id}>\n                            <Player id={element.element.id} />\n                            <div>\n                                <div>\n                                    <b>{round(element.startsPercentage)}%</b>\n                                </div>\n                                <div className=\"muted\">\n                                    {getGWCountLabel(element.starts)}\n                                </div>\n                            </div>\n                        </li>\n                    ))}\n                    {!props.top && topBenchwarmers.map(element => (\n                        <li className=\"widget__list__item\" key={element.element.id}>\n                            <Player id={element.element.id} />\n                            <div>\n                                <div>\n                                    <b>{round(element.benchedPercentage)}%</b>\n                                </div>\n                                <div className=\"muted\">\n                                    {getGWCountLabel(element.benched)}\n                                </div>\n                            </div>\n                        </li>\n                    ))}\n                </ul>\n            )}\n        </Widget>\n    )\n}\n\nexport default DifferenceWidget","import React from 'react'\nimport { useSelector } from 'react-redux'\nimport { AreaChart, Area, XAxis, YAxis, ResponsiveContainer, CartesianGrid, Tooltip } from 'recharts'\nimport { RootState } from '../../reducers'\nimport { Widget } from '../Widget'\nimport { getShortName, head, sort, thousandsSeparator, thousandsShorthand } from '../../utilities'\n\nconst OverallRankWidget: React.FC = () => {\n    const history = useSelector((state: RootState) => state.history.data)\n    const bootstrap = useSelector((state: RootState) => state.bootstrap.data)\n\n    if (!history || !bootstrap) {\n        return (\n            <Widget title=\"Overall Rank Evolution\" />\n        )\n    }\n\n    let data = history.current.map(entry => {\n        const event = bootstrap.events.find(event => event.id === entry.event)\n\n        return {\n            name: `GW ${event ? getShortName(event) : entry.event}`,\n            value: entry.overall_rank,\n        }\n    })\n\n    const max = (head(sort([ ...data ], el => el.value))?.value || 0) * 1.05\n\n    data = [ ...data ].map(element => ({\n        ...element,\n        max,\n    }))\n\n    return (\n        <Widget title=\"Overall Rank Evolution\">\n            <div className=\"chart chart--reversed\">\n                <ResponsiveContainer height={300} width=\"100%\">\n                    <AreaChart data={data} margin={{ bottom: 45, left: 15, right: 15 }}>\n                        <Area type=\"monotone\" dataKey=\"max\" fill=\"#177B47\" fillOpacity=\"1\" />\n                        <Area type=\"monotone\" dataKey=\"value\" stroke=\"#177B47\" fill=\"#ffffff\" fillOpacity=\"1\" />\n                        <YAxis reversed={true} tickFormatter={value => thousandsShorthand(value)} domain={[1, max]} interval=\"preserveStartEnd\" tickCount={10} />\n                        <XAxis dataKey=\"name\" angle={-90} textAnchor=\"end\" interval=\"preserveStartEnd\" />\n                        <CartesianGrid stroke=\"rgba(192, 192, 192, 0.5)\" strokeDasharray=\"3 3\" />\n                        <Tooltip isAnimationActive={false} formatter={(value, name) => name === 'max' ? [undefined, undefined] : [ thousandsSeparator(Number(value)), 'Rank' ]} separator=\": \" />\n                    </AreaChart>\n                </ResponsiveContainer>\n            </div>\n        </Widget>\n    )\n}\n\nexport default OverallRankWidget","import React from 'react'\nimport { useSelector } from 'react-redux'\nimport { AreaChart, Area, XAxis, YAxis, ResponsiveContainer, CartesianGrid, Tooltip } from 'recharts'\nimport { RootState } from '../../reducers'\nimport { Widget } from '../Widget'\nimport { getShortName, initialCaps } from '../../utilities'\n\nconst OverallRankWidget: React.FC = () => {\n    const history = useSelector((state: RootState) => state.history.data)\n    const bootstrap = useSelector((state: RootState) => state.bootstrap.data)\n\n    if (!history || !bootstrap) {\n        return (\n            <Widget title=\"Gameweek Points\" />\n        )\n    }\n\n    const data = history.current.map(entry => {\n        const event = bootstrap.events.find(event => event.id === entry.event)\n\n        return {\n            name: `GW ${event ? getShortName(event) : entry.event}`,\n            points: entry.points,\n            bench: entry.points_on_bench,\n        }\n    })\n\n    return (\n        <Widget title=\"Gameweek Points\">\n            <div className=\"chart\">\n                <ResponsiveContainer height={300} width=\"100%\">\n                    <AreaChart data={data} margin={{ bottom: 45, left: 15, right: 15 }}>\n                        <Area type=\"monotone\" dataKey=\"points\" stroke=\"#177B47\" fill=\"#177B47\" fillOpacity=\"1\" />\n                        <Area type=\"monotone\" dataKey=\"bench\" stroke=\"#00FF87\" fill=\"#00FF87\" fillOpacity=\"1\" />\n                        <YAxis interval=\"preserveStartEnd\" />\n                        <XAxis dataKey=\"name\" angle={-90} textAnchor=\"end\" interval=\"preserveStartEnd\" />\n                        <CartesianGrid stroke=\"rgba(192, 192, 192, 0.5)\" strokeDasharray=\"3 3\" />\n                        <Tooltip isAnimationActive={false} formatter={(value, name) => [ value, initialCaps(name) ]} separator=\": \" />\n                    </AreaChart>\n                </ResponsiveContainer>\n            </div>\n        </Widget>\n    )\n}\n\nexport default OverallRankWidget","import React from 'react'\nimport { useSelector } from 'react-redux'\nimport { AreaChart, Area, XAxis, YAxis, ResponsiveContainer, CartesianGrid, Tooltip } from 'recharts'\nimport { RootState } from '../../reducers'\nimport { Widget } from '../Widget'\nimport { getShortName, initialCaps } from '../../utilities'\n\nconst ValueWidget: React.FC = () => {\n    const history = useSelector((state: RootState) => state.history.data)\n    const bootstrap = useSelector((state: RootState) => state.bootstrap.data)\n\n    if (!history || !bootstrap) {\n        return (\n            <Widget title=\"Team Value Evolution\" />\n        )\n    }\n\n    const data = history.current.map(entry => {\n        const event = bootstrap.events.find(event => event.id === entry.event)\n\n        return {\n            name: `GW ${event ? getShortName(event) : entry.event}`,\n            value: entry.value + entry.bank,\n        }\n    })\n\n    return (\n        <Widget title=\"Team Value Evolution\">\n            <div className=\"chart\">\n                <ResponsiveContainer height={300} width=\"100%\">\n                    <AreaChart data={data} margin={{ bottom: 45, left: 15, right: 15 }}>\n                        <Area type=\"monotone\" dataKey=\"value\" stroke=\"#177B47\" fill=\"#177B47\" fillOpacity=\"1\" />\n                        <YAxis tickFormatter={value => `£${value / 10}`} domain={[ 'auto', 'auto' ]} interval=\"preserveStartEnd\" />\n                        <XAxis dataKey=\"name\" angle={-90} textAnchor=\"end\" interval=\"preserveStartEnd\" />\n                        <CartesianGrid stroke=\"rgba(192, 192, 192, 0.5)\" strokeDasharray=\"3 3\" />\n                        <Tooltip isAnimationActive={false} formatter={(value, name) => [ `£${Number(value) / 10}`, initialCaps(name) ]} separator=\": \" />\n                    </AreaChart>\n                </ResponsiveContainer>\n            </div>\n        </Widget>\n    )\n}\n\nexport default ValueWidget","import React from 'react'\nimport { useSelector } from 'react-redux'\nimport { RootState } from '../../reducers'\nimport { getAllPlayers, getGWCountLabel, head, round, sort } from '../../utilities'\nimport { Player } from '../Player'\nimport { Widget } from '../Widget'\n\nconst WrongCaptainWidget: React.FC = () => {\n    const stats = useSelector((state: RootState) => state.stats.data)\n\n    const history = useSelector((state: RootState) => state.history.data)\n\n    if (!stats || !history) {\n        return (\n            <Widget title=\"Wrong Captains\" />\n        )\n    }\n\n    const allPlayers = getAllPlayers(stats)\n    const weeks = history.current.length\n\n    const improvements = Array.from(Array(weeks).keys())\n        .map((el, index) => ({\n            top: head(sort(allPlayers, el => el.data[index].rawPoints || 0)),\n            captain: allPlayers.find(player => (player.data[index].multiplier || 0) > 1),\n        }))\n        .filter((element, index) => (element.top?.data[index].rawPoints || 0) > (element.captain?.data[index].rawPoints || 0))\n        .reduce((acc, curr) => curr.captain ? ({\n            ...acc,\n            [curr.captain.element.id]: (acc[curr.captain.element.id] ? acc[curr.captain.element.id] : 0) + 1,\n        }) : acc, {} as Record<number, number>)\n\n    const timesUsed = allPlayers.reduce((acc, curr) => {\n        return {\n            ...acc,\n            [curr.element.id]: curr.aggregates.totals.captaincies,\n        }\n    }, {} as Record<number, number>)\n\n    return (\n        <Widget title=\"Wrong Captains\">\n            {Object.entries(improvements).length > 0 && (\n                <ul className=\"widget__list\">\n                    {sort(Object.entries(improvements), el => el[1]).map(([ player, count ]) => (\n                        <li className=\"widget__list__item\" key={player}>\n                            <Player id={Number(player)} />\n                            <div>\n                                <div>\n                                    <b>{count} out of {getGWCountLabel(timesUsed[Number(player)])}</b>\n                                </div>\n                                <div className=\"muted\">\n                                    {round(count / timesUsed[Number(player)] * 100, 1)}%\n                                </div>\n                            </div>\n                        </li>\n                    ))}\n                </ul>\n            )}\n        </Widget>\n    )\n}\n\nexport default WrongCaptainWidget","import React from 'react'\nimport { useSelector } from 'react-redux'\nimport { RootState } from '../../reducers'\nimport { getAllPlayers, getPointsLabel, round, sort } from '../../utilities'\nimport { Player } from '../Player'\nimport { Widget } from '../Widget'\n\nconst MAX_ITEMS = 10\n\nconst ContributionWidget: React.FC = () => {\n    const stats = useSelector((state: RootState) => state.stats.data)\n    const entry = useSelector((state: RootState) => state.entry.data)\n\n    if (!stats || !entry || entry.summary_overall_points === 0) {\n        return (\n            <Widget title=\"Total Points Contribution\" />\n        )\n    }\n\n    const contributions = sort(getAllPlayers(stats), el => el.aggregates.totals.points).slice(0, MAX_ITEMS)\n\n    return (\n        <Widget title=\"Total Points Contribution\">\n            {contributions.length > 0 && (\n                <ul className=\"widget__list\">\n                    {contributions.map(player => (\n                        <li className=\"widget__list__item\" key={player.element.id}>\n                            <Player id={player.element.id} />\n                            <div>\n                                <div>\n                                    <b>{round(player.aggregates.totals.points / entry.summary_overall_points * 100)}%</b>\n                                </div>\n                                <div className=\"muted\">\n                                    {getPointsLabel(player.aggregates.totals.points)}\n                                </div>\n                            </div>\n                        </li>\n                    ))}\n                </ul>\n            )}\n        </Widget>\n    )\n}\n\nexport default ContributionWidget","import React from 'react'\nimport { useSelector } from 'react-redux'\nimport { RootState } from '../../reducers'\nimport { Widget } from '../Widget'\nimport { getAllPlayers, getPointsLabel, round, sort } from '../../utilities'\nimport { Player } from '../Player'\nimport { getGWCountLabel } from '../../utilities/strings';\nimport { StatData } from '../../types'\n\ntype Props = {\n    title: string\n    top?: boolean\n}\n\nconst MAX_ITEMS = 10\n\nconst getPointsShare = (player: StatData): number => 100 - player.aggregates.totals.rawPoints / player.element.total_points * 100\n\nconst MissedPointsShareWidget: React.FC<Props> = (props: Props) => {\n    const stats = useSelector((state: RootState) => state.stats.data)\n    const history = useSelector((state: RootState) => state.history.data)\n\n    if (!stats || !history) {\n        return (\n            <Widget title={props.title} />\n        )\n    }\n\n    const elements = sort(\n        getAllPlayers(stats).filter(player => player.aggregates.totals.points > 0),\n        el => getPointsShare(el),\n        props.top ? 'desc': 'asc'\n    ).slice(0, MAX_ITEMS)\n\n    return (\n        <Widget title={props.title}>\n            {elements.length > 0 && (\n                <ul className=\"widget__list\">\n                    {elements.map(element => (\n                        <li className=\"widget__list__item\" key={element.element.id}>\n                            <Player id={element.element.id} />\n                            <div>\n                                <div>\n                                    <b>{element.element.total_points > 0 && `${round(getPointsShare(element))}%`}</b>\n                                </div>\n                                <div className=\"muted\">\n                                    {getPointsLabel(element.element.total_points - element.aggregates.totals.rawPoints)} in {getGWCountLabel(history.current.length - element.aggregates.totals.selections)}\n                                </div>\n                            </div>\n                        </li>\n                    ))}\n                </ul>\n            )}\n        </Widget>\n    )\n}\n\nexport default MissedPointsShareWidget","import React from 'react'\nimport { useSelector } from 'react-redux'\nimport { RootState } from '../../reducers'\nimport { getAllPlayers, getPointsLabel, sort, thousandsSeparator } from '../../utilities'\nimport { Player } from '../Player'\nimport { Widget } from '../Widget'\n\nconst MAX_ITEMS = 15\n\nconst NearMissesWidget: React.FC = () => {\n    const stats = useSelector((state: RootState) => state.stats.data)\n    const tots = useSelector((state: RootState) => state.stats.tots)\n\n    if (!stats || !tots) {\n        return (\n            <Widget title=\"Near Misses\" />\n        )\n    }\n\n    const totsIds = tots.xi.concat(tots.bench).map(player => player.element.id)\n    const players = sort(getAllPlayers(stats).filter(player => !totsIds.includes(player.element.id)), el => el.aggregates.totals.points).slice(0, MAX_ITEMS)\n\n    return (\n        <Widget title=\"Near Misses\">\n            {players.length > 0 && (\n                <ul className=\"widget__list\">\n                    {players.map(player => (\n                        <li className=\"widget__list__item\" key={player.element.id}>\n                            <Player id={player.element.id} />\n                            <b>{getPointsLabel(thousandsSeparator(player.aggregates.totals.points))}</b>\n                        </li>\n                    ))}\n                </ul>\n            )}\n        </Widget>\n    )\n}\n\nexport default NearMissesWidget","import React, { useState, useEffect, useRef } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport classNames from 'classnames'\nimport Select, { ValueType } from 'react-select'\nimport { useParams, useHistory } from 'react-router-dom'\nimport { Bootstrap, StatData, Stats } from '../../types'\nimport { RootState } from '../../reducers'\nimport { Player } from '../Player'\nimport { Widget } from '../Widget'\nimport { Spinner } from '../Spinner'\nimport { getPastEvents, getChipAbbreviation, thousandsSeparator, getShortName, validateTeamId, round, sort, getPointsLabel } from '../../utilities'\nimport { Modal } from '../Modal'\nimport { fetchDataWithId } from '../../reducers/settings'\nimport { Button } from '../Button'\nimport { HistoryWidget } from '../HistoryWidget'\nimport { TotsWidget } from '../TotsWidget'\nimport { PlayerStatsWidget } from '../PlayerStatsWidget'\nimport { FormationWidget } from '../FormationWidget'\nimport { CaptainWidget } from '../CaptainWidget'\nimport { GameweekWidget } from '../GameweekWidget'\nimport { PositionsWidget } from '../PositionsWidget'\nimport { Metric } from '../Metric'\nimport { SeasonWidget } from '../SeasonWidget'\nimport { TeamsWidget } from '../TeamsWidget'\nimport { NonBlankStreakWidget } from '../NonBlankStreakWidget'\nimport { SelectionStreakWidget } from '../SelectionStreakWidget'\nimport { StartStreakWidget } from '../StartStreakWidget'\nimport { BenchStreakWidget } from '../BenchStreakWidget'\nimport { CaptainOpportunityWidget } from '../CaptainOpportunityWidget'\nimport { SelectionWidget } from '../SelectionWidget'\nimport { StarterWidget } from '../StarterWidget'\nimport { BenchWidget } from '../BenchWidget'\nimport { DifferenceWidget } from '../DifferenceWidget'\nimport { OverallRankWidget } from '../OverallRankWidget'\nimport { PointsWidget } from '../PointsWidget'\nimport { ValueWidget } from '../ValueWidget'\nimport { SiteLink } from '../SiteLink'\nimport { WrongCaptainWidget } from '../WrongCaptainWidget'\nimport { ContributionWidget } from '../ContributionWidget'\nimport { MissedPointsShareWidget } from '../MissedPointsShareWidget'\nimport { NearMissesWidget } from '../NearMissesWidget'\nimport './Dashboard.scss'\n\ntype OptionType = {\n    value: string\n    label: string\n}\n\ntype DashboardParams = {\n    team?: string\n}\n\nconst sortings: { [ key: string ]: (statData: StatData) => number } = {\n    points: el => el.aggregates.totals.points,\n    selection: el => el.aggregates.totals.selections,\n    start: el => el.aggregates.totals.starts,\n    bench: el => el.aggregates.totals.benched,\n    alphabet: (statData: StatData): number => {\n        return statData.element.web_name.toLowerCase().charCodeAt(0) * -1\n    }\n}\n\nconst sortOptions = [\n    { value: 'points', label: 'Total Points' },\n    { value: 'selection', label: 'Most Selected' },\n    { value: 'start', label: 'Most Started' },\n    { value: 'bench', label: 'Most Benched' },\n    { value: 'alphabet', label: 'Alphabetically' },\n]\n\nconst renderPlayerList = (stats: Stats, bootstrap: Bootstrap, sorting: OptionType): JSX.Element[] => Object.entries(stats).map(([ elementType, statData ]) => (\n    <div key={elementType}>\n        <li className=\"dashboard__category\">\n            <span>{bootstrap?.element_types.find(el => el.id === Number(elementType))?.plural_name_short}</span>\n            <span>{statData.length}</span>\n        </li>\n        {sort(statData.filter(element => element.data.filter(pick => pick.multiplier !== null).length), el => sortings[sorting.value](el))\n            .map(element => (\n                <li key={element.element.id} className=\"dashboard__item\">\n                    <div className=\"dashboard__player\">\n                        <Player id={element.element.id} extended />\n                    </div>\n                    <div className=\"dashboard__stats\">\n                        {element.data.map(item => (\n                            <span\n                                key={item.event.id}\n                                className={classNames('dashboard__stat', {\n                                    'dashboard__stat--benched': item.multiplier === 0,\n                                    'dashboard__stat--triple': item.multiplier === 3,\n                                    'dashboard__stat--started': item.multiplier,\n                                })}\n                            />\n                        ))}\n                    </div>\n                    <div className=\"dashboard__totals\">\n                        <span className=\"dashboard__stat\">\n                            <div>\n                                <b>{element.aggregates.totals.selections}</b> <span className=\"muted\">({element.data.length ? round(element.aggregates.totals.selections / element.data.length * 100) : 0}%)</span>\n                            </div>\n                        </span>\n                        <span className=\"dashboard__stat\">\n                            <div>\n                                <b>{element.aggregates.totals.starts}</b> <span className=\"muted\">({element.data.length ? round(element.aggregates.totals.starts / element.data.length * 100) : 0}%)</span>\n                            </div>\n                        </span>\n                        <span className=\"dashboard__stat\">\n                            <div>\n                                <b>{element.aggregates.totals.benched}</b> <span className=\"muted\">({element.data.length ? round(element.aggregates.totals.benched / element.data.length * 100) : 0}%)</span>\n                            </div>\n                        </span>\n                        <span className=\"dashboard__stat\">\n                            <div>\n                                <b>{element.aggregates.totals.points}</b>\n                                {' '}\n                                <span className=\"muted\">\n                                    (\n                                        {element.aggregates.totals.starts > 0 ? round(element.aggregates.totals.points / element.aggregates.totals.starts) : 0}\n                                        {' '}\n                                        <Metric metric=\"ppg\" />\n                                    )\n                                </span>\n                            </div>\n                        </span>\n                    </div>\n                </li>\n            ))\n        }\n    </div>\n))\n\nconst Dashboard: React.FC = () => {\n    const [ sort, setSort ] = useState<ValueType<OptionType>>(sortOptions[0])\n\n    const isLoading = useSelector((state: RootState) => state.loading > 0)\n\n    const bootstrap = useSelector((state: RootState) => state.bootstrap.data)\n\n    const stats = useSelector((state: RootState) => state.stats.data)\n    const chips = useSelector((state: RootState) => state.stats.chips)\n\n    const id = useSelector((state: RootState) => state.settings.id)\n\n    const entry = useSelector((state: RootState) => state.entry.data)\n\n    const { team } = useParams<DashboardParams>()\n    const history = useHistory()\n\n    const [ isModalOpen, setIsModalOpen ] = useState(!team)\n\n    const dashboardRef = useRef<HTMLDivElement>(null)\n\n    const dispatch = useDispatch()\n\n    useEffect(() => {\n        if (id && !team) {\n            history.push(`/${id}/`)\n        } else if (team && validateTeamId(team)) {\n            if (Number(team) !== id) {\n                dispatch(fetchDataWithId(Number(team)))\n            }\n        } else {\n            history.push('/')\n        }\n    }, [ team, history, dispatch, id ])\n\n    useEffect(() => {\n        setTimeout(() => {\n            if (dashboardRef && dashboardRef.current) {\n                dashboardRef.current.scrollTo(dashboardRef.current.scrollWidth, 0)\n            }\n        }, 1)\n    }, [ stats ])\n\n    useEffect(() => {\n        setIsModalOpen(!team)\n    }, [ team ])\n\n    return (\n        <div className=\"app\">\n            {isModalOpen && (\n                <Modal onClose={() => setIsModalOpen(false)} />\n            )}\n            <div className={classNames('app__loading', {\n                'app__loading--hidden': !isLoading,\n            })}>\n                <Spinner />\n            </div>\n            <div className=\"app__content\">\n                {entry && (\n                    <header className=\"dashboard__entry\">\n                        <Widget>\n                            <h1 className=\"dashboard__title\">\n                                <SiteLink label={entry.name} />\n                                <div className=\"small muted\">{getPointsLabel(thousandsSeparator(entry.summary_overall_points))} — Rank {thousandsSeparator(entry.summary_overall_rank)}</div>\n                            </h1>\n                            {id !== undefined && (\n                                <Button\n                                    onClick={() => setIsModalOpen(true)}\n                                    label=\"Change Team\"\n                                />\n                            )}\n                        </Widget>\n                    </header>\n                )}\n                <div className=\"dashboard__widgets dashboard__widgets--split\">\n                    <TotsWidget />\n                    <NearMissesWidget />\n                </div>\n                <div className=\"dashboard__widgets dashboard__widgets-duo\">\n                    <PlayerStatsWidget />\n                    <SeasonWidget />\n                    <HistoryWidget />\n                </div>\n                <div className=\"dashboard__widgets\">\n                    <GameweekWidget />\n                    <PositionsWidget />\n                    <FormationWidget />\n                </div>\n                <h2><span>Players</span></h2>\n                <div className=\"app__meta\">\n                    <label className=\"app__meta__label\">\n                        Sort by\n                    </label>\n                    <Select\n                        options={sortOptions}\n                        value={sort}\n                        onChange={option => setSort(option)}\n                        styles={{\n                            container: (provided) => ({ ...provided, width: '100%' }),\n                            menu: (provided) => ({ ...provided, zIndex: 20 })\n                        }}\n                    />\n                    <div className=\"app__legend\">\n                        <div className=\"app__color\">\n                            <div className=\"app__color__indicator app__color__indicator--started\"></div>\n                            Started\n                        </div>\n                        <div className=\"app__color\">\n                            <div className=\"app__color__indicator app__color__indicator--benched\"></div>\n                            Benched\n                        </div>\n                        <div className=\"app__color\">\n                            <div className=\"app__color__indicator app__color__indicator--triple\"></div>\n                            TC\n                        </div>\n                        <div className=\"app__color\">\n                            <div className=\"app__color__indicator\"></div>\n                            Not Selected\n                        </div>\n                    </div>\n                </div>\n                <div className={classNames('dashboard', {\n                    'dashboard--cloaked': !id,\n                })}>\n                    <div className=\"dashboard__container\" ref={dashboardRef}>\n                        <header className=\"dashboard__header\">\n                            <span className=\"dashboard__heading\">\n                                Player\n                            </span>\n                            {bootstrap?.events && getPastEvents(bootstrap.events).filter(event => event.top_element_info.points > 0).map(event => (\n                                <span className=\"dashboard__stat\" key={event.id}>\n                                    {getShortName(event)}\n                                    {chips && chips[event.id] && (\n                                        <div>{getChipAbbreviation(chips[event.id])}</div>\n                                    )}\n                                </span>\n                            ))}\n                            <div className=\"dashboard__totals\">\n                                <span className=\"dashboard__stat\">\n                                    Selected\n                                </span>\n                                <span className=\"dashboard__stat\">\n                                    Starting\n                                </span>\n                                <span className=\"dashboard__stat\">\n                                    Benched\n                                </span>\n                                <span className=\"dashboard__stat\">\n                                    Points\n                                </span>\n                            </div>\n                        </header>\n                        <ul className=\"dashboard__list\">\n                            {stats && bootstrap && renderPlayerList(stats, bootstrap, sort as OptionType)}\n                        </ul>\n                    </div>\n                </div>\n                <div className=\"dashboard__widgets\">\n                    <SelectionWidget />\n                    <StarterWidget />\n                    <BenchWidget />\n                    <DifferenceWidget title=\"Most Consistent Starters\" top />\n                    <DifferenceWidget title=\"Most Consistent Bench Players\" />\n                </div>\n                <h2><span>Teams</span></h2>\n                <div className=\"dashboard__widgets dashboard__widgets--single\">\n                    <TeamsWidget />\n                </div>\n                <h2><span>Captains</span></h2>\n                <div className=\"dashboard__widgets\">\n                    <CaptainWidget />\n                    <CaptainOpportunityWidget />\n                    <WrongCaptainWidget />\n                </div>\n                <h2><span>Streaks</span></h2>\n                <div className=\"dashboard__widgets\">\n                    <NonBlankStreakWidget />\n                    <SelectionStreakWidget />\n                    <StartStreakWidget />\n                    <BenchStreakWidget />\n                </div>\n                <h2><span>Contributions</span></h2>\n                <div className=\"dashboard__widgets\">\n                    <ContributionWidget />\n                    <MissedPointsShareWidget title=\"Most Points Scored Outside of Team\" top />\n                    <MissedPointsShareWidget title=\"Fewest Points Scored Outside of Team\" />\n                </div>\n                <h2><span>Graphs</span></h2>\n                <div className=\"dashboard__graphs\">\n                    <OverallRankWidget />\n                    <PointsWidget />\n                    <ValueWidget />\n                </div>\n                <div className=\"app__legal\">\n                    <p>FPL Stats uses data from the official Premier League Fantasy API. This site is not affiliated with the Premier League.</p>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default Dashboard","import { combineReducers } from 'redux'\nimport bootstrap from './bootstrap'\nimport stats from './stats'\nimport settings from './settings'\nimport entry from './entry'\nimport { Bootstrap, Stats, History, Entry, StatData } from '../types'\nimport history from './history'\nimport loading from './loading'\n\nexport type RootState = {\n    loading: number\n    bootstrap: {\n        data: Bootstrap | undefined\n    }\n    stats: {\n        data: Stats | undefined\n        chips: {\n            [key: number]: string\n        } | undefined\n        tots: {\n            xi: StatData[]\n            bench: StatData[]\n        } | undefined\n    }\n    settings: {\n        id: number | undefined\n        meanStrategy: 'average' | 'median'\n    }\n    history: {\n        data: History | undefined\n    }\n    entry: {\n        data: Entry | undefined\n    }\n}\n\nexport default combineReducers({\n    loading,\n    bootstrap,\n    stats,\n    settings,\n    history,\n    entry,\n})","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { Provider } from 'react-redux'\nimport { BrowserRouter, Route, Switch } from 'react-router-dom'\nimport * as serviceWorker from './serviceWorker'\nimport { Dashboard } from './components/Dashboard'\nimport configureAppStore from './store'\nimport './index.scss'\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={configureAppStore()}>\n            <BrowserRouter basename=\"/fpl-stats\">\n                <Switch>\n                    <Route path=\"/:team/\">\n                        <Dashboard />\n                    </Route>\n                    <Route path=\"/\" exact>\n                        <Dashboard />\n                    </Route>\n                </Switch>\n            </BrowserRouter>\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n)\n\nserviceWorker.unregister()\n","import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit'\nimport rootReducer from './reducers'\n\nexport default function configureAppStore() {\n    const store = configureStore({\n        reducer: rootReducer,\n        middleware: [ ...getDefaultMiddleware() ],\n    })\n\n    return store\n}"],"sourceRoot":""}