{"version":3,"sources":["serviceWorker.ts","reducers/loading.ts","reducers/bootstrap.ts","components/Player/Player.tsx","components/Widget/Widget.tsx","components/Spinner/Spinner.tsx","utilities/settings.ts","utilities/arrays.ts","utilities/numbers.ts","utilities/stats.ts","utilities/events.ts","utilities/chips.ts","utilities/strings.ts","reducers/settings.ts","components/Button/Button.tsx","hooks/useClickOutside.ts","hooks/useMeanLabel.ts","hooks/useMeanValue.ts","components/Modal/Modal.tsx","reducers/stats.ts","reducers/history.ts","components/HistoryWidget/HistoryWidget.tsx","components/TotsPlayer/TotsPlayer.tsx","components/TotsWidget/TotsWidget.tsx","components/Metric/Metric.tsx","components/SiteLink/SiteLink.tsx","components/PlayerStatsWidget/PlayerStatsWidget.tsx","components/FormationWidget/FormationWidget.tsx","components/CaptainWidget/CaptainWidget.tsx","components/GameweekWidget/GameweekWidget.tsx","components/PositionsWidget/PositionsWidget.tsx","reducers/entry.ts","components/SeasonWidget/SeasonWidget.tsx","components/Team/Team.tsx","components/TeamsWidget/TeamsWidget.tsx","components/NonBlankStreakWidget/NonBlankStreakWidget.tsx","components/SelectionStreakWidget/SelectionStreakWidget.tsx","components/StartStreakWidget/StartStreakWidget.tsx","components/BenchStreakWidget/BenchStreakWidget.tsx","components/SwapIcon/SwapIcon.tsx","components/CaptainOpportunityWidget/CaptainOpportunityWidget.tsx","components/SelectionWidget/SelectionWidget.tsx","components/StarterWidget/StarterWidget.tsx","components/BenchWidget/BenchWidget.tsx","components/DifferenceWidget/DifferenceWidget.tsx","components/OverallRankWidget/OverallRankWidget.tsx","components/PointsWidget/PointsWidget.tsx","components/ValueWidget/ValueWidget.tsx","components/WrongCaptainWidget/WrongCaptainWidget.tsx","components/ContributionWidget/ContributionWidget.tsx","components/MissedPointsShareWidget/MissedPointsShareWidget.tsx","components/Dashboard/Dashboard.tsx","reducers/index.ts","index.tsx","store.ts"],"names":["Boolean","window","location","hostname","match","loading","createSlice","name","initialState","reducers","startLoading","state","finishLoading","actions","bootstrap","data","undefined","fetchBootstrapStart","fetchBootstrapSuccess","action","payload","Player","props","useSelector","player","elements","find","el","id","team","teams","position","element_types","element_type","className","classNames","condensed","src","code","singular_name_short","alt","web_name","suffix","title","short_name","Widget","settings","cssClasses","children","Spinner","validateTeamId","value","number","Number","isNaN","isInteger","sort","series","comparator","direction","a","b","head","length","last","reduce","extractor","initialValue","acc","curr","thousandsSeparator","toString","replace","sumNumbers","round","precision","formatted","toFixed","test","split","getTotalSelections","statData","filter","pick","multiplier","getTotalStarts","getTotalBenched","getTotalPoints","points","getTotalRawPoints","rawPoints","getTotalBenchPoints","getAllPlayers","stats","Object","values","concat","getPlayerAggregate","key","getTopStatAggregate","players","aggregates","totals","getStreak","comparison","ignoreBlanks","streaks","slice","max","Math","start","indexOf","map","streak","event","end","getSelectionStreak","gw","getStartStreak","getBenchStreak","getNonBlankStreak","getPastEvents","events","timestamp","Date","now","deadline_time_epoch","getShortName","pop","chips","bboost","freehit","wildcard","initialCaps","charAt","toUpperCase","toLowerCase","pluralise","singular","plural","parsedValue","getGWCountLabel","getPointsLabel","localStorage","getItem","meanStrategy","setId","setItem","removeItem","setMeanStrategy","Button","secondary","type","onClick","disabled","label","useClickOutside","callback","element","React","useRef","useEffect","listener","e","target","Node","current","contains","document","addEventListener","removeEventListener","useMeanLabel","strategy","useMeanValue","average","sorted","mid","ceil","median","Modal","useState","setValue","dispatch","useDispatch","close","useCallback","cancel","onClose","ref","onSubmit","preventDefault","placeholder","onChange","emptyAggregates","redCards","yellowCards","goals","assists","cleanSheets","goalsConceded","ownGoals","saves","minutes","penaltiesMissed","penaltiesSaved","timesInDreamteam","bps","bonus","captaincies","benchPoints","selections","starts","benched","selection","bench","nonBlank","buildDataStart","buildDataSuccess","fetchPicks","entry","fetch","encodeURIComponent","response","json","fetchEvent","fetchGameweekInformation","Promise","all","live","history","fetchHistoryStart","fetchHistorySuccess","HistoryWidget","meanLabel","meanValue","pastSeasonsByRank","past","rank","pastSeasonsByPoints","total_points","bestRankedSeason","worstRankedSeason","bestPointSeason","worstPointSeason","top1k","season","top10k","top100k","top1m","season_name","TotsPlayer","TotsWidget","gk","def","fwd","top","rest","xi","explanations","Metric","metric","SiteLink","url","href","rel","PlayerStatsWidget","allPlayers","reds","yellows","inDreamteam","mostCaptaincies","topReturner","topBenchGWReturner","topSeasonReturner","topBenchReturner","weeks","idealCaptain","entries","Array","from","keys","index","week","returner","renderTopBenchGWReturner","FormationWidget","formations","val","join","formation","count","information","formatFormation","CaptainWidget","captains","captain","sum","GameweekWidget","differences","average_entry_score","sortedRanks","gws","bestGW","worstGW","bestGWRank","worstGWRank","diff","PositionsWidget","positions","elementType","totalPoints","plural_name","fetchEntryStart","fetchEntrySuccess","getAggregateValues","SeasonWidget","totalTransfers","event_transfers","totalHits","event_transfers_cost","totalBenched","points_on_bench","tc","findIndex","bbWeek","bbPoints","doubleDigitHauls","totalPlays","summary_overall_points","Team","TeamsWidget","counts","plural_name_short","NonBlankStreakWidget","streakers","aStreak","bStreak","aStreakLength","bStreakLength","streaker","SelectionStreakWidget","StartStreakWidget","BenchStreakWidget","SwapIcon","width","height","viewBox","fill","fillRule","d","transform","CaptainOpportunityWidget","improvements","improvement","captainData","topData","StarterWidget","BenchWidget","DifferenceWidget","benchedPercentage","startsPercentage","topStarters","percentageDiff","topBenchwarmers","OverallRankWidget","overall_rank","margin","bottom","left","right","dataKey","fillOpacity","stroke","reversed","tickFormatter","thousandsShorthand","domain","interval","tickCount","angle","textAnchor","strokeDasharray","isAnimationActive","formatter","separator","ValueWidget","bank","WrongCaptainWidget","timesUsed","ContributionWidget","contributions","getPointsShare","MissedPointsShareWidget","sortings","alphabet","charCodeAt","sortOptions","Dashboard","isModalOpen","setIsModalOpen","setSort","isLoading","dashboardRef","query","queryString","parse","hash","setTimeout","scrollTo","scrollWidth","gameweeks","forEach","active_chip","entry_history","picks","item","buildData","fetchHistory","fetchEntry","stringify","summary_overall_rank","options","option","styles","container","provided","menu","zIndex","top_element_info","sorting","renderPlayerList","SelectionWidget","PointsWidget","combineReducers","ReactDOM","render","StrictMode","store","configureStore","reducer","rootReducer","middleware","getDefaultMiddleware","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.e24a5bd4.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void\n  onUpdate?: (registration: ServiceWorkerRegistration) => void\n}\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    )\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister()\n      })\n      .catch(error => {\n        console.error(error.message)\n      })\n  }\n}\n","import { createSlice } from '@reduxjs/toolkit'\n\nconst loading = createSlice({\n    name: 'loading',\n    initialState: 0,\n    reducers: {\n        startLoading(state) {\n            state += 1\n\n            return state\n        },\n        finishLoading(state) {\n            state -= 1\n\n            return state\n        },\n    },\n})\n\nexport const { startLoading, finishLoading } = loading.actions\n\nexport default loading.reducer","import { createSlice, ThunkAction, Action } from '@reduxjs/toolkit'\nimport { Bootstrap } from '../types'\nimport { finishLoading, startLoading } from './loading'\n\nconst bootstrap = createSlice({\n    name: 'bootstrap',\n    initialState: {\n        data: undefined,\n    },\n    reducers: {\n        fetchBootstrapStart(state) {\n            state.data = undefined\n        },\n        fetchBootstrapSuccess(state, action) {\n            state.data = action.payload\n        },\n    },\n})\n\nexport const { fetchBootstrapStart, fetchBootstrapSuccess } = bootstrap.actions\n\nexport const fetchBootstrap = (): ThunkAction<void, Bootstrap, unknown, Action<string>> => async dispatch => {\n    dispatch(fetchBootstrapStart())\n    dispatch(startLoading())\n\n    const response = await fetch(`https://jsonp.afeld.me/?url=${encodeURIComponent('https://fantasy.premierleague.com/api/bootstrap-static/')}`)\n\n    const data = await response.json()\n\n    dispatch(fetchBootstrapSuccess(data))\n    dispatch(finishLoading())\n}\n\nexport default bootstrap.reducer","import React from 'react'\nimport { useSelector } from 'react-redux'\nimport classNames from 'classnames'\nimport { RootState } from '../../reducers'\nimport './Player.scss'\n\ntype Props = {\n    id: number\n    condensed?: boolean\n    suffix?: string | (() => JSX.Element | null)\n}\n\nconst Player: React.FC<Props> = (props: Props) => {\n    const bootstrap = useSelector((state: RootState) => state.bootstrap.data)\n\n    const player = bootstrap?.elements.find(el => el.id === props.id)\n    const team = bootstrap?.teams.find(el => el.id === player?.team)\n    const position = bootstrap?.element_types.find(el => el.id === player?.element_type)\n\n    return (\n        <div className={classNames('player', { 'player--condensed': props.condensed })}>\n            <img\n                src={`https://fantasy.premierleague.com/dist/img/shirts/special/shirt_${team?.code}${position?.singular_name_short === 'GKP' ? '_1' : ''}-66.png`}\n                alt={player?.web_name}\n                className=\"player__shirt\"\n            />\n            <div className=\"player__detail\">\n                <div className=\"player__name\">\n                    <span>\n                        {props.suffix ? (\n                            <b>{player?.web_name}</b>\n                        ) : (\n                            player?.web_name\n                        )}\n                        {typeof props.suffix === 'string' ? ` (${props.suffix})` : props.suffix ? props.suffix() : null}\n                    </span>\n                </div>\n                <div className=\"player__info\">\n                    <span className=\"player__team\" title={team?.name}>{team?.short_name}</span>\n                    <span className=\"player__position\">{position?.singular_name_short}</span>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default Player","import React from 'react'\nimport classNames from 'classnames'\nimport { useSelector } from 'react-redux'\nimport { RootState } from '../../reducers'\nimport './Widget.scss'\n\ntype Props = {\n    title?: string\n    children?: React.ReactNode\n    cssClasses?: string\n}\n\nconst Widget: React.FC<Props> = (props: Props) => {\n    const id = useSelector((state: RootState) => state.settings.id)\n\n    return (\n        <div className={classNames('widget', props.cssClasses, {\n            'widget--cloaked': !id,\n        })}>\n            {props.title && (\n                <h2 className=\"widget__title\">{props.title}</h2>\n            )}\n            <div className=\"widget__content\">\n                {props.children}\n            </div>\n        </div>\n    )\n}\n\nexport default Widget","import React from 'react'\nimport './Spinner.scss'\n\nconst Spinner: React.FC = () => (\n    <div className=\"spinner\">\n        <div className=\"spinner__item\"></div>\n        <div className=\"spinner__item\"></div>\n        <div className=\"spinner__item\"></div>\n        <div className=\"spinner__item\"></div>\n        <div className=\"spinner__item\"></div>\n        <div className=\"spinner__item\"></div>\n        <div className=\"spinner__item\"></div>\n        <div className=\"spinner__item\"></div>\n        <div className=\"spinner__item\"></div>\n    </div>\n)\n\nexport default Spinner","export const validateTeamId = (value: string) => {\n    const number = Number(value)\n    return value && !Number.isNaN(number) && Number.isInteger(number)\n}","export const sort = <T>(series: T[], comparator: (element: T) => number, direction: 'asc' | 'desc' = 'desc'): T[] => {\n    return [ ...series ].sort((a, b) => (comparator(a) - comparator(b)) * (direction === 'desc' ? -1 : 1))\n}\n\nexport const head = <T>(series: T[]): T | null => {\n    return series.length ? series[0] : null\n}\n\nexport const last = <T>(series: T[]): T | null => {\n    return series.length ? series[series.length - 1] : null\n}\n\nexport const reduce = <T>(series: T[], extractor: (element: T) => number, initialValue: number = 0): number => {\n    return series.reduce((acc, curr) => acc + extractor(curr), initialValue)\n}","import { head, reduce, sort } from './arrays'\n\nexport const thousandsSeparator = (value: number): string => {\n    return value.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',')\n}\n\nexport const thousandsShorthand = (value: number): string => {\n    return value > 999999 ? `${round(value / 1000000)}M` : value > 999 ? `${round(value / 1000, 0)}K` : `${value}`\n}\n\nexport const sumNumbers = (series: number[]): number => {\n    return reduce(series, el => el)\n}\n\nexport const average = (series: number[]): number => {\n    return series.length ? sumNumbers(series) / series.length : 0\n}\n\nexport const median = (series: number[]): number => {\n    const sorted = sort(series, el => el)\n    const mid = Math.ceil(series.length / 2)\n\n    if (sorted.length % 2 === 0) {\n        return (sorted[mid] + sorted[mid + 1]) / 2\n    }\n\n    return sorted[mid - 1]\n}\n\nexport const round = (value: number, precision: number = 1): string => {\n    const formatted = value.toFixed(precision)\n\n    if (/\\.0+$/.test(formatted)) {\n        return head(formatted.split('.')) || ''\n    }\n\n    return formatted\n}","import { ElementStats, Event, StatData, Stats, StatDataGameweek } from '../types'\nimport { StatAggregateTotals } from '../types/stat-aggregate-totals'\nimport { head, reduce, sort } from './arrays'\nimport { sumNumbers } from './numbers'\n\nexport type Streak = {\n    start: Event\n    end: Event\n    length: number\n    points?: number\n}\n\nexport type AggregateStat = {\n    player: StatData\n    value: number\n}\n\nexport const getTotalSelections = (statData: StatData): number => {\n    return statData.data.filter(pick => pick.multiplier !== null).length\n}\n\nexport const getTotalStarts = (statData: StatData): number => {\n    return statData.data.filter(pick => pick.multiplier && pick.multiplier > 0).length\n}\n\nexport const getTotalBenched = (statData: StatData): number => {\n    return statData.data.filter(pick => pick.multiplier === 0).length\n}\n\nexport const getTotalPoints = (statData: StatData): number => {\n    return reduce(statData.data, el => el.points || 0)\n}\n\nexport const getTotalCaptaincies = (statData: StatData): number => {\n    return statData.data.filter(data => (data.multiplier || 0) > 1).length\n}\n\nexport const getTotalRawPoints = (statData: StatData): number => {\n    return reduce(statData.data, el => el.rawPoints || 0)\n}\n\nexport const getTotalBenchPoints = (statData: StatData): number => {\n    return reduce(statData.data, el => el.multiplier === 0 ? (el.rawPoints || 0) : 0)\n}\n\nexport const getAllPlayers = (stats: Stats): StatData[] => {\n    return Object.values(stats).reduce((acc, curr) => acc.concat(curr), [])\n}\n\nexport const getPlayerAggregate = (player: StatData, key: keyof ElementStats): number => player.data.reduce((acc, data) => {\n    if (typeof data.stats?.[key] === 'number') {\n        return ((data.stats?.[key] as number) || 0) + acc\n    }\n\n    if (typeof data.stats?.[key] === 'boolean') {\n        return (+(data.stats?.[key] as boolean) || 0) + acc\n    }\n\n    return acc\n}, 0)\n\nexport const getTopStatAggregate = (players: StatData[], key: keyof StatAggregateTotals): StatData | null => head(sort(players, el => el.aggregates.totals[key]))\n\nconst getStreak = (statData: StatData, comparison: (gw: StatDataGameweek) => boolean, ignoreBlanks: boolean = false): Streak | null => {\n    const streaks = statData.data.reduce((acc, curr) => {\n        if (comparison(curr)) {\n            if (ignoreBlanks) {\n                return [ ...acc.slice(0, acc.length - 1), acc[acc.length - 1] + 1 ]\n            }\n\n            if (!acc.length || acc[acc.length - 1] === 0) {\n                return [ ...acc, 1 ]\n            }\n\n            return [ ...acc.slice(0, acc.length - 1), acc[acc.length - 1] + 1 ]\n        }\n\n        return [ ...acc, 0 ]\n    }, (ignoreBlanks ? [ 0 ] : []) as number[])\n\n    const max = Math.max(...streaks)\n\n    if (max === 0) {\n        return null\n    }\n\n    const start = statData.data[sumNumbers(streaks.slice(0, streaks.indexOf(max)).map(streak => streak > 0 ? streak : 1))].event\n    const end = statData.data[start.id - 2 + max].event\n\n    const points = sumNumbers(statData.data\n        .slice(start.id - 1, start.id - 1 + max)\n        .map(event => event.points || 0))\n\n    return {\n        start,\n        end,\n        length: max,\n        points,\n    }\n}\n\nexport const getSelectionStreak = (statData: StatData): Streak | null => getStreak(statData, (gw) => gw.multiplier !== null, true)\n\nexport const getStartStreak = (statData: StatData): Streak | null => getStreak(statData, (gw) => (gw.multiplier || 0) > 0, true)\n\nexport const getBenchStreak = (statData: StatData): Streak | null => getStreak(statData, (gw) => gw.multiplier === 0, true)\n\nexport const getNonBlankStreak = (statData: StatData): Streak | null => getStreak(statData, (gw) => (gw.rawPoints || 0) > 2)","import { Event } from '../types'\n\nexport const getPastEvents = (events: Event[]): Event[] => {\n    const timestamp = Date.now()\n    return events.filter(event => event.deadline_time_epoch * 1000 < timestamp)\n}\n\nexport const getShortName = (event: Event): string => {\n    return event.name.split(' ').pop() || ''\n}","const chips: { [key: string]: string } = {\n    '3xc': 'TC',\n    bboost: 'BB',\n    freehit: 'FH',\n    wildcard: 'WC',\n}\n\nexport const getChipAbbreviation = (key: string): string | null => chips[key] || null","export const initialCaps = (value: string): string => `${value.charAt(0).toUpperCase()}${value.toLowerCase().slice(1)}`\n\nexport const pluralise = (value: number | string, singular: string, plural: string) => {\n    const parsedValue = typeof value === 'number' ? value : Number(value.replace(/,/g, ''))\n\n    return `${value} ${parsedValue === 1 ? singular : plural}`\n}\n\nexport const getGWCountLabel = (value: number | string): string => pluralise(value, 'GW', 'GWs')\n\nexport const getPointsLabel = (value: number | string): string => pluralise(value, 'pt', 'pts')","import { createSlice } from '@reduxjs/toolkit'\n\nconst settings = createSlice({\n    name: 'settings',\n    initialState: {\n        id: localStorage.getItem('id') || undefined,\n        meanStrategy: localStorage.getItem('meanStrategy') || 'average',\n    },\n    reducers: {\n        setId(state, action) {\n            state.id = action.payload\n\n            if (state.id) {\n                localStorage.setItem('id', state.id)\n            } else {\n                localStorage.removeItem('id')\n            }\n        },\n        setMeanStrategy(state, action) {\n            state.meanStrategy = action.payload\n            localStorage.setItem('meanStrategy', state.meanStrategy)\n        }\n    },\n})\n\nexport const { setId, setMeanStrategy } = settings.actions\n\nexport default settings.reducer","import React from 'react'\nimport classNames from 'classnames'\nimport './Button.scss'\n\ntype Props = {\n    label: string\n    type?: 'reset' | 'submit' | 'button'\n    disabled?: boolean\n    secondary?: boolean\n    onClick?: () => void\n}\n\nconst Button: React.FC<Props> = (props: Props) => (\n    <button\n        className={classNames('button', { 'button--secondary': props.secondary })}\n        type={props.type || 'button'}\n        onClick={props.onClick}\n        disabled={props.disabled}\n    >\n        {props.label}\n    </button>\n)\n\nexport default Button","import React from 'react'\n\nconst useClickOutside = <T extends HTMLElement>(callback: () => void): React.RefObject<T> => {\n  const element = React.useRef<T>(null)\n\n  React.useEffect(() => {\n    const listener = (e: MouseEvent): void => {\n      if (e.target instanceof Node && element.current && !element.current.contains(e.target)) {\n        callback()\n      }\n    }\n\n    if (element.current) {\n      document.addEventListener('click', listener)\n    } else {\n      document.removeEventListener('click', listener)\n    }\n\n    return () => document.removeEventListener('click', listener)\n  }, [element, callback])\n\n  return element\n}\n\nexport default useClickOutside\n","import { useSelector } from 'react-redux'\nimport { RootState } from '../reducers'\n\nconst useMeanLabel: () => (suffix: string) => string = () => {\n    const strategy = useSelector((state: RootState) => state.settings.meanStrategy)\n\n    return (suffix: string) => `${strategy === 'average' ? 'Average' : 'Median'} ${suffix}`\n}\n\nexport default useMeanLabel","import { useSelector } from 'react-redux'\nimport { RootState } from '../reducers'\nimport { average, median } from '../utilities'\n\nconst useMeanValue: () => (series: number[]) => number = () => {\n    const strategy = useSelector((state: RootState) => state.settings.meanStrategy)\n\n    return (series: number[]) => {\n        if (strategy === 'average') {\n            return average(series)\n        }\n\n        return median(series)\n    }\n}\n\nexport default useMeanValue","import React, { useState, useEffect, useCallback } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { setId } from '../../reducers/settings'\nimport { Button } from '../Button'\nimport { useClickOutside } from '../../hooks'\nimport { validateTeamId } from '../../utilities'\nimport { RootState } from '../../reducers'\nimport './Modal.scss'\n\ntype Props = {\n    onClose?: () => void\n}\n\nconst Modal: React.FC<Props> = (props: Props) => {\n    const [ value, setValue ] = useState<string>('')\n\n    const id = useSelector((state: RootState) => state.settings.id)\n\n    const dispatch = useDispatch()\n\n    const close = useCallback((cancel: boolean) => {\n        if (!cancel) {\n            dispatch(setId(Number(value)))\n        } else if (!id) {\n            return\n        }\n\n        if (props.onClose) {\n            props.onClose()\n        }\n    }, [ dispatch, props, value, id ])\n\n    const ref = useClickOutside<HTMLDivElement>(() => close(true))\n\n    useEffect(() => {\n        const listener = (e: KeyboardEvent) => {\n            if (e.key === 'Escape') {\n                close(true)\n            }\n        }\n\n        document.addEventListener('keyup', listener)\n\n        return () => document.removeEventListener('keyup', listener)\n    }, [ close ])\n\n    return (\n        <form onSubmit={e => { close(false); e.preventDefault() }}>\n            <div className=\"modal\">\n                <div className=\"modal__element\" ref={ref}>\n                    <header className=\"modal__header\">\n                        Enter Your Team ID\n                    </header>\n                    <div className=\"modal__body\">\n                        <input\n                            className=\"modal__input\"\n                            type=\"text\"\n                            placeholder=\"e.g. 4654486\"\n                            value={value}\n                            onChange={e => setValue(e.target.value)}\n                        />\n                    </div>\n                    <footer className=\"modal__footer\">\n                        <Button\n                            label=\"Show Stats\"\n                            type=\"submit\"\n                            disabled={!validateTeamId(value)}\n                        />\n                    </footer>\n                </div>\n            </div>\n        </form>\n    )\n}\n\nexport default Modal\n","import { createSlice, ThunkAction, Action } from '@reduxjs/toolkit'\nimport { Bootstrap, Picks, Stats, StatData, LiveEvent } from '../types'\nimport { getPastEvents, getPlayerAggregate, getTotalPoints, getTotalBenchPoints, getTotalRawPoints, getTotalSelections, getTotalStarts, getTotalBenched, getTotalCaptaincies, getSelectionStreak, getStartStreak, getBenchStreak, getNonBlankStreak } from '../utilities'\nimport { finishLoading, startLoading } from './loading'\n\nconst emptyAggregates = {\n    totals: {\n        redCards: 0,\n        yellowCards: 0,\n        goals: 0,\n        assists: 0,\n        cleanSheets: 0,\n        goalsConceded: 0,\n        ownGoals: 0,\n        saves: 0,\n        minutes: 0,\n        penaltiesMissed: 0,\n        penaltiesSaved: 0,\n        timesInDreamteam: 0,\n        bps: 0,\n        bonus: 0,\n        captaincies: 0,\n        points: 0,\n        rawPoints: 0,\n        benchPoints: 0,\n        selections: 0,\n        starts: 0,\n        benched: 0,\n    },\n    streaks: {\n        selection: null,\n        start: null,\n        bench: null,\n        nonBlank: null,\n    },\n}\n\nconst stats = createSlice({\n    name: 'stats',\n    initialState: {\n        data: undefined,\n        chips: undefined,\n    },\n    reducers: {\n        buildDataStart(state) {\n            state.data = undefined\n            state.chips = undefined\n        },\n        buildDataSuccess(state, action) {\n            state.data = action.payload.data\n            state.chips = action.payload.chips\n        },\n    },\n})\n\nexport const { buildDataStart, buildDataSuccess } = stats.actions\n\nconst fetchPicks = async (event: number, entry: number): Promise<Picks> => {\n    const response = await fetch(`https://jsonp.afeld.me/?url=${encodeURIComponent(`https://fantasy.premierleague.com/api/entry/${entry}/event/${event}/picks/`)}`)\n    return await response.json()\n}\n\nconst fetchEvent = async (event: number): Promise<LiveEvent> => {\n    const response = await fetch(`https://jsonp.afeld.me/?url=${encodeURIComponent(`https://fantasy.premierleague.com/api/event/${event}/live/`)}`)\n    return await response.json()\n}\n\nconst fetchGameweekInformation = async (event: number, entry: number): Promise<{ pick: Picks, live: LiveEvent }> => {\n    const [ pick, live ] = await Promise.all([\n        fetchPicks(event, entry),\n        fetchEvent(event),\n    ])\n\n    return {\n        pick,\n        live,\n    }\n}\n\nexport const buildData = (bootstrap: Bootstrap, entry: number): ThunkAction<void, Bootstrap, unknown, Action<string>> => async dispatch => {\n    dispatch(buildDataStart())\n    dispatch(startLoading())\n\n    const gameweeks = await Promise.all(\n        getPastEvents(bootstrap.events).map(async event => await fetchGameweekInformation(event.id, entry))\n    )\n\n    const stats: { [key: number]: StatData } = {}\n    const chips: { [key: number]: string } = {}\n\n    gameweeks.forEach(gw => {\n        if (gw.pick.active_chip) {\n            chips[gw.pick.entry_history.event] = gw.pick.active_chip\n        }\n\n        gw.pick.picks.forEach(item => {\n            if (!stats[item.element]) {\n                stats[item.element] = {\n                    element: bootstrap.elements.find(el => el.id === item.element)!,\n                    data: bootstrap.events.filter(event => event.id < gw.pick.entry_history.event).map(event => ({\n                        event,\n                        multiplier: null,\n                        points: null,\n                        rawPoints: null,\n                        stats: null,\n                        position: null,\n                    })),\n                    aggregates: emptyAggregates,\n                }\n            }\n\n            const points = gw.live.elements.find(el => el.id === item.element)?.stats.total_points || null\n\n            stats[item.element] = {\n                ...stats[item.element],\n                data: [\n                    ...stats[item.element].data,\n                    {\n                        event: bootstrap.events.find(event => event.id === gw.pick.entry_history.event)!,\n                        multiplier: item.multiplier,\n                        points: points !== null ? points * item.multiplier : points,\n                        rawPoints: points,\n                        stats: gw.live.elements.find(el => el.id === item.element)?.stats || null,\n                        position: item.position,\n                    }\n                ],\n            }\n        })\n\n        Object.keys(stats).forEach(player => {\n            const index = Number(player)\n\n            if (stats[index].data.length < gw.pick.entry_history.event) {\n                stats[index] = {\n                    ...stats[index],\n                    data: [\n                        ...stats[index].data,\n                        {\n                            event: bootstrap.events.find(event => event.id === gw.pick.entry_history.event)!,\n                            multiplier: null,\n                            points: null,\n                            rawPoints: null,\n                            stats: null,\n                            position: null,\n                        },\n                    ],\n                }\n            }\n        })\n    })\n\n    Object.keys(stats).forEach(id => {\n        const player = stats[Number(id)]\n\n        stats[Number(id)].aggregates = {\n            totals: {\n                redCards: getPlayerAggregate(player, 'red_cards'),\n                yellowCards: getPlayerAggregate(player, 'yellow_cards'),\n                goals: getPlayerAggregate(player, 'goals_scored'),\n                assists: getPlayerAggregate(player, 'assists'),\n                cleanSheets: getPlayerAggregate(player, 'clean_sheets'),\n                goalsConceded: getPlayerAggregate(player, 'goals_conceded'),\n                ownGoals: getPlayerAggregate(player, 'own_goals'),\n                saves: getPlayerAggregate(player, 'saves'),\n                minutes: getPlayerAggregate(player, 'minutes'),\n                penaltiesMissed: getPlayerAggregate(player, 'penalties_missed'),\n                penaltiesSaved: getPlayerAggregate(player, 'penalties_saved'),\n                timesInDreamteam: getPlayerAggregate(player, 'in_dreamteam'),\n                bps: getPlayerAggregate(player, 'bps'),\n                bonus: getPlayerAggregate(player, 'bonus'),\n                captaincies: getTotalCaptaincies(player),\n                points: getTotalPoints(player),\n                rawPoints: getTotalRawPoints(player),\n                benchPoints: getTotalBenchPoints(player),\n                selections: getTotalSelections(player),\n                starts: getTotalStarts(player),\n                benched: getTotalBenched(player),\n            },\n            streaks: {\n                selection: getSelectionStreak(player),\n                start: getStartStreak(player),\n                bench: getBenchStreak(player),\n                nonBlank: getNonBlankStreak(player),\n            },\n        }\n    })\n\n    dispatch(buildDataSuccess({\n        data: Object.values(stats).reduce((acc: Stats, curr) => ({\n            ...acc,\n            [curr.element.element_type]: [\n                ...(acc[curr.element.element_type] || []),\n                curr,\n            ],\n        }), {}),\n        chips,\n    }))\n    dispatch(finishLoading())\n}\n\nexport default stats.reducer","import { createSlice, ThunkAction, Action } from '@reduxjs/toolkit'\nimport { History } from '../types'\nimport { finishLoading, startLoading } from './loading'\n\nconst history = createSlice({\n    name: 'history',\n    initialState: {\n        data: undefined,\n    },\n    reducers: {\n        fetchHistoryStart(state) {\n            state.data = undefined\n        },\n        fetchHistorySuccess(state, action) {\n            state.data = action.payload\n        },\n    },\n})\n\nexport const { fetchHistoryStart, fetchHistorySuccess } = history.actions\n\nexport const fetchHistory = (entry: number): ThunkAction<void, History, unknown, Action<string>> => async dispatch => {\n    dispatch(fetchHistoryStart())\n    dispatch(startLoading())\n\n    const response = await fetch(`https://jsonp.afeld.me/?url=${encodeURIComponent(`https://fantasy.premierleague.com/api/entry/${entry}/history/`)}`)\n\n    const data = await response.json()\n\n    dispatch(fetchHistorySuccess(data))\n    dispatch(finishLoading())\n}\n\nexport default history.reducer","import React from 'react'\nimport { useSelector } from 'react-redux'\nimport { RootState } from '../../reducers'\nimport { head, last, round, sort, thousandsSeparator } from '../../utilities'\nimport { Widget } from '../Widget'\nimport { useMeanValue, useMeanLabel } from '../../hooks'\n\nconst HistoryWidget: React.FC = () => {\n    const history = useSelector((state: RootState) => state.history.data)\n\n    const meanLabel = useMeanLabel()\n    const meanValue = useMeanValue()\n\n    if (!history) {\n        return (\n            <Widget title=\"Historical Data\" />\n        )\n    }\n\n    const pastSeasonsByRank = sort(history.past, el => el.rank, 'asc')\n    const pastSeasonsByPoints = sort(history.past, el => el.total_points)\n\n    const bestRankedSeason = head(pastSeasonsByRank)\n    const worstRankedSeason = last(pastSeasonsByRank)\n\n    const bestPointSeason = head(pastSeasonsByPoints)\n    const worstPointSeason = last(pastSeasonsByPoints)\n\n    const top1k = pastSeasonsByRank.filter(season => season.rank <= 1000).length\n    const top10k = pastSeasonsByRank.filter(season => season.rank <= 10000).length\n    const top100k = pastSeasonsByRank.filter(season => season.rank <= 100000).length\n    const top1m = pastSeasonsByRank.filter(season => season.rank <= 1000000).length\n\n    return (\n        <Widget title=\"Historical Data\">\n            <ul className=\"widget__list\">\n                {bestRankedSeason && (\n                    <li className=\"widget__list__item\">\n                        <span>Best Season Rank</span>\n                        <span><b>{thousandsSeparator(bestRankedSeason.rank)}</b> ({bestRankedSeason.season_name})</span>\n                    </li>\n                )}\n                {worstRankedSeason && (\n                    <li className=\"widget__list__item\">\n                        <span>Worst Season Rank</span>\n                        <span><b>{thousandsSeparator(worstRankedSeason.rank)}</b> ({worstRankedSeason.season_name})</span>\n                    </li>\n                )}\n                {bestPointSeason && (\n                    <li className=\"widget__list__item\">\n                        <span>Best Points Finish</span>\n                        <span><b>{thousandsSeparator(bestPointSeason.total_points)}</b> ({bestPointSeason.season_name})</span>\n                    </li>\n                )}\n                {worstPointSeason && (\n                    <li className=\"widget__list__item\">\n                        <span>Worst Points Finish</span>\n                        <span><b>{thousandsSeparator(worstPointSeason.total_points)}</b> ({worstPointSeason.season_name})</span>\n                    </li>\n                )}\n                <li className=\"widget__list__item\">\n                    <span>{meanLabel('Rank')}</span>\n                    <b>{thousandsSeparator(Number(round(meanValue(pastSeasonsByRank.map((season) => season.rank)), 0)))}</b>\n                </li>\n                <li className=\"widget__list__item\">\n                    <span>{meanLabel('Points')}</span>\n                    <b>{thousandsSeparator(Number(round(meanValue(pastSeasonsByPoints.map((season) => season.total_points)), 0)))}</b>\n                </li>\n                <li className=\"widget__list__item\">\n                    <span>Top 1K Finishes</span>\n                    <b>{top1k}</b>\n                </li>\n                <li className=\"widget__list__item\">\n                    <span>Top 10K Finishes</span>\n                    <b>{top10k}</b>\n                </li>\n                <li className=\"widget__list__item\">\n                    <span>Top 100K Finishes</span>\n                    <b>{top100k}</b>\n                </li>\n                <li className=\"widget__list__item\">\n                    <span>Top 1M Finishes</span>\n                    <b>{top1m}</b>\n                </li>\n            </ul>\n        </Widget>\n    )\n}\n\nexport default HistoryWidget","import React from 'react'\nimport { useSelector } from 'react-redux'\nimport { RootState } from '../../reducers'\nimport './TotsPlayer.scss'\n\ntype Props = {\n    id: number\n    points: number\n}\n\nconst TotsPlayer: React.FC<Props> = (props: Props) => {\n    const bootstrap = useSelector((state: RootState) => state.bootstrap.data)\n\n    const player = bootstrap?.elements.find(el => el.id === props.id)\n    const team = bootstrap?.teams.find(el => el.id === player?.team)\n    const position = bootstrap?.element_types.find(el => el.id === player?.element_type)\n\n    return (\n        <div className=\"tots-player\">\n            <img\n                src={`https://fantasy.premierleague.com/dist/img/shirts/special/shirt_${team?.code}${position?.singular_name_short === 'GKP' ? '_1' : ''}-66.png`}\n                alt={player?.web_name}\n                className=\"tots-player__shirt\"\n            />\n            <div className=\"tots-player__detail\">\n                <div className=\"tots-player__name\">\n                    <span>{player?.web_name}</span>\n                </div>\n                <div className=\"tots-player__points\">\n                    {props.points}\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default TotsPlayer","import React from 'react'\nimport { useSelector } from 'react-redux'\nimport { RootState } from '../../reducers'\nimport { sort } from '../../utilities'\nimport { TotsPlayer } from '../TotsPlayer'\nimport { Widget } from '../Widget'\nimport './TotsWidget.scss'\n\nconst MIN_GK = 1\nconst MAX_GK = 2\n\nconst MIN_DEF = 3\nconst MAX_DEF = 5\n\nconst MIN_MID = 2\nconst MAX_MID = 5\n\nconst MIN_FWD = 1\nconst MAX_FWD = 3\n\nconst TotsWidget: React.FC = () => {\n    const stats = useSelector((state: RootState) => state.stats.data)\n\n    if (!stats) {\n        return (\n            <Widget title=\"Team of the Season\" />\n        )\n    }\n\n    const gk = sort(stats[1], el => el.aggregates.totals.points).slice(0, MAX_GK)\n    const def = sort(stats[2], el => el.aggregates.totals.points).slice(0, MAX_DEF)\n    const mid = sort(stats[3], el => el.aggregates.totals.points).slice(0, MAX_MID)\n    const fwd = sort(stats[4], el => el.aggregates.totals.points).slice(0, MAX_FWD)\n\n    const top = gk.slice(0, MIN_GK).concat(def.slice(0, MIN_DEF)).concat(mid.slice(0, MIN_MID)).concat(fwd.slice(0, MIN_FWD))\n    const rest = sort(def.slice(MIN_DEF).concat(mid.slice(MIN_MID)).concat(fwd.slice(MIN_FWD)), el => el.aggregates.totals.points)\n\n    const xi = sort(top.concat(rest.slice(0, 4)), el => el.element.element_type, 'asc')\n    const bench = sort(gk.slice(MIN_GK).concat(rest.slice(4)), el => el.element.element_type, 'asc')\n\n    return (\n        <Widget title=\"Team of the Season\" cssClasses=\"tots-widget\">\n            <div className=\"tots\">\n                <div className=\"tots__row\">\n                    {xi.filter(el => el.element.element_type === 1).map(player => (\n                        <TotsPlayer\n                            key={player.element.id}\n                            id={player.element.id}\n                            points={player.aggregates.totals.points}\n                        />\n                    ))}\n                </div>\n                <div className=\"tots__row\">\n                    {xi.filter(el => el.element.element_type === 2).map(player => (\n                        <TotsPlayer\n                            key={player.element.id}\n                            id={player.element.id}\n                            points={player.aggregates.totals.points}\n                        />\n                    ))}\n                </div>\n                <div className=\"tots__row\">\n                    {xi.filter(el => el.element.element_type === 3).map(player => (\n                        <TotsPlayer\n                            key={player.element.id}\n                            id={player.element.id}\n                            points={player.aggregates.totals.points}\n                        />\n                    ))}\n                </div>\n                <div className=\"tots__row\">\n                    {xi.filter(el => el.element.element_type === 4).map(player => (\n                        <TotsPlayer\n                            key={player.element.id}\n                            id={player.element.id}\n                            points={player.aggregates.totals.points}\n                        />\n                    ))}\n                </div>\n                <div className=\"tots__row tots__row--bench\">\n                    {bench.map(player => (\n                        <TotsPlayer\n                            key={player.element.id}\n                            id={player.element.id}\n                            points={player.aggregates.totals.points}\n                        />\n                    ))}\n                </div>\n            </div>\n        </Widget>\n    )\n}\n\nexport default TotsWidget","import React from 'react'\nimport './Metric.scss'\n\nconst explanations = {\n    'ppg': 'Points per Game',\n    'ppp': 'Points per Player',\n}\n\ntype Props = {\n    metric: 'ppg' | 'ppp'\n}\n\nconst Metric: React.FC<Props> = (props: Props) => {\n    return (\n        <abbr className=\"metric\" title={explanations[props.metric]}>{props.metric}</abbr>\n    )\n}\n\nexport default Metric","import React from 'react'\nimport { useSelector } from 'react-redux'\nimport { RootState } from '../../reducers'\n\ntype Props = {\n    label?: string\n    event?: number\n    target?: 'transfers'\n}\n\nconst SiteLink: React.FC<Props> = (props: Props) => {\n    const id = useSelector((state: RootState) => state.settings.id)\n\n    const baseUrl = `https://fantasy.premierleague.com/entry/${id}/`\n    let url = baseUrl\n\n    if (props.event) {\n        url = `${url}event/${props.event}/`\n    } else if (props.target) {\n        url = `${url}${props.target}/`\n    }\n\n    return (\n        <a href={url} target=\"_blank\" rel=\"noopener noreferrer\">\n            {props.event ? `GW ${props.event}` : props.label ? props.label : url}\n        </a>\n    )\n}\n\nexport default SiteLink","import React from 'react'\nimport { useSelector } from 'react-redux'\nimport { RootState } from '../../reducers'\nimport { StatData } from '../../types'\nimport { getAllPlayers, getTopStatAggregate, thousandsSeparator, round, sort, head, getPointsLabel } from '../../utilities'\nimport { Metric } from '../Metric'\nimport { Player } from '../Player'\nimport { SiteLink } from '../SiteLink'\nimport { Widget } from '../Widget'\n\nconst renderTopBenchGWReturner = (returner: StatData): JSX.Element | null => {\n    const week = head(returner.data)\n\n    if (!week) {\n        return null\n    }\n\n    return (\n        <li className=\"widget__list__item\">\n            <span>Top GW Bench Returner</span>\n            <span>\n                <Player\n                    id={returner.element.id}\n                    suffix={() => (\n                        <>\n                            {' '}\n                            (\n                                {getPointsLabel(week.rawPoints || 0)},\n                                {' '}\n                                <SiteLink event={week.event.id} />\n                            )\n                        </>\n                    )}\n                    condensed\n                />\n            </span>\n        </li>\n    )\n}\n\nconst PlayerStatsWidget: React.FC = () => {\n    const stats = useSelector((state: RootState) => state.stats.data)\n    const history = useSelector((state: RootState) => state.history.data)\n\n    if (!history || !stats) {\n        return (\n            <Widget title=\"Player Stats\" />\n        )\n    }\n\n    const allPlayers = getAllPlayers(stats)\n\n    const reds = getTopStatAggregate(allPlayers, 'redCards')\n    const yellows = getTopStatAggregate(allPlayers, 'yellowCards')\n    const goals = getTopStatAggregate(allPlayers, 'goals')\n    const assists = getTopStatAggregate(allPlayers, 'assists')\n    const cleanSheets = getTopStatAggregate(allPlayers, 'cleanSheets')\n    const goalsConceded = getTopStatAggregate(allPlayers, 'goalsConceded')\n    const ownGoals = getTopStatAggregate(allPlayers, 'ownGoals')\n    const saves = getTopStatAggregate(allPlayers, 'saves')\n    const minutes = getTopStatAggregate(allPlayers, 'minutes')\n    const penaltiesMissed = getTopStatAggregate(allPlayers, 'penaltiesMissed')\n    const penaltiesSaved = getTopStatAggregate(allPlayers, 'penaltiesSaved')\n    const inDreamteam = getTopStatAggregate(allPlayers, 'timesInDreamteam')\n    const bps = getTopStatAggregate(allPlayers, 'bps')\n    const bonus = getTopStatAggregate(allPlayers, 'bonus')\n\n    const mostCaptaincies = head(sort(allPlayers, el => el.aggregates.totals.captaincies))\n\n    const topReturner = head(sort(\n        allPlayers\n            .map(player => ({\n                ...player,\n                data: sort([ ...player.data ], el => el.points || 0),\n            })),\n        el => head(el.data)?.points || 0\n    ))\n\n    const topBenchGWReturner = head(sort(\n        allPlayers\n            .map(player => ({\n                ...player,\n                data: sort(player.data.filter(data => data.multiplier === 0), el => el.rawPoints || 0),\n            }))\n            .filter(player => player.data.length),\n        el => head(el.data)?.rawPoints || 0\n    ))\n\n    const topSeasonReturner = head(sort(allPlayers, el => el.aggregates.totals.points))\n    const topBenchReturner = head(sort(allPlayers, el => el.aggregates.totals.benchPoints))\n\n    const weeks = history.current.length\n\n    const idealCaptain = head(sort(\n        Object.entries(Array.from(Array(weeks).keys())\n            .map((el, index) => head(sort(allPlayers, el => el.data[index].rawPoints || 0)))\n            .reduce((acc, curr) => curr ? ({\n                ...acc,\n                [curr.element.id]: (acc[curr.element.id] ? acc[curr.element.id] : 0) + 1,\n            }) : acc, {} as Record<number, number>)),\n        el => el[1]\n    ))\n\n    return (\n        <Widget title=\"Player Stats\">\n            <ul className=\"widget__list\">\n                {topReturner && (\n                    <li className=\"widget__list__item\">\n                        <span>Top GW Returner</span>\n                        <span>\n                            <Player\n                                id={topReturner.element.id}\n                                suffix={() => {\n                                    const week = head(topReturner.data)\n\n                                    if (!week) {\n                                        return null\n                                    }\n\n                                    return (\n                                        <>\n                                            {' '}\n                                            (\n                                                {getPointsLabel(week.points || 0)},\n                                                {' '}\n                                                <SiteLink event={week.event.id} />\n                                            )\n                                        </>\n                                    )\n                                }}\n                                condensed\n                            />\n                        </span>\n                    </li>\n                )}\n                {topSeasonReturner && (\n                    <li className=\"widget__list__item\">\n                        <span>Top Season Returner</span>\n                        {topSeasonReturner.aggregates.totals.starts > 0 && (\n                            <Player\n                                id={topSeasonReturner.element.id}\n                                suffix={() => (\n                                    <>\n                                        {' '}\n                                        (\n                                            {getPointsLabel(topSeasonReturner.aggregates.totals.points)},\n                                            {' '}\n                                            {round(topSeasonReturner.aggregates.totals.points / topSeasonReturner.aggregates.totals.starts)}\n                                            {' '}\n                                            <Metric metric=\"ppg\" />\n                                        )\n                                    </>\n                                )}\n                                condensed\n                            />\n                        )}\n                    </li>\n                )}\n                {topBenchGWReturner && renderTopBenchGWReturner(topBenchGWReturner)}\n                {topBenchReturner && (\n                    <li className=\"widget__list__item\">\n                        <span>Most Points While Benched</span>\n                        {topBenchReturner.aggregates.totals.benched > 0 && (\n                            <Player\n                                id={topBenchReturner.element.id}\n                                suffix={() => (\n                                    <>\n                                        {' '}\n                                        (\n                                            {getPointsLabel(topBenchReturner.aggregates.totals.benchPoints)},\n                                            {' '}\n                                            {round(topBenchReturner.aggregates.totals.benchPoints / topBenchReturner.aggregates.totals.benched)}\n                                            {' '}\n                                            <Metric metric=\"ppg\" />\n                                        )\n                                    </>\n                                )}\n                                condensed\n                            />\n                        )}\n                    </li>\n                )}\n                {goals && goals.aggregates.totals.goals > 0 && (\n                    <li className=\"widget__list__item\">\n                        <span>Top Scorer</span>\n                        <Player id={goals.element.id} suffix={`${goals.aggregates.totals.goals}`} condensed />\n                    </li>\n                )}\n                {assists && assists.aggregates.totals.assists > 0 && (\n                    <li className=\"widget__list__item\">\n                        <span>Most Assists</span>\n                        <Player id={assists.element.id} suffix={`${assists.aggregates.totals.assists}`} condensed />\n                    </li>\n                )}\n                {ownGoals && ownGoals.aggregates.totals.ownGoals > 0 && (\n                    <li className=\"widget__list__item\">\n                        <span>Most Own Goals</span>\n                        <Player id={ownGoals.element.id} suffix={`${ownGoals.aggregates.totals.ownGoals}`} condensed />\n                    </li>\n                )}\n                {goalsConceded && goalsConceded.aggregates.totals.goalsConceded > 0 && (\n                    <li className=\"widget__list__item\">\n                        <span>Most Goals Conceded</span>\n                        <Player id={goalsConceded.element.id} suffix={`${goalsConceded.aggregates.totals.goalsConceded}`} condensed />\n                    </li>\n                )}\n                {cleanSheets && cleanSheets.aggregates.totals.cleanSheets > 0 && (\n                    <li className=\"widget__list__item\">\n                        <span>Most Clean Sheets</span>\n                        <Player id={cleanSheets.element.id} suffix={`${cleanSheets.aggregates.totals.cleanSheets}`} condensed />\n                    </li>\n                )}\n                {saves && saves.aggregates.totals.saves > 0 && (\n                    <li className=\"widget__list__item\">\n                        <span>Most Saves</span>\n                        <Player id={saves.element.id} suffix={`${saves.aggregates.totals.saves}`} condensed />\n                    </li>\n                )}\n                {penaltiesMissed && penaltiesMissed.aggregates.totals.penaltiesMissed > 0 && (\n                    <li className=\"widget__list__item\">\n                        <span>Most Penalties Missed</span>\n                        <Player id={penaltiesMissed.element.id} suffix={`${penaltiesMissed.aggregates.totals.penaltiesMissed}`} condensed />\n                    </li>\n                )}\n                {penaltiesSaved && penaltiesSaved.aggregates.totals.penaltiesSaved > 0 && (\n                    <li className=\"widget__list__item\">\n                        <span>Most Penalties Saved</span>\n                        <Player id={penaltiesSaved.element.id} suffix={`${penaltiesSaved.aggregates.totals.penaltiesSaved}`} condensed />\n                    </li>\n                )}\n                {minutes && minutes.aggregates.totals.minutes > 0 && (\n                    <li className=\"widget__list__item\">\n                        <span>Most Minutes</span>\n                        <Player id={minutes.element.id} suffix={`${thousandsSeparator(minutes.aggregates.totals.minutes as number)}`} condensed />\n                    </li>\n                )}\n                {reds && reds.aggregates.totals.redCards > 0 && (\n                    <li className=\"widget__list__item\">\n                        <span>Most Red Cards</span>\n                        <Player id={reds.element.id} suffix={`${reds.aggregates.totals.redCards}`} condensed />\n                    </li>\n                )}\n                {yellows && yellows.aggregates.totals.yellowCards > 0 && (\n                    <li className=\"widget__list__item\">\n                        <span>Most Yellow Cards</span>\n                        <Player id={yellows.element.id} suffix={`${yellows.aggregates.totals.yellowCards}`} condensed />\n                    </li>\n                )}\n                {bonus && bonus.aggregates.totals.bonus > 0 && (\n                    <li className=\"widget__list__item\">\n                        <span>Most Bonus Points</span>\n                        <Player id={bonus.element.id} suffix={`${bonus.aggregates.totals.bonus}`} condensed />\n                    </li>\n                )}\n                {bps && bps.aggregates.totals.bps > 0 && (\n                    <li className=\"widget__list__item\">\n                        <span>Highest Total BPS</span>\n                        <Player id={bps.element.id} suffix={`${thousandsSeparator(bps.aggregates.totals.bps)}`} condensed />\n                    </li>\n                )}\n                {inDreamteam && inDreamteam.aggregates.totals.timesInDreamteam > 0 && (\n                    <li className=\"widget__list__item\">\n                        <span>Most Times in Dreamteam</span>\n                        <Player id={inDreamteam.element.id} suffix={`${inDreamteam.aggregates.totals.timesInDreamteam}`} condensed />\n                    </li>\n                )}\n                {mostCaptaincies && mostCaptaincies.aggregates.totals.captaincies > 0 && (\n                    <li className=\"widget__list__item\">\n                        <span>Most Captaincies</span>\n                        <Player id={mostCaptaincies.element.id} suffix={`${mostCaptaincies.aggregates.totals.captaincies}`} condensed />\n                    </li>\n                )}\n                {idealCaptain && (\n                    <li className=\"widget__list__item\">\n                        <span>Ideal Captain</span>\n                        <Player id={Number(idealCaptain[0])} suffix={`${idealCaptain[1]}`} condensed />\n                    </li>\n                )}\n            </ul>\n        </Widget>\n    )\n}\n\nexport default PlayerStatsWidget","import React from 'react'\nimport { useSelector } from 'react-redux'\nimport { RootState } from '../../reducers'\nimport { Widget } from '../Widget'\nimport { thousandsSeparator, sumNumbers, round, sort, getPointsLabel } from '../../utilities'\nimport { Metric } from '../Metric'\n\ntype FormationInformation = {\n    count: number\n    points: number\n}\n\nconst formatFormation = (formation: string) => sumNumbers(formation.split('-').map(position => Number(position))) > 10 ? 'Bench Boost' : formation\n\nconst FormationWidget: React.FC = () => {\n    const stats = useSelector((state: RootState) => state.stats.data)\n\n    const history = useSelector((state: RootState) => state.history.data)\n\n    if (!stats || !history) {\n        return (\n            <Widget title=\"Formations\" />\n        )\n    }\n\n    const weeks = history.current.length\n\n    const formations = Object\n        .values(stats)\n        .map(position => {\n            const selections = position.map(player => player.data.map(data => data.multiplier))\n\n            return Array.from(Array(weeks).keys()).map((el, index) => selections\n                .map(player => (player[index] || 0) > 0)\n                .filter(val => !!val)\n                .length\n            )\n        })\n        .slice(1)\n\n    const data = Array\n        .from(Array(weeks).keys())\n        .map((el, index) => formations\n            .map(entries => entries[index])\n            .join('-')\n        )\n        .reduce((acc, formation, index) => ({\n            ...acc,\n            [formation]: {\n                count: (acc[formation] ? acc[formation].count : 0) + 1,\n                points: (acc[formation] ? acc[formation].points : 0) + history.current[index].points,\n            }\n        }), {} as Record<string, FormationInformation>)\n\n    return (\n        <Widget title=\"Formations\">\n            <ul className=\"widget__list\">\n                {sort(Object.entries(data), el => el[1].count).map(([ formation, information ]) => {\n                    return (\n                        <li className=\"widget__list__item\" key={formation}>\n                            <span>{formatFormation(formation)}</span>\n                            <span><b>{information.count}</b> ({getPointsLabel(thousandsSeparator(information.points))}, {round(information.points / information.count)} <Metric metric=\"ppg\" />)</span>\n                        </li>\n                    )\n                })}\n            </ul>\n        </Widget>\n    )\n}\n\nexport default FormationWidget","import React from 'react'\nimport { useSelector } from 'react-redux'\nimport { RootState } from '../../reducers'\nimport { thousandsSeparator, sumNumbers, round, sort, getPointsLabel } from '../../utilities'\nimport { Player } from '../Player'\nimport { Widget } from '../Widget'\nimport { Metric } from '../Metric';\n\nconst CaptainWidget: React.FC = () => {\n    const stats = useSelector((state: RootState) => state.stats.data)\n\n    if (!stats) {\n        return (\n            <Widget title=\"Captains\" />\n        )\n    }\n\n    const captains = sort(\n        Object\n            .values(stats)\n            .map(position => {\n                return position\n                    .map(player => ({\n                        player,\n                        data: player.data.filter(data => (data.multiplier || 0) > 1),\n                    }))\n                    .filter(player => player.data.length > 0)\n            })\n            .reduce((acc, curr) => acc.concat(curr), []),\n        el => el.data.length\n    )\n\n    return (\n        <Widget title=\"Captains\">\n            <ul className=\"widget__list\">\n                {captains.map(captain => {\n                    const sum = sumNumbers(captain.data.map(data => data.points || 0))\n\n                    return (\n                        <li className=\"widget__list__item\" key={captain.player.element.id}>\n                            <Player id={captain.player.element.id} />\n                            <span><b>{captain.data.length}</b> ({getPointsLabel(thousandsSeparator(sum))}, {round(sum / captain.data.length)} <Metric metric=\"ppg\" />)</span>\n                        </li>\n                    )\n                })}\n            </ul>\n        </Widget>\n    )\n}\n\nexport default CaptainWidget","import React from 'react'\nimport { useSelector } from 'react-redux'\nimport { useMeanLabel, useMeanValue } from '../../hooks'\nimport { RootState } from '../../reducers'\nimport { Widget } from '../Widget'\nimport { head, last, round, sort, thousandsSeparator, getPointsLabel } from '../../utilities'\nimport { SiteLink } from '../SiteLink'\n\nconst GameweekWidget: React.FC = () => {\n    const history = useSelector((state: RootState) => state.history.data)\n    const bootstrap = useSelector((state: RootState) => state.bootstrap.data)\n\n    const meanLabel = useMeanLabel()\n    const meanValue = useMeanValue()\n\n    if (!history || !bootstrap) {\n        return (\n            <Widget title=\"Gameweeks\" />\n        )\n    }\n\n    const differences = history.current.map((week, index) => week.points - bootstrap.events[index].average_entry_score)\n    const sortedRanks = sort(history.current, el => el.rank, 'asc')\n\n    const gws = sort(history.current, el => el.points)\n\n    const bestGW = head(gws)\n    const worstGW = last(gws)\n\n    const bestGWRank = head(sortedRanks)\n    const worstGWRank = last(sortedRanks)\n\n    return (\n        <Widget title=\"Gameweeks\">\n            <ul className=\"widget__list\">\n                <li className=\"widget__list__item\">\n                    <span>{meanLabel('Difference to GW Average')}</span>\n                    <b>{getPointsLabel(round(meanValue(differences)))}</b>\n                </li>\n                <li className=\"widget__list__item\">\n                    <span>Times Above GW Average</span>\n                    <b>{differences.filter(diff => diff >= 0).length}</b>\n                </li>\n                <li className=\"widget__list__item\">\n                    <span>Times Below GW Average</span>\n                    <b>{differences.filter(diff => diff < 0).length}</b>\n                </li>\n                <li className=\"widget__list__item\">\n                    <span>{meanLabel('GW Rank')}</span>\n                    <b>{thousandsSeparator(Number(round(meanValue(history.current.map(week => week.rank)))))}</b>\n                </li>\n                {bestGW && (\n                    <li className=\"widget__list__item\">\n                        <span>Best Gameweek</span>\n                        <span>\n                            <b>{getPointsLabel(bestGW.points)}</b>\n                            {' '}\n                            (\n                                <SiteLink event={bestGW.event} />\n                            )\n                        </span>\n                    </li>\n                )}\n                {worstGW && (\n                    <li className=\"widget__list__item\">\n                        <span>Worst Gameweek</span>\n                        <span>\n                            <b>{getPointsLabel(worstGW.points)}</b>\n                            {' '}\n                            (\n                                <SiteLink event={worstGW.event} />\n                            )\n                        </span>\n                    </li>\n                )}\n                {bestGWRank && (\n                    <li className=\"widget__list__item\">\n                        <span>Best GW Rank</span>\n                        <span>\n                            <b>{thousandsSeparator(bestGWRank.rank)}</b>\n                            {' '}\n                            (\n                                <SiteLink event={bestGWRank.event} />\n                            )\n                        </span>\n                    </li>\n                )}\n                {worstGWRank && (\n                    <li className=\"widget__list__item\">\n                        <span>Worst GW Rank</span>\n                        <span>\n                            <b>{thousandsSeparator(worstGWRank.rank)}</b>\n                            {' '}\n                            (\n                                <SiteLink event={worstGWRank.event} />\n                            )\n                        </span>\n                    </li>\n                )}\n            </ul>\n        </Widget>\n    )\n}\n\nexport default GameweekWidget","import React from 'react'\nimport { useSelector } from 'react-redux'\nimport { useMeanValue } from '../../hooks'\nimport { RootState } from '../../reducers'\nimport { thousandsSeparator, sumNumbers, round, reduce, getPointsLabel } from '../../utilities'\nimport { Widget } from '../Widget'\nimport { Metric } from '../Metric';\n\nconst PositionsWidget: React.FC = () => {\n    const stats = useSelector((state: RootState) => state.stats.data)\n    const bootstrap = useSelector((state: RootState) => state.bootstrap.data)\n\n    const meanValue = useMeanValue()\n\n    if (!stats || !bootstrap) {\n        return (\n            <Widget title=\"Positions\" />\n        )\n    }\n\n    const positions: Record<string, number> = Object.entries(stats)\n        .reduce((acc, [ elementType, elements ]) => ({\n            ...acc,\n            [elementType]: elements.length,\n        }), {})\n\n    return (\n        <Widget title=\"Positions\">\n            <ul className=\"widget__list\">\n                <li className=\"widget__list__item\">\n                    <span>Total</span>\n                    <span>{reduce(Object.values(positions), el => el)}</span>\n                </li>\n                {Object.entries(positions).map(([ elementType, elements ]) => {\n                    const totalPoints = stats[Number(elementType)].map(player => player.aggregates.totals.points)\n\n                    return (\n                        <li className=\"widget__list__item\" key={elementType}>\n                            <span>{bootstrap.element_types.find(el => el.id === Number(elementType))?.plural_name}</span>\n                            <span>\n                                <b>{elements}</b>\n                                {' '}\n                                ({getPointsLabel(thousandsSeparator(sumNumbers(totalPoints)))}, {round(meanValue(totalPoints))} <Metric metric=\"ppp\" />)\n                            </span>\n                        </li>\n                    )\n                })}\n            </ul>\n        </Widget>\n    )\n}\n\nexport default PositionsWidget","import { createSlice, ThunkAction, Action } from '@reduxjs/toolkit'\nimport { History } from '../types'\nimport { finishLoading, startLoading } from './loading'\n\nconst entry = createSlice({\n    name: 'entry',\n    initialState: {\n        data: undefined,\n    },\n    reducers: {\n        fetchEntryStart(state) {\n            state.data = undefined\n        },\n        fetchEntrySuccess(state, action) {\n            state.data = action.payload\n        },\n    },\n})\n\nexport const { fetchEntryStart, fetchEntrySuccess } = entry.actions\n\nexport const fetchEntry = (id: number): ThunkAction<void, History, unknown, Action<string>> => async dispatch => {\n    dispatch(fetchEntryStart())\n    dispatch(startLoading())\n\n    const response = await fetch(`https://jsonp.afeld.me/?url=${encodeURIComponent(`https://fantasy.premierleague.com/api/entry/${id}/`)}`)\n\n    const data = await response.json()\n\n    dispatch(fetchEntrySuccess(data))\n    dispatch(finishLoading())\n}\n\nexport default entry.reducer","import React from 'react'\nimport { useSelector } from 'react-redux'\nimport { RootState } from '../../reducers'\nimport { Widget } from '../Widget'\nimport { getAllPlayers, head, thousandsSeparator, sumNumbers, reduce, round, getPointsLabel } from '../../utilities'\nimport { SiteLink } from '../SiteLink'\nimport { StatData } from '../../types'\nimport { StatAggregateTotals } from '../../types'\n\nconst getAggregateValues = (players: StatData[], key: keyof StatAggregateTotals): number => sumNumbers(players.map(player => player.aggregates.totals[key]))\n\nconst SeasonWidget: React.FC = () => {\n    const stats = useSelector((state: RootState) => state.stats.data)\n    const chips = useSelector((state: RootState) => state.stats.chips)\n\n    const history = useSelector((state: RootState) => state.history.data)\n\n    const entry = useSelector((state: RootState) => state.entry.data)\n\n    if (!stats || !history || !chips || !entry) {\n        return (\n            <Widget title=\"Season\" />\n        )\n    }\n\n    const allPlayers = getAllPlayers(stats)\n\n    const reds = getAggregateValues(allPlayers, 'redCards')\n    const yellows = getAggregateValues(allPlayers, 'yellowCards')\n    const goals = getAggregateValues(allPlayers, 'goals')\n    const assists = getAggregateValues(allPlayers, 'assists')\n    const cleanSheets = getAggregateValues(allPlayers, 'cleanSheets')\n    const goalsConceded = getAggregateValues(allPlayers, 'goalsConceded')\n    const ownGoals = getAggregateValues(allPlayers, 'ownGoals')\n    const saves = getAggregateValues(allPlayers, 'saves')\n    const minutes = getAggregateValues(allPlayers, 'minutes')\n    const penaltiesMissed = getAggregateValues(allPlayers, 'penaltiesMissed')\n    const penaltiesSaved = getAggregateValues(allPlayers, 'penaltiesSaved')\n    const inDreamteam = getAggregateValues(allPlayers, 'timesInDreamteam')\n    const bps = getAggregateValues(allPlayers, 'bps')\n    const bonus = getAggregateValues(allPlayers, 'bonus')\n\n    const totalTransfers = reduce(history.current, el => el.event_transfers)\n    const totalHits = reduce(history.current, el => el.event_transfers_cost / 4)\n    const totalBenched = reduce(history.current, el => el.points_on_bench)\n\n    const tc = allPlayers\n        .find(player => player.data.findIndex(data => data.multiplier === 3) !== -1)\n        ?.data\n        .find(data => data.multiplier === 3)\n\n    const bbWeek = head(Object.entries(chips).find(([ gw, chip ]) => chip === 'bboost') || [])\n\n    const bbPoints = bbWeek\n        ? sumNumbers(allPlayers\n            .filter(player => (player.data[Number(bbWeek) - 1].position || 0) > 11)\n            .map(player => player.data[Number(bbWeek) - 1].points || 0))\n        : null\n\n    const doubleDigitHauls = reduce(allPlayers.map(player => player.data.filter(data => (data.rawPoints || 0) > 9).length), el => el)\n    const totalPlays = reduce(allPlayers.map(player => player.data.filter(data => data.multiplier !== null).length), el => el)\n\n    return (\n        <Widget title=\"Season\">\n            <ul className=\"widget__list\">\n                <li className=\"widget__list__item\">\n                    <span>Total Transfers Made</span>\n                    <span>\n                        <SiteLink target=\"transfers\" label={`${totalTransfers}`} />\n                    </span>\n                </li>\n                <li className=\"widget__list__item\">\n                    <span>Total Hits Taken</span>\n                    <span><b>{totalHits}</b> ({getPointsLabel(totalHits * -4)}, {entry.summary_overall_points > 0 ? round(totalHits * 4 / entry.summary_overall_points * 100) : 0}%)</span>\n                </li>\n                <li className=\"widget__list__item\">\n                    <span>Total Points</span>\n                    <b>{getPointsLabel(thousandsSeparator(entry.summary_overall_points))}</b>\n                </li>\n                <li className=\"widget__list__item\">\n                    <span>Total Points on Bench</span>\n                    <b>{getPointsLabel(thousandsSeparator(totalBenched))}</b>\n                </li>\n                <li className=\"widget__list__item\">\n                    <span>Double Digit Hauls</span>\n                    <span><b>{doubleDigitHauls}</b>{totalPlays > 0 && ` (${round(doubleDigitHauls / totalPlays)}%)`}</span>\n                </li>\n                {tc !== undefined && (\n                    <li className=\"widget__list__item\">\n                        <span>Triple Captain Points Gained</span>\n                        <span>\n                            <b>{getPointsLabel((tc.points || 0) / 3)}</b>\n                            {' '}\n                            (\n                                <SiteLink event={tc.event.id} />\n                            )\n                        </span>\n                    </li>\n                )}\n                {bbPoints !== null && (\n                    <li className=\"widget__list__item\">\n                        <span>Bench Boost Points Gained</span>\n                        <span>\n                            <b>{getPointsLabel(bbPoints)}</b>\n                            {' '}\n                            (\n                                <SiteLink event={Number(bbWeek)} />\n                            )\n                        </span>\n                    </li>\n                )}\n                <li className=\"widget__list__item\">\n                    <span>Total Goals Scored</span>\n                    <b>{goals}</b>\n                </li>\n                <li className=\"widget__list__item\">\n                    <span>Total Assists</span>\n                    <b>{assists}</b>\n                </li>\n                <li className=\"widget__list__item\">\n                    <span>Total Own Goals</span>\n                    <b>{ownGoals}</b>\n                </li>\n                <li className=\"widget__list__item\">\n                    <span>Total Goals Conceded</span>\n                    <b>{goalsConceded}</b>\n                </li>\n                <li className=\"widget__list__item\">\n                    <span>Total Clean Sheets</span>\n                    <b>{cleanSheets}</b>\n                </li>\n                <li className=\"widget__list__item\">\n                    <span>Total Saves</span>\n                    <b>{saves}</b>\n                </li>\n                <li className=\"widget__list__item\">\n                    <span>Total Penalties Missed</span>\n                    <b>{penaltiesMissed}</b>\n                </li>\n                <li className=\"widget__list__item\">\n                    <span>Total Penalties Saved</span>\n                    <b>{penaltiesSaved}</b>\n                </li>\n                <li className=\"widget__list__item\">\n                    <span>Total Minutes Played</span>\n                    <b>{thousandsSeparator(minutes)}</b>\n                </li>\n                <li className=\"widget__list__item\">\n                    <span>Total Red Cards</span>\n                    <b>{reds}</b>\n                </li>\n                <li className=\"widget__list__item\">\n                    <span>Total Yellow Cards</span>\n                    <b>{yellows}</b>\n                </li>\n                <li className=\"widget__list__item\">\n                    <span>Total Bonus Points</span>\n                    <b>{thousandsSeparator(bonus)}</b>\n                </li>\n                <li className=\"widget__list__item\">\n                    <span>Total BPS</span>\n                    <b>{thousandsSeparator(bps)}</b>\n                </li>\n                <li className=\"widget__list__item\">\n                    <span>Total Times in Dreamteam</span>\n                    <b>{inDreamteam}</b>\n                </li>\n            </ul>\n        </Widget>\n    )\n}\n\nexport default SeasonWidget","import React from 'react'\nimport { Team as TeamType } from '../../types'\nimport './Team.scss'\n\ntype Props = {\n    team: TeamType\n}\n\nconst Team: React.FC<Props> = (props: Props) => (\n    <div className=\"team\">\n        <img\n            src={`https://fantasy.premierleague.com/dist/img/shirts/special/shirt_${props.team.code}-66.png`}\n            alt={props.team.short_name}\n            className=\"player__shirt\"\n        />\n        <span className=\"team__name\">{props.team.name}</span>\n    </div>\n)\n\nexport default Team","import React from 'react'\nimport { useSelector } from 'react-redux'\nimport { RootState } from '../../reducers'\nimport { Team } from '../Team'\nimport { Widget } from '../Widget'\nimport { getAllPlayers, getPointsLabel, initialCaps, round, sort, sumNumbers } from '../../utilities'\nimport { Metric } from '../Metric'\nimport './TeamsWidget.scss'\n\nconst TeamsWidget: React.FC = () => {\n    const stats = useSelector((state: RootState) => state.stats.data)\n    const bootstrap = useSelector((state: RootState) => state.bootstrap.data)\n\n    if (!stats || !bootstrap) {\n        return (\n            <Widget title=\"Teams\" />\n        )\n    }\n\n    const counts = Object.values(stats)\n        .reduce((acc: number[], curr) => [ ...acc, ...curr.map(el => el.element.team) ], [])\n        .reduce((acc: { [key: number]: number }, curr) => ({ ...acc, [curr]: (acc[Number(curr)] || 0) + 1 }), {})\n\n    const teams = sort(bootstrap.teams, el => counts[el.id] || 0)\n\n    const allPlayers = getAllPlayers(stats)\n\n    return (\n        <Widget title=\"Teams\">\n            <ul className=\"widget__list\">\n                {teams.map(team => {\n                    const players = allPlayers.filter(player => player.element.team === team.id)\n                    const points = sumNumbers(players.map(player => player.aggregates.totals.points))\n\n                    const positions: Record<string, number> = bootstrap.element_types\n                        .reduce((acc, curr) => ({\n                            ...acc,\n                            [curr.id]: players.filter(player => player.element.element_type === curr.id).length,\n                        }), {})\n\n                    return (\n                        <li className=\"widget__list__item\" key={team.id}>\n                            <Team team={team} />\n                            <div>\n                                <div>\n                                    <b>{counts[team.id] || 0}</b>\n                                    {' '}\n                                    (\n                                        {getPointsLabel(points)}, {players.length > 0 ? round(points / players.length) : 0}\n                                        {' '}\n                                        <Metric metric=\"ppp\" />\n                                    )\n                                </div>\n                                <div>\n                                    {Object.entries(positions).filter(([ type, count ]) => count > 0).map(([ type, count ]) => (\n                                        <span className=\"teams-widget__position\" key={type}>\n                                            {count} {initialCaps(bootstrap.element_types.find(el => el.id === Number(type))?.plural_name_short || '')}\n                                        </span>\n                                    ))}\n                                </div>\n                            </div>\n                        </li>\n                    )\n                })}\n            </ul>\n        </Widget>\n    )\n}\n\nexport default TeamsWidget","import React from 'react'\nimport { useSelector } from 'react-redux'\nimport { RootState } from '../../reducers'\nimport { getAllPlayers, getGWCountLabel, round, getPointsLabel } from '../../utilities'\nimport { Metric } from '../Metric'\nimport { Player } from '../Player'\nimport { SiteLink } from '../SiteLink'\nimport { Widget } from '../Widget'\n\nconst MAX_ITEMS = 10\n\nconst NonBlankStreakWidget: React.FC = () => {\n    const stats = useSelector((state: RootState) => state.stats.data)\n\n    if (!stats) {\n        return (\n            <Widget title=\"Highest Non-Blank Streaks\" />\n        )\n    }\n\n    const streakers = getAllPlayers(stats)\n        .sort((a, b) => {\n            const aStreak = a.aggregates.streaks.nonBlank\n            const bStreak = b.aggregates.streaks.nonBlank\n\n            const aStreakLength = a.aggregates.streaks.nonBlank?.length || 0\n            const bStreakLength = b.aggregates.streaks.nonBlank?.length || 0\n\n            if (bStreakLength - aStreakLength === 0) {\n                return (bStreak?.points || 0) - (aStreak?.points || 0)\n            }\n\n            return bStreakLength - aStreakLength\n        })\n        .filter(streaker => streaker.aggregates.streaks.nonBlank !== null)\n        .slice(0, MAX_ITEMS)\n\n    return (\n        <Widget title=\"Highest Non-Blank Streaks\">\n            <ul className=\"widget__list\">\n                {streakers.map(streaker => {\n                    const streak = streaker.aggregates.streaks.nonBlank\n\n                    if (!streak) {\n                        return null\n                    }\n\n                    return (\n                        <li className=\"widget__list__item\" key={streaker.element.id}>\n                            <Player id={streaker.element.id} />\n                            <div>\n                                <div>\n                                    <SiteLink event={streak.start.id} />\n                                    {' – '}\n                                    <SiteLink event={streak.end.id} />\n                                </div>\n                                <div>\n                                    ({getGWCountLabel(streak.length)}, {getPointsLabel(streak.points || 0)}, {round((streak.points || 0) / streak.length)} <Metric metric=\"ppg\" />)\n                                </div>\n                            </div>\n                        </li>\n                    )\n                })}\n            </ul>\n        </Widget>\n    )\n}\n\nexport default NonBlankStreakWidget","import React from 'react'\nimport { useSelector } from 'react-redux'\nimport { RootState } from '../../reducers'\nimport { getAllPlayers, getGWCountLabel, getPointsLabel, round } from '../../utilities'\nimport { Metric } from '../Metric'\nimport { Player } from '../Player'\nimport { SiteLink } from '../SiteLink'\nimport { Widget } from '../Widget'\n\nconst MAX_ITEMS = 10\n\nconst SelectionStreakWidget: React.FC = () => {\n    const stats = useSelector((state: RootState) => state.stats.data)\n\n    if (!stats) {\n        return (\n            <Widget title=\"Highest Selection Streaks\" />\n        )\n    }\n\n    const streakers = getAllPlayers(stats)\n        .sort((a, b) => {\n            const aStreak = a.aggregates.streaks.selection\n            const bStreak = b.aggregates.streaks.selection\n\n            const aStreakLength = a.aggregates.streaks.selection?.length || 0\n            const bStreakLength = b.aggregates.streaks.selection?.length || 0\n\n            if (bStreakLength - aStreakLength === 0) {\n                return (bStreak?.points || 0) - (aStreak?.points || 0)\n            }\n\n            return bStreakLength - aStreakLength\n        })\n        .filter(streaker => streaker.aggregates.streaks.selection !== null)\n        .slice(0, MAX_ITEMS)\n\n    return (\n        <Widget title=\"Highest Selection Streaks\">\n            <ul className=\"widget__list\">\n                {streakers.map(streaker => {\n                    const streak = streaker.aggregates.streaks.selection\n\n                    if (!streak) {\n                        return null\n                    }\n\n                    return (\n                        <li className=\"widget__list__item\" key={streaker.element.id}>\n                            <Player id={streaker.element.id} />\n                            <div>\n                                <div>\n                                    <SiteLink event={streak.start.id} />\n                                    {' – '}\n                                    <SiteLink event={streak.end.id} />\n                                </div>\n                                <div>\n                                    (\n                                        {getGWCountLabel(streak.length)}, {getPointsLabel(streak.points || 0)}, {round((streak.points || 0) / streak.length)} <Metric metric=\"ppg\" />\n                                    )\n                                </div>\n                            </div>\n                        </li>\n                    )\n                })}\n            </ul>\n        </Widget>\n    )\n}\n\nexport default SelectionStreakWidget","import React from 'react'\nimport { useSelector } from 'react-redux'\nimport { RootState } from '../../reducers'\nimport { getAllPlayers, getGWCountLabel, getPointsLabel, round } from '../../utilities'\nimport { Metric } from '../Metric'\nimport { Player } from '../Player'\nimport { SiteLink } from '../SiteLink'\nimport { Widget } from '../Widget'\n\nconst MAX_ITEMS = 10\n\nconst StartStreakWidget: React.FC = () => {\n    const stats = useSelector((state: RootState) => state.stats.data)\n\n    if (!stats) {\n        return (\n            <Widget title=\"Highest Start Streaks\" />\n        )\n    }\n\n    const streakers = getAllPlayers(stats)\n        .sort((a, b) => {\n            const aStreak = a.aggregates.streaks.start\n            const bStreak = b.aggregates.streaks.start\n\n            const aStreakLength = a.aggregates.streaks.start?.length || 0\n            const bStreakLength = b.aggregates.streaks.start?.length || 0\n\n            if (bStreakLength - aStreakLength === 0) {\n                return (bStreak?.points || 0) - (aStreak?.points || 0)\n            }\n\n            return bStreakLength - aStreakLength\n        })\n        .filter(streaker => streaker.aggregates.streaks.start !== null)\n        .slice(0, MAX_ITEMS)\n\n    return (\n        <Widget title=\"Highest Start Streaks\">\n            <ul className=\"widget__list\">\n                {streakers.map(streaker => {\n                    const streak = streaker.aggregates.streaks.start\n\n                    if (!streak) {\n                        return null\n                    }\n\n                    return (\n                        <li className=\"widget__list__item\" key={streaker.element.id}>\n                            <Player id={streaker.element.id} />\n                            <div>\n                                <div>\n                                    <SiteLink event={streak.start.id} />\n                                    {' – '}\n                                    <SiteLink event={streak.end.id} />\n                                </div>\n                                <div>\n                                    (\n                                        {getGWCountLabel(streak.length)}, {getPointsLabel(streak.points || 0)}, {round((streak.points || 0) / streak.length)} <Metric metric=\"ppg\" />\n                                    )\n                                </div>\n                            </div>\n                        </li>\n                    )\n                })}\n            </ul>\n        </Widget>\n    )\n}\n\nexport default StartStreakWidget","import React from 'react'\nimport { useSelector } from 'react-redux'\nimport { RootState } from '../../reducers'\nimport { getAllPlayers, getGWCountLabel, sort } from '../../utilities'\nimport { Player } from '../Player'\nimport { SiteLink } from '../SiteLink'\nimport { Widget } from '../Widget'\n\nconst MAX_ITEMS = 10\n\nconst BenchStreakWidget: React.FC = () => {\n    const stats = useSelector((state: RootState) => state.stats.data)\n\n    if (!stats) {\n        return (\n            <Widget title=\"Highest Bench Appearance Streaks\" />\n        )\n    }\n\n    const allPlayers = getAllPlayers(stats)\n\n    const streakers = sort(allPlayers, el => el.aggregates.streaks.bench?.length || 0).slice(0, MAX_ITEMS)\n\n    return (\n        <Widget title=\"Highest Bench Appearance Streaks\">\n            <ul className=\"widget__list\">\n                {streakers.map(streaker => {\n                    const streak = streaker.aggregates.streaks.bench\n\n                    if (!streak) {\n                        return null\n                    }\n\n                    return (\n                        <li className=\"widget__list__item\" key={streaker.element.id}>\n                            <Player id={streaker.element.id} />\n                            <div>\n                                <div>\n                                    <SiteLink event={streak.start.id} />\n                                    {' – '}\n                                    <SiteLink event={streak.end.id} />\n                                </div>\n                                <div>\n                                    ({getGWCountLabel(streak.length)})\n                                </div>\n                            </div>\n                        </li>\n                    )\n                })}\n            </ul>\n        </Widget>\n    )\n}\n\nexport default BenchStreakWidget","import React from 'react'\n\nconst SwapIcon: React.FC = () => {\n    return (\n        <svg width=\"32\" height=\"20\" viewBox=\"0 0 32 20\" fill=\"#94968C\" className=\"swap-icon\">\n            <path fillRule=\"evenodd\" d=\"M53.6485838,32.0017628 L50.0028805,32.002243 L44.1795487,32.002243 L42.8449352,32.002243 C42.2448392,32.002243 41.6106577,32.2648846 41.1853096,32.6869358 C40.7782045,33.0941023 40.4723956,33.7595891 40.5007201,34.3468117 C40.5285646,34.9508394 40.7258761,35.5807952 41.1853096,36.0066875 C41.6447432,36.4287387 42.2069131,36.6913803 42.8449352,36.6913803 L46.4978397,36.6913803 L47.9851176,36.6913803 L45.4666347,39.209763 C43.6044167,41.0722619 41.7383581,42.9386019 39.8780605,44.7991802 C38.2707633,46.4067198 36.6673068,48.0104182 35.0585694,49.6193983 C34.2803649,50.3977202 33.4867979,51.1722009 32.7181949,51.9601258 L32.6845895,51.9937362 C32.2568411,52.4215492 32,53.0481439 32,53.6536121 C32,54.2317118 32.2530005,54.9140038 32.6845895,55.313488 C33.1305809,55.7206545 33.7157945,56.0265096 34.3442151,55.9981808 C34.9721555,55.9703321 35.5592895,55.7600268 36.0038406,55.313488 L37.931349,53.3856888 L42.5261642,48.7906607 L48.1147384,43.2007634 C49.1805089,42.1348321 50.2462794,41.0689008 51.3115699,40.0034497 L51.3115699,43.8239971 L51.3115699,45.1597723 C51.3115699,45.7599588 51.5741719,46.3937558 51.9961594,46.8196481 C52.4032645,47.2263345 53.068651,47.5321896 53.6557849,47.5038608 C54.2597216,47.4760121 54.8895823,47.279151 55.3154105,46.8196481 C55.7316371,46.3582247 56,45.7954898 56,45.1597723 L56,41.5058366 L56,35.6821067 L56,34.3468117 C56,34.0073461 55.9183869,33.6846859 55.781085,33.3893941 C55.6649064,33.1209907 55.5084013,32.8717932 55.3082093,32.6864556 C54.8617379,32.2792891 54.2770043,31.9739142 53.6485838,32.0017628 Z\" transform=\"rotate(45 71.042 -6.799)\"></path>\n        </svg>\n    )\n}\n\nexport default SwapIcon","import React from 'react'\nimport { useSelector } from 'react-redux'\nimport { RootState } from '../../reducers'\nimport { getAllPlayers, head, sort } from '../../utilities'\nimport { Player } from '../Player'\nimport { Widget } from '../Widget'\nimport { SwapIcon } from '../SwapIcon'\nimport { SiteLink } from '../SiteLink'\nimport './CaptainOpportunityWidget.scss'\n\nconst CaptainOpportunityWidget: React.FC = () => {\n    const stats = useSelector((state: RootState) => state.stats.data)\n\n    const history = useSelector((state: RootState) => state.history.data)\n\n    if (!stats || !history) {\n        return (\n            <Widget title=\"Missed Captaincies\" />\n        )\n    }\n\n    const allPlayers = getAllPlayers(stats)\n    const weeks = history.current.length\n\n    const improvements = Array.from(Array(weeks).keys()).map((el, index) => ({\n        top: head(sort(allPlayers, el => el.data[index].rawPoints || 0)),\n        captain: allPlayers.find(player => (player.data[index].multiplier || 0) > 1),\n    }))\n\n    return (\n        <Widget title=\"Missed Captaincies\">\n            <ul className=\"widget__list\">\n                {improvements.map((improvement, index) => {\n                    if (!improvement.captain || !improvement.top) {\n                        return null\n                    }\n\n                    const captainData = improvement.captain.data[index]\n                    const topData = improvement.top.data[index]\n\n                    if (captainData.rawPoints === topData.rawPoints) {\n                        return null\n                    }\n\n                    return (\n                        <li className=\"widget__list__item\" key={captainData.event.id}>\n                            <div>\n                                <Player id={improvement.captain.element.id} suffix=\"C\" />\n                                <Player id={improvement.top.element.id} />\n                            </div>\n                            <div className=\"captain-opportunity-widget__swap-info\">\n                                <b>{(captainData.rawPoints || 0) * 2}</b> <SwapIcon /> <b>{(topData.rawPoints || 0) * 2} </b>\n                                {' '}\n                                (\n                                    <SiteLink event={captainData.event.id} />\n                                )\n                            </div>\n                        </li>\n                    )\n                })}\n            </ul>\n        </Widget>\n    )\n}\n\nexport default CaptainOpportunityWidget","import React from 'react'\nimport { useSelector } from 'react-redux'\nimport { RootState } from '../../reducers'\nimport { Widget } from '../Widget'\nimport { getAllPlayers, sort } from '../../utilities'\nimport { Player } from '../Player'\n\nconst MAX_ITEMS = 10\n\nconst TeamsWidget: React.FC = () => {\n    const stats = useSelector((state: RootState) => state.stats.data)\n\n    if (!stats) {\n        return (\n            <Widget title=\"Top Selections\" />\n        )\n    }\n\n    const elements = sort(getAllPlayers(stats), el => el.aggregates.totals.selections)\n\n    return (\n        <Widget title=\"Top Selections\">\n            <ul className=\"widget__list\">\n                {elements.slice(0, MAX_ITEMS).map(element => (\n                    <li className=\"widget__list__item\" key={element.element.id}>\n                        <Player id={element.element.id} />\n                        <b>{element.aggregates.totals.selections}</b>\n                    </li>\n                ))}\n            </ul>\n        </Widget>\n    )\n}\n\nexport default TeamsWidget","import React from 'react'\nimport { useSelector } from 'react-redux'\nimport { RootState } from '../../reducers'\nimport { Widget } from '../Widget'\nimport { getAllPlayers, sort } from '../../utilities'\nimport { Player } from '../Player'\n\nconst MAX_ITEMS = 10\n\nconst StarterWidget: React.FC = () => {\n    const stats = useSelector((state: RootState) => state.stats.data)\n\n    if (!stats) {\n        return (\n            <Widget title=\"Top Starters\" />\n        )\n    }\n\n    const elements = sort(getAllPlayers(stats), el => el.aggregates.totals.starts)\n\n    return (\n        <Widget title=\"Top Starters\">\n            <ul className=\"widget__list\">\n                {elements.slice(0, MAX_ITEMS).map(element => (\n                    <li className=\"widget__list__item\" key={element.element.id}>\n                        <Player id={element.element.id} />\n                        <b>{element.aggregates.totals.starts}</b>\n                    </li>\n                ))}\n            </ul>\n        </Widget>\n    )\n}\n\nexport default StarterWidget","import React from 'react'\nimport { useSelector } from 'react-redux'\nimport { RootState } from '../../reducers'\nimport { Widget } from '../Widget'\nimport { getAllPlayers, sort } from '../../utilities'\nimport { Player } from '../Player'\n\nconst MAX_ITEMS = 10\n\nconst BenchWidget: React.FC = () => {\n    const stats = useSelector((state: RootState) => state.stats.data)\n\n    if (!stats) {\n        return (\n            <Widget title=\"Top Bench Players\" />\n        )\n    }\n\n    const elements = sort(getAllPlayers(stats), el => el.aggregates.totals.benched)\n\n    return (\n        <Widget title=\"Top Bench Players\">\n            <ul className=\"widget__list\">\n                {elements.slice(0, MAX_ITEMS).map(element => (\n                    <li className=\"widget__list__item\" key={element.element.id}>\n                        <Player id={element.element.id} />\n                        <b>{element.aggregates.totals.benched}</b>\n                    </li>\n                ))}\n            </ul>\n        </Widget>\n    )\n}\n\nexport default BenchWidget","import React from 'react'\nimport { useSelector } from 'react-redux'\nimport { RootState } from '../../reducers'\nimport { Widget } from '../Widget'\nimport { getAllPlayers, round } from '../../utilities'\nimport { Player } from '../Player'\n\ntype Props = {\n    title: string\n    top?: boolean\n}\n\nconst MAX_ITEMS = 10\n\nconst DifferenceWidget: React.FC<Props> = (props: Props) => {\n    const stats = useSelector((state: RootState) => state.stats.data)\n\n    if (!stats) {\n        return (\n            <Widget title={props.title} />\n        )\n    }\n\n    const elements = getAllPlayers(stats)\n        .map(element => {\n            const selections = element.aggregates.totals.selections\n            const starts = element.aggregates.totals.starts\n            const benched = element.aggregates.totals.benched\n\n            return {\n                ...element,\n                benched,\n                benchedPercentage: benched / selections * 100,\n                starts,\n                startsPercentage: starts / selections * 100,\n            }\n        })\n\n    const topStarters = [ ...elements ].sort((a, b) => {\n        const percentageDiff = b.startsPercentage - a.startsPercentage\n        return percentageDiff === 0 ? b.starts - a.starts : percentageDiff\n    })\n\n    const topBenchwarmers = [ ...elements ].sort((a, b) => {\n        const percentageDiff = b.benchedPercentage - a.benchedPercentage\n        return percentageDiff === 0 ? b.benched - a.benched : percentageDiff\n    })\n\n    return (\n        <Widget title={props.title}>\n            <ul className=\"widget__list\">\n                {props.top && topStarters.slice(0, MAX_ITEMS).map(element => (\n                    <li className=\"widget__list__item\" key={element.element.id}>\n                        <Player id={element.element.id} />\n                        <span><b>{round(element.startsPercentage)}%</b> ({element.starts})</span>\n                    </li>\n                ))}\n                {!props.top && topBenchwarmers.slice(0, MAX_ITEMS).map(element => (\n                    <li className=\"widget__list__item\" key={element.element.id}>\n                        <Player id={element.element.id} />\n                        <span><b>{round(element.benchedPercentage)}%</b> ({element.benched})</span>\n                    </li>\n                ))}\n            </ul>\n        </Widget>\n    )\n}\n\nexport default DifferenceWidget","import React from 'react'\nimport { useSelector } from 'react-redux'\nimport { AreaChart, Area, XAxis, YAxis, ResponsiveContainer, CartesianGrid, Tooltip } from 'recharts'\nimport { RootState } from '../../reducers'\nimport { Widget } from '../Widget'\nimport { getShortName, head, sort, thousandsSeparator, thousandsShorthand } from '../../utilities'\n\nconst OverallRankWidget: React.FC = () => {\n    const history = useSelector((state: RootState) => state.history.data)\n    const bootstrap = useSelector((state: RootState) => state.bootstrap.data)\n\n    if (!history || !bootstrap) {\n        return (\n            <Widget title=\"Overall Rank Evolution\" />\n        )\n    }\n\n    let data = history.current.map(entry => {\n        const event = bootstrap.events.find(event => event.id === entry.event)\n\n        return {\n            name: `GW ${event ? getShortName(event) : entry.event}`,\n            value: entry.overall_rank,\n        }\n    })\n\n    const max = (head(sort([ ...data ], el => el.value))?.value || 0) * 1.05\n\n    data = [ ...data ].map(element => ({\n        ...element,\n        max,\n    }))\n\n    return (\n        <Widget title=\"Overall Rank Evolution\">\n            <div className=\"chart chart--reversed\">\n                <ResponsiveContainer height={300} width=\"100%\">\n                    <AreaChart data={data} margin={{ bottom: 45, left: 15, right: 15 }}>\n                        <Area type=\"monotone\" dataKey=\"max\" fill=\"#177B47\" fillOpacity=\"1\" />\n                        <Area type=\"monotone\" dataKey=\"value\" stroke=\"#177B47\" fill=\"#ffffff\" fillOpacity=\"1\" />\n                        <YAxis reversed={true} tickFormatter={value => thousandsShorthand(value)} domain={[1, max]} interval=\"preserveStartEnd\" tickCount={10} />\n                        <XAxis dataKey=\"name\" angle={-90} textAnchor=\"end\" interval=\"preserveStartEnd\" />\n                        <CartesianGrid stroke=\"rgba(192, 192, 192, 0.5)\" strokeDasharray=\"3 3\" />\n                        <Tooltip isAnimationActive={false} formatter={(value, name) => name === 'max' ? [undefined, undefined] : [ thousandsSeparator(Number(value)), 'Rank' ]} separator=\": \" />\n                    </AreaChart>\n                </ResponsiveContainer>\n            </div>\n        </Widget>\n    )\n}\n\nexport default OverallRankWidget","import React from 'react'\nimport { useSelector } from 'react-redux'\nimport { AreaChart, Area, XAxis, YAxis, ResponsiveContainer, CartesianGrid, Tooltip } from 'recharts'\nimport { RootState } from '../../reducers'\nimport { Widget } from '../Widget'\nimport { getShortName, initialCaps } from '../../utilities'\n\nconst OverallRankWidget: React.FC = () => {\n    const history = useSelector((state: RootState) => state.history.data)\n    const bootstrap = useSelector((state: RootState) => state.bootstrap.data)\n\n    if (!history || !bootstrap) {\n        return (\n            <Widget title=\"Gameweek Points\" />\n        )\n    }\n\n    const data = history.current.map(entry => {\n        const event = bootstrap.events.find(event => event.id === entry.event)\n\n        return {\n            name: `GW ${event ? getShortName(event) : entry.event}`,\n            points: entry.points,\n            bench: entry.points_on_bench,\n        }\n    })\n\n    return (\n        <Widget title=\"Gameweek Points\">\n            <div className=\"chart\">\n                <ResponsiveContainer height={300} width=\"100%\">\n                    <AreaChart data={data} margin={{ bottom: 45, left: 15, right: 15 }}>\n                        <Area type=\"monotone\" dataKey=\"points\" stroke=\"#177B47\" fill=\"#177B47\" fillOpacity=\"1\" />\n                        <Area type=\"monotone\" dataKey=\"bench\" stroke=\"#00FF87\" fill=\"#00FF87\" fillOpacity=\"1\" />\n                        <YAxis interval=\"preserveStartEnd\" />\n                        <XAxis dataKey=\"name\" angle={-90} textAnchor=\"end\" interval=\"preserveStartEnd\" />\n                        <CartesianGrid stroke=\"rgba(192, 192, 192, 0.5)\" strokeDasharray=\"3 3\" />\n                        <Tooltip isAnimationActive={false} formatter={(value, name) => [ value, initialCaps(name) ]} separator=\": \" />\n                    </AreaChart>\n                </ResponsiveContainer>\n            </div>\n        </Widget>\n    )\n}\n\nexport default OverallRankWidget","import React from 'react'\nimport { useSelector } from 'react-redux'\nimport { AreaChart, Area, XAxis, YAxis, ResponsiveContainer, CartesianGrid, Tooltip } from 'recharts'\nimport { RootState } from '../../reducers'\nimport { Widget } from '../Widget'\nimport { getShortName, initialCaps } from '../../utilities'\n\nconst ValueWidget: React.FC = () => {\n    const history = useSelector((state: RootState) => state.history.data)\n    const bootstrap = useSelector((state: RootState) => state.bootstrap.data)\n\n    if (!history || !bootstrap) {\n        return (\n            <Widget title=\"Team Value Evolution\" />\n        )\n    }\n\n    const data = history.current.map(entry => {\n        const event = bootstrap.events.find(event => event.id === entry.event)\n\n        return {\n            name: `GW ${event ? getShortName(event) : entry.event}`,\n            value: entry.value + entry.bank,\n        }\n    })\n\n    return (\n        <Widget title=\"Team Value Evolution\">\n            <div className=\"chart\">\n                <ResponsiveContainer height={300} width=\"100%\">\n                    <AreaChart data={data} margin={{ bottom: 45, left: 15, right: 15 }}>\n                        <Area type=\"monotone\" dataKey=\"value\" stroke=\"#177B47\" fill=\"#177B47\" fillOpacity=\"1\" />\n                        <YAxis tickFormatter={value => `£${value / 10}`} domain={[ 'auto', 'auto' ]} interval=\"preserveStartEnd\" />\n                        <XAxis dataKey=\"name\" angle={-90} textAnchor=\"end\" interval=\"preserveStartEnd\" />\n                        <CartesianGrid stroke=\"rgba(192, 192, 192, 0.5)\" strokeDasharray=\"3 3\" />\n                        <Tooltip isAnimationActive={false} formatter={(value, name) => [ `£${Number(value) / 10}`, initialCaps(name) ]} separator=\": \" />\n                    </AreaChart>\n                </ResponsiveContainer>\n            </div>\n        </Widget>\n    )\n}\n\nexport default ValueWidget","import React from 'react'\nimport { useSelector } from 'react-redux'\nimport { RootState } from '../../reducers'\nimport { getAllPlayers, head, round, sort } from '../../utilities'\nimport { Player } from '../Player'\nimport { Widget } from '../Widget'\n\nconst WrongCaptainWidget: React.FC = () => {\n    const stats = useSelector((state: RootState) => state.stats.data)\n\n    const history = useSelector((state: RootState) => state.history.data)\n\n    if (!stats || !history) {\n        return (\n            <Widget title=\"Wrong Captains\" />\n        )\n    }\n\n    const allPlayers = getAllPlayers(stats)\n    const weeks = history.current.length\n\n    const improvements = Array.from(Array(weeks).keys())\n        .map((el, index) => ({\n            top: head(sort(allPlayers, el => el.data[index].rawPoints || 0)),\n            captain: allPlayers.find(player => (player.data[index].multiplier || 0) > 1),\n        }))\n        .filter((element, index) => (element.top?.data[index].rawPoints || 0) > (element.captain?.data[index].rawPoints || 0))\n        .reduce((acc, curr) => curr.captain ? ({\n            ...acc,\n            [curr.captain.element.id]: (acc[curr.captain.element.id] ? acc[curr.captain.element.id] : 0) + 1,\n        }) : acc, {} as Record<number, number>)\n\n    const timesUsed = allPlayers.reduce((acc, curr) => {\n        return {\n            ...acc,\n            [curr.element.id]: curr.aggregates.totals.captaincies,\n        }\n    }, {} as Record<number, number>)\n\n    return (\n        <Widget title=\"Wrong Captains\">\n            <ul className=\"widget__list\">\n                {sort(Object.entries(improvements), el => el[1]).map(([ player, count ]) => (\n                    <li className=\"widget__list__item\" key={player}>\n                        <Player id={Number(player)} />\n                        <span><b>{count} out of {timesUsed[Number(player)]}</b> ({round(count / timesUsed[Number(player)] * 100, 1)}%)</span>\n                    </li>\n                ))}\n            </ul>\n        </Widget>\n    )\n}\n\nexport default WrongCaptainWidget","import React from 'react'\nimport { useSelector } from 'react-redux'\nimport { RootState } from '../../reducers'\nimport { getAllPlayers, getPointsLabel, round, sort } from '../../utilities'\nimport { Player } from '../Player'\nimport { Widget } from '../Widget'\n\nconst MAX_ITEMS = 10\n\nconst ContributionWidget: React.FC = () => {\n    const stats = useSelector((state: RootState) => state.stats.data)\n    const entry = useSelector((state: RootState) => state.entry.data)\n\n    if (!stats || !entry || entry.summary_overall_points === 0) {\n        return (\n            <Widget title=\"Total Points Contribution\" />\n        )\n    }\n\n    const contributions = sort(getAllPlayers(stats), el => el.aggregates.totals.points).slice(0, MAX_ITEMS)\n\n    return (\n        <Widget title=\"Total Points Contribution\">\n            <ul className=\"widget__list\">\n                {contributions.map(player => (\n                    <li className=\"widget__list__item\" key={player.element.id}>\n                        <Player id={player.element.id} />\n                        <div>\n                            <b>{round(player.aggregates.totals.points / entry.summary_overall_points * 100)}%</b> ({getPointsLabel(player.aggregates.totals.points)})\n                        </div>\n                    </li>\n                ))}\n            </ul>\n        </Widget>\n    )\n}\n\nexport default ContributionWidget","import React from 'react'\nimport { useSelector } from 'react-redux'\nimport { RootState } from '../../reducers'\nimport { Widget } from '../Widget'\nimport { getAllPlayers, getPointsLabel, round, sort } from '../../utilities'\nimport { Player } from '../Player'\nimport { getGWCountLabel } from '../../utilities/strings';\nimport { StatData } from '../../types'\n\ntype Props = {\n    title: string\n    top?: boolean\n}\n\nconst MAX_ITEMS = 10\n\nconst getPointsShare = (player: StatData): number => 100 - player.aggregates.totals.rawPoints / player.element.total_points * 100\n\nconst MissedPointsShareWidget: React.FC<Props> = (props: Props) => {\n    const stats = useSelector((state: RootState) => state.stats.data)\n    const history = useSelector((state: RootState) => state.history.data)\n\n    if (!stats || !history) {\n        return (\n            <Widget title={props.title} />\n        )\n    }\n\n    const elements = sort(\n        getAllPlayers(stats).filter(player => player.aggregates.totals.points > 0),\n        el => getPointsShare(el),\n        props.top ? 'desc': 'asc'\n    ).slice(0, MAX_ITEMS)\n\n    return (\n        <Widget title={props.title}>\n            <ul className=\"widget__list\">\n                {elements.map(element => (\n                    <li className=\"widget__list__item\" key={element.element.id}>\n                        <Player id={element.element.id} />\n                        <div>\n                            <b>{element.element.total_points > 0 && `${round(getPointsShare(element))}%`}</b>\n                            {' '}\n                            ({getPointsLabel(element.element.total_points - element.aggregates.totals.rawPoints)} in {getGWCountLabel(history.current.length - element.aggregates.totals.selections)})\n                        </div>\n                    </li>\n                ))}\n            </ul>\n        </Widget>\n    )\n}\n\nexport default MissedPointsShareWidget","import React, { useState, useEffect, useRef } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport classNames from 'classnames'\nimport Select, { ValueType } from 'react-select'\nimport queryString from 'query-string'\nimport { Bootstrap, StatData, Stats } from '../../types'\nimport { fetchBootstrap } from '../../reducers/bootstrap'\nimport { RootState } from '../../reducers'\nimport { Player } from '../Player'\nimport { Widget } from '../Widget'\nimport { Spinner } from '../Spinner'\nimport { getPastEvents, getChipAbbreviation, thousandsSeparator, getShortName, validateTeamId, round, sort, getPointsLabel } from '../../utilities'\nimport { Modal } from '../Modal'\nimport { setId } from '../../reducers/settings'\nimport { buildData } from '../../reducers/stats'\nimport { Button } from '../Button'\nimport { fetchHistory } from '../../reducers/history'\nimport { HistoryWidget } from '../HistoryWidget'\nimport { TotsWidget } from '../TotsWidget'\nimport { PlayerStatsWidget } from '../PlayerStatsWidget'\nimport { FormationWidget } from '../FormationWidget'\nimport { CaptainWidget } from '../CaptainWidget'\nimport { GameweekWidget } from '../GameweekWidget'\nimport { PositionsWidget } from '../PositionsWidget'\nimport { fetchEntry } from '../../reducers/entry'\nimport { Metric } from '../Metric'\nimport { SeasonWidget } from '../SeasonWidget'\nimport { TeamsWidget } from '../TeamsWidget'\nimport { NonBlankStreakWidget } from '../NonBlankStreakWidget'\nimport { SelectionStreakWidget } from '../SelectionStreakWidget'\nimport { StartStreakWidget } from '../StartStreakWidget'\nimport { BenchStreakWidget } from '../BenchStreakWidget'\nimport { CaptainOpportunityWidget } from '../CaptainOpportunityWidget'\nimport { SelectionWidget } from '../SelectionWidget'\nimport { StarterWidget } from '../StarterWidget'\nimport { BenchWidget } from '../BenchWidget'\nimport { DifferenceWidget } from '../DifferenceWidget'\nimport { OverallRankWidget } from '../OverallRankWidget'\nimport { PointsWidget } from '../PointsWidget'\nimport { ValueWidget } from '../ValueWidget'\nimport { SiteLink } from '../SiteLink'\nimport { WrongCaptainWidget } from '../WrongCaptainWidget'\nimport { ContributionWidget } from '../ContributionWidget'\nimport { MissedPointsShareWidget } from '../MissedPointsShareWidget'\nimport './Dashboard.scss'\n\ntype OptionType = {\n    value: string\n    label: string\n}\n\ntype QueryString = {\n    team?: string\n}\n\nconst sortings: { [ key: string ]: (statData: StatData) => number } = {\n    points: el => el.aggregates.totals.points,\n    selection: el => el.aggregates.totals.selections,\n    start: el => el.aggregates.totals.starts,\n    bench: el => el.aggregates.totals.benched,\n    alphabet: (statData: StatData): number => {\n        return statData.element.web_name.toLowerCase().charCodeAt(0) * -1\n    }\n}\n\nconst sortOptions = [\n    { value: 'points', label: 'Total Points' },\n    { value: 'selection', label: 'Most Selected' },\n    { value: 'start', label: 'Most Started' },\n    { value: 'bench', label: 'Most Benched' },\n    { value: 'alphabet', label: 'Alphabetically' },\n]\n\nconst renderPlayerList = (stats: Stats, bootstrap: Bootstrap, sorting: OptionType): JSX.Element[] => Object.entries(stats).map(([ elementType, statData ]) => (\n    <div key={elementType}>\n        <li className=\"dashboard__category\">\n            <span>{bootstrap?.element_types.find(el => el.id === Number(elementType))?.plural_name_short}</span>\n            <span>{statData.length}</span>\n        </li>\n        {sort(statData.filter(element => element.data.filter(pick => pick.multiplier !== null).length), el => sortings[sorting.value](el))\n            .map(element => (\n                <li key={element.element.id} className=\"dashboard__item\">\n                    <div className=\"dashboard__player\">\n                        <Player id={element.element.id} />\n                    </div>\n                    <div className=\"dashboard__stats\">\n                        {element.data.map(item => (\n                            <span\n                                key={item.event.id}\n                                className={classNames('dashboard__stat', {\n                                    'dashboard__stat--benched': item.multiplier === 0,\n                                    'dashboard__stat--triple': item.multiplier === 3,\n                                    'dashboard__stat--started': item.multiplier,\n                                })}\n                            />\n                        ))}\n                    </div>\n                    <div className=\"dashboard__totals\">\n                        <span className=\"dashboard__stat\">\n                            <span>\n                                <b>{element.aggregates.totals.selections}</b> ({element.data.length ? round(element.aggregates.totals.selections / element.data.length * 100) : 0}%)\n                            </span>\n                        </span>\n                        <span className=\"dashboard__stat\">\n                            <span>\n                                <b>{element.aggregates.totals.starts}</b> ({element.data.length ? round(element.aggregates.totals.starts / element.data.length * 100) : 0}%)\n                            </span>\n                        </span>\n                        <span className=\"dashboard__stat\">\n                            <span>\n                                <b>{element.aggregates.totals.benched}</b> ({element.data.length ? round(element.aggregates.totals.benched / element.data.length * 100) : 0}%)\n                            </span>\n                        </span>\n                        <span className=\"dashboard__stat\">\n                            <span>\n                                <b>{element.aggregates.totals.points}</b>\n                                {' '}\n                                (\n                                    {element.aggregates.totals.starts > 0 ? round(element.aggregates.totals.points / element.aggregates.totals.starts) : 0}\n                                    {' '}\n                                    <Metric metric=\"ppg\" />\n                                )\n                            </span>\n                        </span>\n                    </div>\n                </li>\n            ))\n        }\n    </div>\n))\n\nconst Dashboard: React.FC = () => {\n    const [ isModalOpen, setIsModalOpen ] = useState(true)\n    const [ sort, setSort ] = useState<ValueType<OptionType>>(sortOptions[0])\n\n    const isLoading = useSelector((state: RootState) => state.loading > 0)\n\n    const bootstrap = useSelector((state: RootState) => state.bootstrap.data)\n\n    const stats = useSelector((state: RootState) => state.stats.data)\n    const chips = useSelector((state: RootState) => state.stats.chips)\n\n    const id = useSelector((state: RootState) => state.settings.id)\n\n    const entry = useSelector((state: RootState) => state.entry.data)\n\n    const dashboardRef = useRef<HTMLDivElement>(null)\n\n    const dispatch = useDispatch()\n\n    useEffect(() => {\n        dispatch(fetchBootstrap())\n\n        const query: QueryString = queryString.parse(window.location.hash)\n\n        if (query.team && validateTeamId(query.team)) {\n            dispatch(setId(query.team))\n        }\n    }, [ dispatch ])\n\n    useEffect(() => {\n        setTimeout(() => {\n            if (dashboardRef && dashboardRef.current) {\n                dashboardRef.current.scrollTo(dashboardRef.current.scrollWidth, 0)\n            }\n        }, 1)\n    }, [ stats ])\n\n    useEffect(() => {\n        setIsModalOpen(!id)\n\n        if (bootstrap && id) {\n            dispatch(buildData(bootstrap, id))\n            dispatch(fetchHistory(id))\n            dispatch(fetchEntry(id))\n\n            window.location.hash = queryString.stringify({ team: id })\n        }\n    }, [ id, dispatch, bootstrap ])\n\n    return (\n        <div className=\"app\">\n            {isModalOpen && (\n                <Modal onClose={() => setIsModalOpen(false)} />\n            )}\n            <div className={classNames('app__loading', {\n                'app__loading--hidden': !isLoading,\n            })}>\n                <Spinner />\n            </div>\n            <div className=\"app__content\">\n                {entry && (\n                    <header className=\"dashboard__entry\">\n                        <Widget>\n                            <h1 className=\"dashboard__title\">\n                                <SiteLink label={entry.name} />\n                                <div className=\"small\">{getPointsLabel(entry.summary_overall_points)} — Rank {thousandsSeparator(entry.summary_overall_rank)}</div>\n                            </h1>\n                            {id !== undefined && (\n                                <Button\n                                    onClick={() => setIsModalOpen(true)}\n                                    label=\"Change Team\"\n                                />\n                            )}\n                        </Widget>\n                    </header>\n                )}\n                <div className=\"dashboard__widgets dashboard__widgets--split\">\n                    <TotsWidget />\n                    <PlayerStatsWidget />\n                </div>\n                <div className=\"app__meta\">\n                    <label className=\"app__meta__label\">\n                        Sort by\n                    </label>\n                    <Select\n                        options={sortOptions}\n                        value={sort}\n                        onChange={option => setSort(option)}\n                        styles={{\n                            container: (provided) => ({ ...provided, width: '100%' }),\n                            menu: (provided) => ({ ...provided, zIndex: 20 })\n                        }}\n                    />\n                    <div className=\"app__legend\">\n                        <div className=\"app__color\">\n                            <div className=\"app__color__indicator app__color__indicator--started\"></div>\n                            Started\n                        </div>\n                        <div className=\"app__color\">\n                            <div className=\"app__color__indicator app__color__indicator--benched\"></div>\n                            Benched\n                        </div>\n                        <div className=\"app__color\">\n                            <div className=\"app__color__indicator app__color__indicator--triple\"></div>\n                            TC\n                        </div>\n                        <div className=\"app__color\">\n                            <div className=\"app__color__indicator\"></div>\n                            Not Selected\n                        </div>\n                    </div>\n                </div>\n                <div className={classNames('dashboard', {\n                    'dashboard--cloaked': !id,\n                })}>\n                    <div className=\"dashboard__container\" ref={dashboardRef}>\n                        <header className=\"dashboard__header\">\n                            <span className=\"dashboard__heading\">\n                                Player\n                            </span>\n                            {bootstrap?.events && getPastEvents(bootstrap.events).filter(event => event.top_element_info.points > 0).map(event => (\n                                <span className=\"dashboard__stat\" key={event.id}>\n                                    {getShortName(event)}\n                                    {chips && chips[event.id] && (\n                                        <div>{getChipAbbreviation(chips[event.id])}</div>\n                                    )}\n                                </span>\n                            ))}\n                            <div className=\"dashboard__totals\">\n                                <span className=\"dashboard__stat\">\n                                    Selected\n                                </span>\n                                <span className=\"dashboard__stat\">\n                                    Starting\n                                </span>\n                                <span className=\"dashboard__stat\">\n                                    Benched\n                                </span>\n                                <span className=\"dashboard__stat\">\n                                    Points\n                                </span>\n                            </div>\n                        </header>\n                        <ul className=\"dashboard__list\">\n                            {stats && bootstrap && renderPlayerList(stats, bootstrap, sort as OptionType)}\n                        </ul>\n                    </div>\n                </div>\n                <div className=\"dashboard__widgets\">\n                    <SelectionWidget />\n                    <StarterWidget />\n                    <BenchWidget />\n                    <DifferenceWidget title=\"Most Consistent Starters\" top />\n                    <DifferenceWidget title=\"Most Consistent Bench Players\" />\n                    <TeamsWidget />\n                    <PositionsWidget />\n                    <HistoryWidget />\n                    <FormationWidget />\n                    <CaptainWidget />\n                    <GameweekWidget />\n                    <SeasonWidget />\n                    <NonBlankStreakWidget />\n                    <SelectionStreakWidget />\n                    <StartStreakWidget />\n                    <BenchStreakWidget />\n                    <CaptainOpportunityWidget />\n                    <WrongCaptainWidget />\n                    <ContributionWidget />\n                    <MissedPointsShareWidget title=\"Most Points Scored Outside of Team\" top />\n                    <MissedPointsShareWidget title=\"Fewest Points Scored Outside of Team\" />\n                </div>\n                <div className=\"dashboard__graphs\">\n                    <OverallRankWidget />\n                    <PointsWidget />\n                    <ValueWidget />\n                </div>\n                <div className=\"app__legal\">\n                    <p>FPL Stats uses data from the official Premier League Fantasy API. This site is not affiliated with the Premier League.</p>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default Dashboard","import { combineReducers } from 'redux'\nimport bootstrap from './bootstrap'\nimport stats from './stats'\nimport settings from './settings'\nimport entry from './entry'\nimport { Bootstrap, Stats, History, Entry } from '../types'\nimport history from './history'\nimport loading from './loading'\n\nexport type RootState = {\n    loading: number\n    bootstrap: {\n        data: Bootstrap | undefined\n    }\n    stats: {\n        data: Stats | undefined\n        chips: {\n            [key: number]: string\n        } | undefined\n    }\n    settings: {\n        id: number | undefined\n        meanStrategy: 'average' | 'median'\n    }\n    history: {\n        data: History | undefined\n    }\n    entry: {\n        data: Entry | undefined\n    }\n}\n\nexport default combineReducers({\n    loading,\n    bootstrap,\n    stats,\n    settings,\n    history,\n    entry,\n})","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { Provider } from 'react-redux'\nimport * as serviceWorker from './serviceWorker'\nimport { Dashboard } from './components/Dashboard'\nimport configureAppStore from './store'\nimport './index.scss'\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={configureAppStore()}>\n      <Dashboard />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\nserviceWorker.unregister()\n","import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit'\nimport rootReducer from './reducers'\n\nexport default function configureAppStore() {\n    const store = configureStore({\n        reducer: rootReducer,\n        middleware: [ ...getDefaultMiddleware() ],\n    })\n\n    return store\n}"],"sourceRoot":""}